{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\codemirror\\mode\\powershell\\powershell.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\codemirror\\mode\\powershell\\powershell.js","mtime":1527492763059},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n(function(mod) {\r\n  'use strict';\r\n  if (typeof exports == 'object' && typeof module == 'object') // CommonJS\r\n    mod(require('../../lib/codemirror'));\r\n  else if (typeof define == 'function' && define.amd) // AMD\r\n    define(['../../lib/codemirror'], mod);\r\n  else // Plain browser env\r\n    mod(window.CodeMirror);\r\n})(function(CodeMirror) {\r\n'use strict';\r\n\r\nCodeMirror.defineMode('powershell', function() {\r\n  function buildRegexp(patterns, options) {\r\n    options = options || {};\r\n    var prefix = options.prefix !== undefined ? options.prefix : '^';\r\n    var suffix = options.suffix !== undefined ? options.suffix : '\\\\b';\r\n\r\n    for (var i = 0; i < patterns.length; i++) {\r\n      if (patterns[i] instanceof RegExp) {\r\n        patterns[i] = patterns[i].source;\r\n      }\r\n      else {\r\n        patterns[i] = patterns[i].replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n      }\r\n    }\r\n\r\n    return new RegExp(prefix + '(' + patterns.join('|') + ')' + suffix, 'i');\r\n  }\r\n\r\n  var notCharacterOrDash = '(?=[^A-Za-z\\\\d\\\\-_]|$)';\r\n  var varNames = /[\\w\\-:]/\r\n  var keywords = buildRegexp([\r\n    /begin|break|catch|continue|data|default|do|dynamicparam/,\r\n    /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,\r\n    /param|process|return|switch|throw|trap|try|until|where|while/\r\n  ], { suffix: notCharacterOrDash });\r\n\r\n  var punctuation = /[\\[\\]{},;`\\.]|@[({]/;\r\n  var wordOperators = buildRegexp([\r\n    'f',\r\n    /b?not/,\r\n    /[ic]?split/, 'join',\r\n    /is(not)?/, 'as',\r\n    /[ic]?(eq|ne|[gl][te])/,\r\n    /[ic]?(not)?(like|match|contains)/,\r\n    /[ic]?replace/,\r\n    /b?(and|or|xor)/\r\n  ], { prefix: '-' });\r\n  var symbolOperators = /[+\\-*\\/%]=|\\+\\+|--|\\.\\.|[+\\-*&^%:=!|\\/]|<(?!#)|(?!#)>/;\r\n  var operators = buildRegexp([wordOperators, symbolOperators], { suffix: '' });\r\n\r\n  var numbers = /^((0x[\\da-f]+)|((\\d+\\.\\d+|\\d\\.|\\.\\d+|\\d+)(e[\\+\\-]?\\d+)?))[ld]?([kmgtp]b)?/i;\r\n\r\n  var identifiers = /^[A-Za-z\\_][A-Za-z\\-\\_\\d]*\\b/;\r\n\r\n  var symbolBuiltins = /[A-Z]:|%|\\?/i;\r\n  var namedBuiltins = buildRegexp([\r\n    /Add-(Computer|Content|History|Member|PSSnapin|Type)/,\r\n    /Checkpoint-Computer/,\r\n    /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,\r\n    /Compare-Object/,\r\n    /Complete-Transaction/,\r\n    /Connect-PSSession/,\r\n    /ConvertFrom-(Csv|Json|SecureString|StringData)/,\r\n    /Convert-Path/,\r\n    /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,\r\n    /Copy-Item(Property)?/,\r\n    /Debug-Process/,\r\n    /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,\r\n    /Disconnect-PSSession/,\r\n    /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,\r\n    /(Enter|Exit)-PSSession/,\r\n    /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,\r\n    /ForEach-Object/,\r\n    /Format-(Custom|List|Table|Wide)/,\r\n    new RegExp('Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential'\r\n      + '|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job'\r\n      + '|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration'\r\n      + '|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)'),\r\n    /Group-Object/,\r\n    /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,\r\n    /ImportSystemModules/,\r\n    /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,\r\n    /Join-Path/,\r\n    /Limit-EventLog/,\r\n    /Measure-(Command|Object)/,\r\n    /Move-Item(Property)?/,\r\n    new RegExp('New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile'\r\n      + '|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)'),\r\n    /Out-(Default|File|GridView|Host|Null|Printer|String)/,\r\n    /Pause/,\r\n    /(Pop|Push)-Location/,\r\n    /Read-Host/,\r\n    /Receive-(Job|PSSession)/,\r\n    /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,\r\n    /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,\r\n    /Rename-(Computer|Item(Property)?)/,\r\n    /Reset-ComputerMachinePassword/,\r\n    /Resolve-Path/,\r\n    /Restart-(Computer|Service)/,\r\n    /Restore-Computer/,\r\n    /Resume-(Job|Service)/,\r\n    /Save-Help/,\r\n    /Select-(Object|String|Xml)/,\r\n    /Send-MailMessage/,\r\n    new RegExp('Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug' +\r\n               '|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)'),\r\n    /Show-(Command|ControlPanelItem|EventLog)/,\r\n    /Sort-Object/,\r\n    /Split-Path/,\r\n    /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,\r\n    /Stop-(Computer|Job|Process|Service|Transcript)/,\r\n    /Suspend-(Job|Service)/,\r\n    /TabExpansion2/,\r\n    /Tee-Object/,\r\n    /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,\r\n    /Trace-Command/,\r\n    /Unblock-File/,\r\n    /Undo-Transaction/,\r\n    /Unregister-(Event|PSSessionConfiguration)/,\r\n    /Update-(FormatData|Help|List|TypeData)/,\r\n    /Use-Transaction/,\r\n    /Wait-(Event|Job|Process)/,\r\n    /Where-Object/,\r\n    /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,\r\n    /cd|help|mkdir|more|oss|prompt/,\r\n    /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,\r\n    /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,\r\n    /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,\r\n    /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,\r\n    /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,\r\n    /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/\r\n  ], { prefix: '', suffix: '' });\r\n  var variableBuiltins = buildRegexp([\r\n    /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,\r\n    /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,\r\n    /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,\r\n    /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,\r\n    /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,\r\n    /WarningPreference|WhatIfPreference/,\r\n\r\n    /Event|EventArgs|EventSubscriber|Sender/,\r\n    /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,\r\n    /true|false|null/\r\n  ], { prefix: '\\\\$', suffix: '' });\r\n\r\n  var builtins = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });\r\n\r\n  var grammar = {\r\n    keyword: keywords,\r\n    number: numbers,\r\n    operator: operators,\r\n    builtin: builtins,\r\n    punctuation: punctuation,\r\n    identifier: identifiers\r\n  };\r\n\r\n  // tokenizers\r\n  function tokenBase(stream, state) {\r\n    // Handle Comments\r\n    //var ch = stream.peek();\r\n\r\n    var parent = state.returnStack[state.returnStack.length - 1];\r\n    if (parent && parent.shouldReturnFrom(state)) {\r\n      state.tokenize = parent.tokenize;\r\n      state.returnStack.pop();\r\n      return state.tokenize(stream, state);\r\n    }\r\n\r\n    if (stream.eatSpace()) {\r\n      return null;\r\n    }\r\n\r\n    if (stream.eat('(')) {\r\n      state.bracketNesting += 1;\r\n      return 'punctuation';\r\n    }\r\n\r\n    if (stream.eat(')')) {\r\n      state.bracketNesting -= 1;\r\n      return 'punctuation';\r\n    }\r\n\r\n    for (var key in grammar) {\r\n      if (stream.match(grammar[key])) {\r\n        return key;\r\n      }\r\n    }\r\n\r\n    var ch = stream.next();\r\n\r\n    // single-quote string\r\n    if (ch === \"'\") {\r\n      return tokenSingleQuoteString(stream, state);\r\n    }\r\n\r\n    if (ch === '$') {\r\n      return tokenVariable(stream, state);\r\n    }\r\n\r\n    // double-quote string\r\n    if (ch === '\"') {\r\n      return tokenDoubleQuoteString(stream, state);\r\n    }\r\n\r\n    if (ch === '<' && stream.eat('#')) {\r\n      state.tokenize = tokenComment;\r\n      return tokenComment(stream, state);\r\n    }\r\n\r\n    if (ch === '#') {\r\n      stream.skipToEnd();\r\n      return 'comment';\r\n    }\r\n\r\n    if (ch === '@') {\r\n      var quoteMatch = stream.eat(/[\"']/);\r\n      if (quoteMatch && stream.eol()) {\r\n        state.tokenize = tokenMultiString;\r\n        state.startQuote = quoteMatch[0];\r\n        return tokenMultiString(stream, state);\r\n      } else if (stream.eol()) {\r\n        return 'error';\r\n      } else if (stream.peek().match(/[({]/)) {\r\n        return 'punctuation';\r\n      } else if (stream.peek().match(varNames)) {\r\n        // splatted variable\r\n        return tokenVariable(stream, state);\r\n      }\r\n    }\r\n    return 'error';\r\n  }\r\n\r\n  function tokenSingleQuoteString(stream, state) {\r\n    var ch;\r\n    while ((ch = stream.peek()) != null) {\r\n      stream.next();\r\n\r\n      if (ch === \"'\" && !stream.eat(\"'\")) {\r\n        state.tokenize = tokenBase;\r\n        return 'string';\r\n      }\r\n    }\r\n\r\n    return 'error';\r\n  }\r\n\r\n  function tokenDoubleQuoteString(stream, state) {\r\n    var ch;\r\n    while ((ch = stream.peek()) != null) {\r\n      if (ch === '$') {\r\n        state.tokenize = tokenStringInterpolation;\r\n        return 'string';\r\n      }\r\n\r\n      stream.next();\r\n      if (ch === '`') {\r\n        stream.next();\r\n        continue;\r\n      }\r\n\r\n      if (ch === '\"' && !stream.eat('\"')) {\r\n        state.tokenize = tokenBase;\r\n        return 'string';\r\n      }\r\n    }\r\n\r\n    return 'error';\r\n  }\r\n\r\n  function tokenStringInterpolation(stream, state) {\r\n    return tokenInterpolation(stream, state, tokenDoubleQuoteString);\r\n  }\r\n\r\n  function tokenMultiStringReturn(stream, state) {\r\n    state.tokenize = tokenMultiString;\r\n    state.startQuote = '\"'\r\n    return tokenMultiString(stream, state);\r\n  }\r\n\r\n  function tokenHereStringInterpolation(stream, state) {\r\n    return tokenInterpolation(stream, state, tokenMultiStringReturn);\r\n  }\r\n\r\n  function tokenInterpolation(stream, state, parentTokenize) {\r\n    if (stream.match('$(')) {\r\n      var savedBracketNesting = state.bracketNesting;\r\n      state.returnStack.push({\r\n        /*jshint loopfunc:true */\r\n        shouldReturnFrom: function(state) {\r\n          return state.bracketNesting === savedBracketNesting;\r\n        },\r\n        tokenize: parentTokenize\r\n      });\r\n      state.tokenize = tokenBase;\r\n      state.bracketNesting += 1;\r\n      return 'punctuation';\r\n    } else {\r\n      stream.next();\r\n      state.returnStack.push({\r\n        shouldReturnFrom: function() { return true; },\r\n        tokenize: parentTokenize\r\n      });\r\n      state.tokenize = tokenVariable;\r\n      return state.tokenize(stream, state);\r\n    }\r\n  }\r\n\r\n  function tokenComment(stream, state) {\r\n    var maybeEnd = false, ch;\r\n    while ((ch = stream.next()) != null) {\r\n      if (maybeEnd && ch == '>') {\r\n          state.tokenize = tokenBase;\r\n          break;\r\n      }\r\n      maybeEnd = (ch === '#');\r\n    }\r\n    return 'comment';\r\n  }\r\n\r\n  function tokenVariable(stream, state) {\r\n    var ch = stream.peek();\r\n    if (stream.eat('{')) {\r\n      state.tokenize = tokenVariableWithBraces;\r\n      return tokenVariableWithBraces(stream, state);\r\n    } else if (ch != undefined && ch.match(varNames)) {\r\n      stream.eatWhile(varNames);\r\n      state.tokenize = tokenBase;\r\n      return 'variable-2';\r\n    } else {\r\n      state.tokenize = tokenBase;\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  function tokenVariableWithBraces(stream, state) {\r\n    var ch;\r\n    while ((ch = stream.next()) != null) {\r\n      if (ch === '}') {\r\n        state.tokenize = tokenBase;\r\n        break;\r\n      }\r\n    }\r\n    return 'variable-2';\r\n  }\r\n\r\n  function tokenMultiString(stream, state) {\r\n    var quote = state.startQuote;\r\n    if (stream.sol() && stream.match(new RegExp(quote + '@'))) {\r\n      state.tokenize = tokenBase;\r\n    }\r\n    else if (quote === '\"') {\r\n      while (!stream.eol()) {\r\n        var ch = stream.peek();\r\n        if (ch === '$') {\r\n          state.tokenize = tokenHereStringInterpolation;\r\n          return 'string';\r\n        }\r\n\r\n        stream.next();\r\n        if (ch === '`') {\r\n          stream.next();\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      stream.skipToEnd();\r\n    }\r\n\r\n    return 'string';\r\n  }\r\n\r\n  var external = {\r\n    startState: function() {\r\n      return {\r\n        returnStack: [],\r\n        bracketNesting: 0,\r\n        tokenize: tokenBase\r\n      };\r\n    },\r\n\r\n    token: function(stream, state) {\r\n      return state.tokenize(stream, state);\r\n    },\r\n\r\n    blockCommentStart: '<#',\r\n    blockCommentEnd: '#>',\r\n    lineComment: '#',\r\n    fold: 'brace'\r\n  };\r\n  return external;\r\n});\r\n\r\nCodeMirror.defineMIME('application/x-powershell', 'powershell');\r\n});\r\n",null]}