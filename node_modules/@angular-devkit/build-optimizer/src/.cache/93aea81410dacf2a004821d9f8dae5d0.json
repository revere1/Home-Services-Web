{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\select\\select.component.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\select\\select.component.js","mtime":1527492758448},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, QueryList, ContentChildren, forwardRef, ElementRef, Renderer, HostBinding, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SelectOptionDirective } from './select-option.directive';\nimport { SelectInputComponent } from './select-input.component';\nimport { KeyboardKeys } from '../../utils/keys';\nvar nextId = 0;\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectComponent; }),\n    multi: true\n};\nvar SelectComponent = /*@__PURE__*/ (function () {\n    function SelectComponent(element, renderer) {\n        this.element = element;\n        this.renderer = renderer;\n        this.id = \"select-\" + ++nextId;\n        this.autofocus = false;\n        this.allowClear = true;\n        this.allowAdditions = false;\n        this.disableDropdown = false;\n        this.closeOnBodyClick = true;\n        this.options = [];\n        this.filterable = true;\n        this.placeholder = '';\n        this.emptyPlaceholder = 'No options available';\n        this.filterEmptyPlaceholder = 'No matches...';\n        this.filterPlaceholder = 'Filter options...';\n        this.tagging = false;\n        this.multiple = false;\n        this.disabled = false;\n        this.change = new EventEmitter();\n        this.keyup = new EventEmitter();\n        this.toggle = new EventEmitter();\n        this.dropdownActive = false;\n        this.focusIndex = -1;\n        this._value = [];\n        this.onTouchedCallback = function () {\n            // placeholder\n        };\n        this.onChangeCallback = function () {\n            // placeholder\n        };\n    }\n    Object.defineProperty(SelectComponent.prototype, \"isSingleSelect\", {\n        get: function () {\n            return !this.multiple && !this.tagging;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectComponent.prototype, \"optionTemplates\", {\n        get: function () {\n            return this._optionTemplates;\n        },\n        set: function (val) {\n            this._optionTemplates = val;\n            if (val) {\n                var arr = val.toArray();\n                if (arr.length)\n                    this.options = arr;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectComponent.prototype, \"hasSelections\", {\n        get: function () {\n            return this.value && this.value.length > 0 && typeof this.value[0] !== 'undefined';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectComponent.prototype, \"hasPlaceholder\", {\n        get: function () {\n            return this.placeholder && this.placeholder.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectComponent.prototype, \"value\", {\n        get: function () { return this._value; },\n        set: function (val) {\n            if (val !== this._value) {\n                this._value = val;\n                this.onChangeCallback(this._value);\n                this.change.emit(this._value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectComponent.prototype, \"dropdownVisible\", {\n        get: function () {\n            if (this.disableDropdown)\n                return false;\n            if (this.tagging && (!this.options || !this.options.length))\n                return false;\n            return this.dropdownActive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectComponent.prototype.ngOnDestroy = function () {\n        this.toggleDropdown(false);\n    };\n    SelectComponent.prototype.onDropdownSelection = function (selection) {\n        var _this = this;\n        if (selection.disabled)\n            return;\n        if (this.value.length === this.maxSelections)\n            return;\n        var idx = this.value.findIndex(function (o) {\n            if (_this.identifier) {\n                return o[_this.identifier] === selection.value[_this.identifier];\n            }\n            return o === selection.value;\n        });\n        if (idx === -1) {\n            this.value = (this.multiple || this.tagging) ? this.value.concat([selection.value]) :\n                [selection.value];\n        }\n        // if tagging, we need to clear current text\n        if (this.tagging) {\n            this.inputComponent.inputElement.nativeElement.value = '';\n        }\n        var shouldClose = this.closeOnSelect ||\n            (this.closeOnSelect === undefined && !this.multiple);\n        if (shouldClose) {\n            this.toggleDropdown(false);\n        }\n    };\n    SelectComponent.prototype.onInputSelection = function (selections) {\n        this.value = selections;\n    };\n    SelectComponent.prototype.onFocus = function () {\n        if (this.disabled)\n            return;\n        this.toggleDropdown(true);\n        this.onTouchedCallback();\n    };\n    SelectComponent.prototype.onClear = function () {\n        this.value = [];\n    };\n    SelectComponent.prototype.onBodyClick = function (event) {\n        if (this.dropdownActive) {\n            var contains = this.element.nativeElement.contains(event.target);\n            if (!contains)\n                this.toggleDropdown(false);\n        }\n    };\n    SelectComponent.prototype.onClose = function () {\n        this.toggleDropdown(false);\n    };\n    SelectComponent.prototype.onToggle = function () {\n        if (this.disabled)\n            return;\n        this.toggleDropdown(!this.dropdownActive);\n        this.onTouchedCallback();\n    };\n    SelectComponent.prototype.toggleDropdown = function (state) {\n        if (this.dropdownActive === state)\n            return;\n        this.dropdownActive = state;\n        if (this.toggleListener)\n            this.toggleListener();\n        this.toggle.emit(this.dropdownActive);\n        if (state && this.closeOnBodyClick) {\n            this.toggleListener = this.renderer.listen(document.body, 'click', this.onBodyClick.bind(this));\n        }\n    };\n    SelectComponent.prototype.onKeyUp = function (_a) {\n        var event = _a.event, value = _a.value;\n        if (event && event.key === KeyboardKeys.ARROW_DOWN) {\n            ++this.focusIndex;\n        }\n        else {\n            this.filterQuery = value;\n        }\n        this.keyup.emit({ event: event, value: value });\n    };\n    SelectComponent.prototype.writeValue = function (val) {\n        if (val !== this._value) {\n            this._value = val;\n        }\n    };\n    SelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    SelectComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    __decorate([\n        HostBinding('id'),\n        Input(),\n        __metadata(\"design:type\", String)\n    ], SelectComponent.prototype, \"id\", void 0);\n    __decorate([\n        HostBinding('attr.name'),\n        Input(),\n        __metadata(\"design:type\", String)\n    ], SelectComponent.prototype, \"name\", void 0);\n    __decorate([\n        HostBinding('class.tagging-selection'),\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SelectComponent.prototype, \"tagging\", void 0);\n    __decorate([\n        HostBinding('class.multi-selection'),\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SelectComponent.prototype, \"multiple\", void 0);\n    __decorate([\n        HostBinding('class.disabled'),\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SelectComponent.prototype, \"disabled\", void 0);\n    return SelectComponent;\n}());\nexport { SelectComponent };\n//# sourceMappingURL=select.component.js.map\n",null]}