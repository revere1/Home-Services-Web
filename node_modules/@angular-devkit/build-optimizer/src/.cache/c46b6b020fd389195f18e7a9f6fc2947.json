{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-shape\\src\\arc.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-shape\\src\\arc.js","mtime":1527492764981},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import {path} from \"d3-path\";\r\nimport constant from \"./constant\";\r\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math\";\r\n\r\nfunction arcInnerRadius(d) {\r\n  return d.innerRadius;\r\n}\r\n\r\nfunction arcOuterRadius(d) {\r\n  return d.outerRadius;\r\n}\r\n\r\nfunction arcStartAngle(d) {\r\n  return d.startAngle;\r\n}\r\n\r\nfunction arcEndAngle(d) {\r\n  return d.endAngle;\r\n}\r\n\r\nfunction arcPadAngle(d) {\r\n  return d && d.padAngle; // Note: optional!\r\n}\r\n\r\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n  var x10 = x1 - x0, y10 = y1 - y0,\r\n      x32 = x3 - x2, y32 = y3 - y2,\r\n      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\r\n  return [x0 + t * x10, y0 + t * y10];\r\n}\r\n\r\n// Compute perpendicular offset line of length rc.\r\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\r\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\r\n  var x01 = x0 - x1,\r\n      y01 = y0 - y1,\r\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\r\n      ox = lo * y01,\r\n      oy = -lo * x01,\r\n      x11 = x0 + ox,\r\n      y11 = y0 + oy,\r\n      x10 = x1 + ox,\r\n      y10 = y1 + oy,\r\n      x00 = (x11 + x10) / 2,\r\n      y00 = (y11 + y10) / 2,\r\n      dx = x10 - x11,\r\n      dy = y10 - y11,\r\n      d2 = dx * dx + dy * dy,\r\n      r = r1 - rc,\r\n      D = x11 * y10 - x10 * y11,\r\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\r\n      cx0 = (D * dy - dx * d) / d2,\r\n      cy0 = (-D * dx - dy * d) / d2,\r\n      cx1 = (D * dy + dx * d) / d2,\r\n      cy1 = (-D * dx + dy * d) / d2,\r\n      dx0 = cx0 - x00,\r\n      dy0 = cy0 - y00,\r\n      dx1 = cx1 - x00,\r\n      dy1 = cy1 - y00;\r\n\r\n  // Pick the closer of the two intersection points.\r\n  // TODO Is there a faster way to determine which intersection to use?\r\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\r\n\r\n  return {\r\n    cx: cx0,\r\n    cy: cy0,\r\n    x01: -ox,\r\n    y01: -oy,\r\n    x11: cx0 * (r1 / r - 1),\r\n    y11: cy0 * (r1 / r - 1)\r\n  };\r\n}\r\n\r\nexport default function() {\r\n  var innerRadius = arcInnerRadius,\r\n      outerRadius = arcOuterRadius,\r\n      cornerRadius = constant(0),\r\n      padRadius = null,\r\n      startAngle = arcStartAngle,\r\n      endAngle = arcEndAngle,\r\n      padAngle = arcPadAngle,\r\n      context = null;\r\n\r\n  function arc() {\r\n    var buffer,\r\n        r,\r\n        r0 = +innerRadius.apply(this, arguments),\r\n        r1 = +outerRadius.apply(this, arguments),\r\n        a0 = startAngle.apply(this, arguments) - halfPi,\r\n        a1 = endAngle.apply(this, arguments) - halfPi,\r\n        da = abs(a1 - a0),\r\n        cw = a1 > a0;\r\n\r\n    if (!context) context = buffer = path();\r\n\r\n    // Ensure that the outer radius is always larger than the inner radius.\r\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\r\n\r\n    // Is it a point?\r\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\r\n\r\n    // Or is it a circle or annulus?\r\n    else if (da > tau - epsilon) {\r\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\r\n      context.arc(0, 0, r1, a0, a1, !cw);\r\n      if (r0 > epsilon) {\r\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\r\n        context.arc(0, 0, r0, a1, a0, cw);\r\n      }\r\n    }\r\n\r\n    // Or is it a circular or annular sector?\r\n    else {\r\n      var a01 = a0,\r\n          a11 = a1,\r\n          a00 = a0,\r\n          a10 = a1,\r\n          da0 = da,\r\n          da1 = da,\r\n          ap = padAngle.apply(this, arguments) / 2,\r\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\r\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\r\n          rc0 = rc,\r\n          rc1 = rc,\r\n          t0,\r\n          t1;\r\n\r\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\r\n      if (rp > epsilon) {\r\n        var p0 = asin(rp / r0 * sin(ap)),\r\n            p1 = asin(rp / r1 * sin(ap));\r\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\r\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\r\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\r\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\r\n      }\r\n\r\n      var x01 = r1 * cos(a01),\r\n          y01 = r1 * sin(a01),\r\n          x10 = r0 * cos(a10),\r\n          y10 = r0 * sin(a10);\r\n\r\n      // Apply rounded corners?\r\n      if (rc > epsilon) {\r\n        var x11 = r1 * cos(a11),\r\n            y11 = r1 * sin(a11),\r\n            x00 = r0 * cos(a00),\r\n            y00 = r0 * sin(a00);\r\n\r\n        // Restrict the corner radius according to the sector angle.\r\n        if (da < pi) {\r\n          var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\r\n              ax = x01 - oc[0],\r\n              ay = y01 - oc[1],\r\n              bx = x11 - oc[0],\r\n              by = y11 - oc[1],\r\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\r\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\r\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\r\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\r\n        }\r\n      }\r\n\r\n      // Is the sector collapsed to a line?\r\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\r\n\r\n      // Does the sector’s outer ring have rounded corners?\r\n      else if (rc1 > epsilon) {\r\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\r\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\r\n\r\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\r\n\r\n        // Have the corners merged?\r\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\r\n\r\n        // Otherwise, draw the two corners and the ring.\r\n        else {\r\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\r\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\r\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\r\n        }\r\n      }\r\n\r\n      // Or is the outer ring just a circular arc?\r\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\r\n\r\n      // Is there no inner ring, and it’s a circular sector?\r\n      // Or perhaps it’s an annular sector collapsed due to padding?\r\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\r\n\r\n      // Does the sector’s inner ring (or point) have rounded corners?\r\n      else if (rc0 > epsilon) {\r\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\r\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\r\n\r\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\r\n\r\n        // Have the corners merged?\r\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\r\n\r\n        // Otherwise, draw the two corners and the ring.\r\n        else {\r\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\r\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\r\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\r\n        }\r\n      }\r\n\r\n      // Or is the inner ring just a circular arc?\r\n      else context.arc(0, 0, r0, a10, a00, cw);\r\n    }\r\n\r\n    context.closePath();\r\n\r\n    if (buffer) return context = null, buffer + \"\" || null;\r\n  }\r\n\r\n  arc.centroid = function() {\r\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\r\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\r\n    return [cos(a) * r, sin(a) * r];\r\n  };\r\n\r\n  arc.innerRadius = function(_) {\r\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\r\n  };\r\n\r\n  arc.outerRadius = function(_) {\r\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\r\n  };\r\n\r\n  arc.cornerRadius = function(_) {\r\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\r\n  };\r\n\r\n  arc.padRadius = function(_) {\r\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\r\n  };\r\n\r\n  arc.startAngle = function(_) {\r\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\r\n  };\r\n\r\n  arc.endAngle = function(_) {\r\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\r\n  };\r\n\r\n  arc.padAngle = function(_) {\r\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\r\n  };\r\n\r\n  arc.context = function(_) {\r\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\r\n  };\r\n\r\n  return arc;\r\n}\r\n",null]}