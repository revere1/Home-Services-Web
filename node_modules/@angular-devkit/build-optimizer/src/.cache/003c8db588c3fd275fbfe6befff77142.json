{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-shape\\src\\area.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-shape\\src\\area.js","mtime":1527492764982},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import {path} from \"d3-path\";\r\nimport constant from \"./constant\";\r\nimport curveLinear from \"./curve/linear\";\r\nimport line from \"./line\";\r\nimport {x as pointX, y as pointY} from \"./point\";\r\n\r\nexport default function() {\r\n  var x0 = pointX,\r\n      x1 = null,\r\n      y0 = constant(0),\r\n      y1 = pointY,\r\n      defined = constant(true),\r\n      context = null,\r\n      curve = curveLinear,\r\n      output = null;\r\n\r\n  function area(data) {\r\n    var i,\r\n        j,\r\n        k,\r\n        n = data.length,\r\n        d,\r\n        defined0 = false,\r\n        buffer,\r\n        x0z = new Array(n),\r\n        y0z = new Array(n);\r\n\r\n    if (context == null) output = curve(buffer = path());\r\n\r\n    for (i = 0; i <= n; ++i) {\r\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\r\n        if (defined0 = !defined0) {\r\n          j = i;\r\n          output.areaStart();\r\n          output.lineStart();\r\n        } else {\r\n          output.lineEnd();\r\n          output.lineStart();\r\n          for (k = i - 1; k >= j; --k) {\r\n            output.point(x0z[k], y0z[k]);\r\n          }\r\n          output.lineEnd();\r\n          output.areaEnd();\r\n        }\r\n      }\r\n      if (defined0) {\r\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\r\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\r\n      }\r\n    }\r\n\r\n    if (buffer) return output = null, buffer + \"\" || null;\r\n  }\r\n\r\n  function arealine() {\r\n    return line().defined(defined).curve(curve).context(context);\r\n  }\r\n\r\n  area.x = function(_) {\r\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\r\n  };\r\n\r\n  area.x0 = function(_) {\r\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\r\n  };\r\n\r\n  area.x1 = function(_) {\r\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\r\n  };\r\n\r\n  area.y = function(_) {\r\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\r\n  };\r\n\r\n  area.y0 = function(_) {\r\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\r\n  };\r\n\r\n  area.y1 = function(_) {\r\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\r\n  };\r\n\r\n  area.lineX0 =\r\n  area.lineY0 = function() {\r\n    return arealine().x(x0).y(y0);\r\n  };\r\n\r\n  area.lineY1 = function() {\r\n    return arealine().x(x0).y(y1);\r\n  };\r\n\r\n  area.lineX1 = function() {\r\n    return arealine().x(x1).y(y0);\r\n  };\r\n\r\n  area.defined = function(_) {\r\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\r\n  };\r\n\r\n  area.curve = function(_) {\r\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\r\n  };\r\n\r\n  area.context = function(_) {\r\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\r\n  };\r\n\r\n  return area;\r\n}\r\n",null]}