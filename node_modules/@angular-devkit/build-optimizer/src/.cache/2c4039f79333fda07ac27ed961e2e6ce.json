{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\fold\\foldgutter.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\fold\\foldgutter.js","mtime":1527492762938},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod(require(\"../../lib/codemirror\"), require(\"./foldcode\"));\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n  \"use strict\";\r\n\r\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\r\n    if (old && old != CodeMirror.Init) {\r\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\r\n      cm.state.foldGutter = null;\r\n      cm.off(\"gutterClick\", onGutterClick);\r\n      cm.off(\"change\", onChange);\r\n      cm.off(\"viewportChange\", onViewportChange);\r\n      cm.off(\"fold\", onFold);\r\n      cm.off(\"unfold\", onFold);\r\n      cm.off(\"swapDoc\", onChange);\r\n    }\r\n    if (val) {\r\n      cm.state.foldGutter = new State(parseOptions(val));\r\n      updateInViewport(cm);\r\n      cm.on(\"gutterClick\", onGutterClick);\r\n      cm.on(\"change\", onChange);\r\n      cm.on(\"viewportChange\", onViewportChange);\r\n      cm.on(\"fold\", onFold);\r\n      cm.on(\"unfold\", onFold);\r\n      cm.on(\"swapDoc\", onChange);\r\n    }\r\n  });\r\n\r\n  var Pos = CodeMirror.Pos;\r\n\r\n  function State(options) {\r\n    this.options = options;\r\n    this.from = this.to = 0;\r\n  }\r\n\r\n  function parseOptions(opts) {\r\n    if (opts === true) opts = {};\r\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\r\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\r\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\r\n    return opts;\r\n  }\r\n\r\n  function isFolded(cm, line) {\r\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\r\n    for (var i = 0; i < marks.length; ++i)\r\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\r\n  }\r\n\r\n  function marker(spec) {\r\n    if (typeof spec == \"string\") {\r\n      var elt = document.createElement(\"div\");\r\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\r\n      return elt;\r\n    } else {\r\n      return spec.cloneNode(true);\r\n    }\r\n  }\r\n\r\n  function updateFoldInfo(cm, from, to) {\r\n    var opts = cm.state.foldGutter.options, cur = from;\r\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\r\n    var func = cm.foldOption(opts, \"rangeFinder\");\r\n    cm.eachLine(from, to, function(line) {\r\n      var mark = null;\r\n      if (isFolded(cm, cur)) {\r\n        mark = marker(opts.indicatorFolded);\r\n      } else {\r\n        var pos = Pos(cur, 0);\r\n        var range = func && func(cm, pos);\r\n        if (range && range.to.line - range.from.line >= minSize)\r\n          mark = marker(opts.indicatorOpen);\r\n      }\r\n      cm.setGutterMarker(line, opts.gutter, mark);\r\n      ++cur;\r\n    });\r\n  }\r\n\r\n  function updateInViewport(cm) {\r\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\r\n    if (!state) return;\r\n    cm.operation(function() {\r\n      updateFoldInfo(cm, vp.from, vp.to);\r\n    });\r\n    state.from = vp.from; state.to = vp.to;\r\n  }\r\n\r\n  function onGutterClick(cm, line, gutter) {\r\n    var state = cm.state.foldGutter;\r\n    if (!state) return;\r\n    var opts = state.options;\r\n    if (gutter != opts.gutter) return;\r\n    var folded = isFolded(cm, line);\r\n    if (folded) folded.clear();\r\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\r\n  }\r\n\r\n  function onChange(cm) {\r\n    var state = cm.state.foldGutter;\r\n    if (!state) return;\r\n    var opts = state.options;\r\n    state.from = state.to = 0;\r\n    clearTimeout(state.changeUpdate);\r\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\r\n  }\r\n\r\n  function onViewportChange(cm) {\r\n    var state = cm.state.foldGutter;\r\n    if (!state) return;\r\n    var opts = state.options;\r\n    clearTimeout(state.changeUpdate);\r\n    state.changeUpdate = setTimeout(function() {\r\n      var vp = cm.getViewport();\r\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\r\n        updateInViewport(cm);\r\n      } else {\r\n        cm.operation(function() {\r\n          if (vp.from < state.from) {\r\n            updateFoldInfo(cm, vp.from, state.from);\r\n            state.from = vp.from;\r\n          }\r\n          if (vp.to > state.to) {\r\n            updateFoldInfo(cm, state.to, vp.to);\r\n            state.to = vp.to;\r\n          }\r\n        });\r\n      }\r\n    }, opts.updateViewportTimeSpan || 400);\r\n  }\r\n\r\n  function onFold(cm, from) {\r\n    var state = cm.state.foldGutter;\r\n    if (!state) return;\r\n    var line = from.line;\r\n    if (line >= state.from && line < state.to)\r\n      updateFoldInfo(cm, line, line + 1);\r\n  }\r\n});\r\n",null]}