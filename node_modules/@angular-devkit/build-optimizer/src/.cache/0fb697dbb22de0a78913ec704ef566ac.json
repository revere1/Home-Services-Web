{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@ngx-share\\core\\esm5\\ngx-share-core.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@ngx-share\\core\\esm5\\ngx-share-core.js","mtime":1527490342507},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __spread, __read } from 'tslib';\nimport { InjectionToken, Inject, Injectable, Directive, Input, Output, HostListener, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, PLATFORM_ID, Pipe, NgModule } from '@angular/core';\nimport { map } from 'rxjs/operators/map';\nimport { delay } from 'rxjs/operators/delay';\nimport { faFacebookF, faTwitter, faLinkedinIn, faGooglePlusG, faPinterestP, faRedditAlien, faTumblr, faWhatsapp, faFacebookMessenger, faTelegramPlane, faVk, faStumbleupon, faXing } from '@fortawesome/free-brands-svg-icons';\nimport { faCommentAlt, faEnvelope, faCheck, faPrint, faExclamation, faLink } from '@fortawesome/free-solid-svg-icons';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { isPlatformBrowser } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators/catchError';\nimport { take } from 'rxjs/operators/take';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { tap } from 'rxjs/operators/tap';\nimport { filter } from 'rxjs/operators/filter';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nvar CONFIG = new InjectionToken('CONFIG');\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\nfunction mergeDeep(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    if (!sources.length) {\n        return target;\n    }\n    var source = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for (var key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, (_a = {}, _a[key] = {}, _a));\n                }\n                mergeDeep(target[key], source[key]);\n            }\n            else {\n                Object.assign(target, (_b = {}, _b[key] = source[key], _b));\n            }\n        }\n    }\n    return mergeDeep.apply(void 0, __spread([target], sources));\n    var _a, _b;\n}\nfunction shareCountFormatter(num, digits) {\n    var si = [\n        { value: 1E9, symbol: 'B' },\n        { value: 1E6, symbol: 'M' },\n        { value: 1E3, symbol: 'K' }\n    ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    for (var i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n            return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n        }\n    }\n    return num.toFixed(digits).replace(rx, '$1');\n}\nfunction copyToClipboard(text, ios) {\n    return new Promise(function (resolve) {\n        var textArea = document.createElement('textarea');\n        textArea.value = text;\n        document.body.appendChild(textArea);\n        if (ios) {\n            var range = document.createRange();\n            range.selectNodeContents(textArea);\n            var selection = window.getSelection();\n            selection.removeAllRanges();\n            selection.addRange(range);\n            textArea.readOnly = true;\n            textArea.setSelectionRange(0, 999999);\n        }\n        else {\n            textArea.select();\n        }\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        resolve();\n    });\n}\nfunction getMetaContent(key) {\n    var metaTag = document.querySelector(\"meta[property=\\\"\" + key + \"\\\"]\");\n    return metaTag ? metaTag.getAttribute('content') : undefined;\n}\nfunction getOS() {\n    var userAgent = navigator.userAgent || navigator.vendor || ((window)).opera;\n    if (/android/i.test(userAgent)) {\n        return 'android';\n    }\n    if (/iPad|iPhone|iPod/.test(userAgent) && !((window)).MSStream) {\n        return 'ios';\n    }\n    return 'desktop';\n}\nfunction getValidUrl(url, fallbackUrl) {\n    if (url) {\n        var r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n        if (r.test(url)) {\n            return url;\n        }\n        console.warn(\"[ShareButtons]: Sharing link '\" + url + \"' is invalid!\");\n    }\n    return fallbackUrl;\n}\nvar metaTagsOperators = [\n    map(function (ref) {\n        var SharerURL = ref.prop.share[ref.os];\n        if (SharerURL) {\n            var metaTags = ref.prop.share.metaTags;\n            var metaTagsValues_1 = ref.metaTags;\n            var link = '';\n            if (metaTags) {\n                link = Object.entries(metaTags).map(function (_a) {\n                    var _b = __read(_a, 2), key = _b[0], metaTag = _b[1];\n                    return metaTagsValues_1[key] ? metaTag + \"=\" + encodeURIComponent(metaTagsValues_1[key]) : '';\n                }).join('&');\n            }\n            return SharerURL + link;\n        }\n        return;\n    })\n];\nvar printOperators = [\n    map(function () { return window.print(); })\n];\nvar copyOperators = [\n    map(function (ref) {\n        ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\n        ref.temp = { text: ref.prop.text, icon: ref.prop.icon };\n        var link = decodeURIComponent(ref.metaTags.url);\n        copyToClipboard(link, ref.os === 'ios')\n            .then(function () {\n            ref.prop.text = ref.prop.successText;\n            ref.prop.icon = ref.prop.successIcon;\n        })\n            .catch(function () {\n            ref.prop.text = ref.prop.failText;\n            ref.prop.icon = ref.prop.failIcon;\n        })\n            .then(function () { return ref.cd.markForCheck(); });\n        return ref;\n    }),\n    delay(2000),\n    map(function (ref) {\n        ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');\n        ref.prop.text = ref.temp.text;\n        ref.prop.icon = ref.temp.icon;\n        ref.cd.markForCheck();\n    })\n];\nvar urlInMessageOperators = [\n    map(function (ref) {\n        var description = ref.metaTags.description;\n        var url = ref.metaTags.url;\n        var newRef = {\n            metaTags: {\n                description: description ? description + \"\\r\\n\" + url : url\n            }\n        };\n        return mergeDeep(ref, newRef);\n    })\n];\nvar FacebookCountOperators = [\n    map(function (res) { return +res.share.share_count; })\n];\nvar PinterestCountOperators = [\n    map(function (text) { return JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1')); }),\n    map(function (res) { return +res.count; })\n];\nvar TumblrCountOperators = [\n    map(function (res) { return +res.response.note_count; })\n];\nvar RedditCountOperators = [\n    map(function (res) { return +res.data.children[0].data.score; })\n];\nvar shareButtonsProp = {\n    facebook: {\n        type: 'facebook',\n        text: 'Facebook',\n        icon: faFacebookF,\n        color: '#4267B2',\n        share: {\n            desktop: 'https://www.facebook.com/sharer/sharer.php?',\n            android: 'https://www.facebook.com/sharer/sharer.php?',\n            ios: 'https://www.facebook.com/sharer/sharer.php?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'u'\n            }\n        },\n        count: {\n            request: 'http',\n            url: 'https://graph.facebook.com?id=',\n            operators: FacebookCountOperators\n        }\n    },\n    twitter: {\n        type: 'twitter',\n        text: 'Twitter',\n        icon: faTwitter,\n        color: '#00acee',\n        share: {\n            desktop: 'https://twitter.com/intent/tweet?',\n            android: 'https://twitter.com/intent/tweet?',\n            ios: 'https://twitter.com/intent/tweet?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                description: 'text',\n                tags: 'hashtags',\n                via: 'via'\n            }\n        }\n    },\n    google: {\n        type: 'google',\n        text: 'Google+',\n        icon: faGooglePlusG,\n        color: '#DB4437',\n        share: {\n            desktop: 'https://plus.google.com/share?',\n            android: 'https://plus.google.com/share?',\n            ios: 'https://plus.google.com/share?',\n            metaTags: {\n                url: 'url',\n            },\n            operators: metaTagsOperators\n        }\n    },\n    linkedin: {\n        type: 'linkedin',\n        text: 'LinkedIn',\n        icon: faLinkedinIn,\n        color: '#006fa6',\n        share: {\n            desktop: 'http://www.linkedin.com/shareArticle?',\n            android: 'http://www.linkedin.com/shareArticle?',\n            ios: 'http://www.linkedin.com/shareArticle?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                title: 'title',\n                description: 'summary'\n            },\n        }\n    },\n    pinterest: {\n        type: 'pinterest',\n        text: 'Pinterest',\n        icon: faPinterestP,\n        color: '#BD091D',\n        share: {\n            desktop: 'https://in.pinterest.com/pin/create/button/?',\n            android: 'https://in.pinterest.com/pin/create/button/?',\n            ios: 'https://in.pinterest.com/pin/create/button/?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                description: 'description',\n                image: 'media'\n            }\n        },\n        count: {\n            request: 'http',\n            url: 'https://api.pinterest.com/v1/urls/count.json?url=',\n            args: { responseType: 'text' },\n            operators: PinterestCountOperators\n        }\n    },\n    reddit: {\n        type: 'reddit',\n        text: 'Reddit',\n        icon: faRedditAlien,\n        color: '#FF4006',\n        share: {\n            desktop: 'http://www.reddit.com/submit?',\n            android: 'http://www.reddit.com/submit?',\n            ios: 'http://www.reddit.com/submit?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                title: 'title'\n            },\n        },\n        count: {\n            request: 'http',\n            url: 'https://buttons.reddit.com/button_info.json?url=',\n            operators: RedditCountOperators\n        },\n    },\n    tumblr: {\n        type: 'tumblr',\n        text: 'Tumblr',\n        icon: faTumblr,\n        color: '#36465D',\n        share: {\n            desktop: 'http://tumblr.com/widgets/share/tool?',\n            android: 'http://tumblr.com/widgets/share/tool?',\n            ios: 'http://tumblr.com/widgets/share/tool?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'canonicalUrl',\n                description: 'caption',\n                tags: 'tags'\n            }\n        },\n        count: {\n            request: 'jsonp',\n            url: 'https://api.tumblr.com/v2/share/stats?url=',\n            operators: TumblrCountOperators\n        }\n    },\n    whatsapp: {\n        type: 'whatsapp',\n        text: 'WhatsApp',\n        icon: faWhatsapp,\n        color: '#25D366',\n        share: {\n            desktop: 'https://web.whatsapp.com/send?',\n            android: 'whatsapp://send?',\n            ios: 'whatsapp://send?',\n            operators: __spread(urlInMessageOperators, metaTagsOperators),\n            metaTags: {\n                description: 'text'\n            }\n        }\n    },\n    messenger: {\n        type: 'messenger',\n        text: 'Messenger',\n        icon: faFacebookMessenger,\n        color: '#0080FF',\n        share: {\n            android: 'fb-messenger://share/?',\n            ios: 'fb-messenger://share/?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'link'\n            }\n        }\n    },\n    telegram: {\n        type: 'telegram',\n        text: 'Telegram',\n        icon: faTelegramPlane,\n        color: '#0088cc',\n        share: {\n            desktop: 'https://t.me/share/url?',\n            android: 'https://t.me/share/url?',\n            ios: 'https://t.me/share/url?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url',\n                description: 'text'\n            }\n        }\n    },\n    vk: {\n        type: 'vk',\n        text: 'VKontakte',\n        icon: faVk,\n        color: '#4C75A3',\n        share: {\n            desktop: 'http://vk.com/share.php?',\n            android: 'http://vk.com/share.php?',\n            ios: 'http://vk.com/share.php?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url'\n            }\n        }\n    },\n    stumble: {\n        type: 'stumble',\n        text: 'Stumble',\n        icon: faStumbleupon,\n        color: '#eb4924',\n        share: {\n            desktop: 'http://www.stumbleupon.com/submit?',\n            android: 'http://www.stumbleupon.com/submit?',\n            ios: 'http://www.stumbleupon.com/submit?',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url'\n            }\n        }\n    },\n    xing: {\n        type: 'xing',\n        text: 'Xing',\n        icon: faXing,\n        color: '#006567',\n        share: {\n            desktop: 'https://www.xing.com/app/user?op=share&',\n            android: 'https://www.xing.com/app/user?op=share&',\n            ios: 'https://www.xing.com/app/user?op=share&',\n            operators: metaTagsOperators,\n            metaTags: {\n                url: 'url'\n            }\n        }\n    },\n    sms: {\n        type: 'sms',\n        text: 'SMS',\n        icon: faCommentAlt,\n        color: '#20c16c',\n        share: {\n            desktop: 'sms:?',\n            android: 'sms:?',\n            ios: 'sms:?',\n            metaTags: {\n                description: 'body'\n            },\n            operators: __spread(urlInMessageOperators, metaTagsOperators)\n        }\n    },\n    email: {\n        type: 'email',\n        text: 'Email',\n        icon: faEnvelope,\n        color: '#FF961C',\n        share: {\n            desktop: 'mailto:?',\n            android: 'mailto:?',\n            ios: 'mailto:?',\n            operators: __spread(urlInMessageOperators, metaTagsOperators),\n            metaTags: {\n                title: 'subject',\n                description: 'body'\n            }\n        }\n    },\n    copy: {\n        type: 'copy',\n        text: 'Copy link',\n        successText: 'Copied',\n        successIcon: faCheck,\n        failText: 'Error',\n        failIcon: faExclamation,\n        icon: faLink,\n        color: '#607D8B',\n        share: {\n            operators: copyOperators\n        }\n    },\n    print: {\n        type: 'print',\n        text: 'Print',\n        icon: faPrint,\n        color: '#765AA2',\n        share: {\n            operators: printOperators\n        }\n    }\n};\nvar ShareButtons = /*@__PURE__*/ (function () {\n    function ShareButtons(config) {\n        this.config = {\n            prop: shareButtonsProp,\n            options: {\n                theme: 'default',\n                include: [],\n                exclude: [],\n                size: 0,\n                url: undefined,\n                title: undefined,\n                description: undefined,\n                image: undefined,\n                tags: undefined,\n                twitterAccount: undefined,\n                autoSetMeta: true,\n                gaTracking: false,\n                windowWidth: 800,\n                windowHeight: 500\n            }\n        };\n        this.config$ = new BehaviorSubject(this.config);\n        if (config) {\n            this.setConfig(config);\n        }\n    }\n    Object.defineProperty(ShareButtons.prototype, \"prop\", {\n        get: function () {\n            return this.config.prop;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"twitterAccount\", {\n        get: function () {\n            return this.config.options.twitterAccount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"theme\", {\n        get: function () {\n            return this.config.options.theme;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"windowSize\", {\n        get: function () {\n            return \"width=\" + this.config.options.windowWidth + \", height=\" + this.config.options.windowHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"url\", {\n        get: function () {\n            return this.config.options.url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"title\", {\n        get: function () {\n            return this.config.options.title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"description\", {\n        get: function () {\n            return this.config.options.description;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"image\", {\n        get: function () {\n            return this.config.options.image;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"tags\", {\n        get: function () {\n            return this.config.options.tags;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"autoSetMeta\", {\n        get: function () {\n            return this.config.options.autoSetMeta;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"gaTracking\", {\n        get: function () {\n            return this.config.options.gaTracking;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtons.prototype, \"size\", {\n        get: function () {\n            return this.config.options.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ShareButtons.prototype.setConfig = function (config) {\n        this.config = mergeDeep(this.config, config);\n        this.config$.next(this.config);\n    };\n    ShareButtons.prototype.addButton = function (name, data) {\n        var config = {\n            prop: Object.assign({}, shareButtonsProp, (_a = {}, _a[name] = data, _a))\n        };\n        this.setConfig(config);\n        var _a;\n    };\n    return ShareButtons;\n}());\nvar ShareButtonDirective = /*@__PURE__*/ (function () {\n    function ShareButtonDirective(shareService, http, renderer, cd, el, platform) {\n        this.shareService = shareService;\n        this.http = http;\n        this.renderer = renderer;\n        this.cd = cd;\n        this.el = el;\n        this.platform = platform;\n        this.getCount = false;\n        this.autoSetMeta = this.shareService.autoSetMeta;\n        this.url = this.shareService.url;\n        this.title = this.shareService.title;\n        this.description = this.shareService.description;\n        this.image = this.shareService.image;\n        this.tags = this.shareService.tags;\n        this.count = new EventEmitter();\n        this.opened = new EventEmitter();\n        this.closed = new EventEmitter();\n    }\n    ShareButtonDirective.prototype.onClick = function () {\n        var _this = this;\n        if (isPlatformBrowser(this.platform)) {\n            var metaTags = this.autoSetMeta ? {\n                url: this.url,\n                title: this.title || getMetaContent('og:title'),\n                description: this.description || getMetaContent('og:description'),\n                image: this.image || getMetaContent('og:image'),\n                via: this.shareService.twitterAccount || getMetaContent('twitter:site'),\n                tags: this.tags,\n            } : {\n                url: this.url,\n                title: this.title,\n                description: this.description,\n                image: this.image,\n                tags: this.tags,\n                via: this.shareService.twitterAccount,\n            };\n            var ref = {\n                cd: this.cd,\n                renderer: this.renderer,\n                prop: this.prop,\n                el: this.el.nativeElement,\n                os: getOS(),\n                metaTags: metaTags\n            };\n            (_a = of(ref)).pipe.apply(_a, __spread(this.prop.share.operators, [tap(function (sharerURL) { return _this.share(sharerURL); }), take(1)])).subscribe();\n        }\n        var _a;\n    };\n    ShareButtonDirective.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (isPlatformBrowser(this.platform)) {\n            if (changes['shareButton'] && (changes['shareButton'].firstChange || changes['shareButton'].previousValue !== this.shareButton)) {\n                this.createShareButton(this.shareButton);\n            }\n            if (!this.url || (changes['url'] && changes['url'].previousValue !== this.url)) {\n                of(null).pipe(map(function () {\n                    _this.url = getValidUrl(_this.autoSetMeta ? _this.url || getMetaContent('og:url') : _this.url, window.location.href);\n                    return _this.url;\n                }), filter(function () { return _this.prop.count && _this.getCount; }), switchMap(function (url) { return _this.shareCount(url); }), tap(function (shareCount) { return _this.count.emit(shareCount); }), take(1)).subscribe();\n            }\n        }\n    };\n    ShareButtonDirective.prototype.share = function (url) {\n        var _this = this;\n        if (url) {\n            if (this.shareService.gaTracking && typeof ga !== 'undefined') {\n                ga('send', 'social', this.prop.type, 'click', this.url);\n            }\n            this.opened.emit(this.prop.type);\n            var popUp_1 = window.open(url, 'newwindow', this.shareService.windowSize);\n            if (popUp_1) {\n                var pollTimer_1 = window.setInterval(function () {\n                    if (popUp_1.closed) {\n                        window.clearInterval(pollTimer_1);\n                        _this.closed.emit(_this.prop.type);\n                    }\n                }, 200);\n            }\n        }\n    };\n    ShareButtonDirective.prototype.shareCount = function (url) {\n        if (this.prop.count.request === 'jsonp') {\n            return (_a = this.http.jsonp(this.prop.count.url + url, 'callback')).pipe.apply(_a, __spread(this.prop.count.operators, [catchError(function () { return empty(); })]));\n        }\n        else {\n            return (_b = this.http.get(this.prop.count.url + url, this.prop.count.args)).pipe.apply(_b, __spread(this.prop.count.operators, [catchError(function () { return empty(); })]));\n        }\n        var _a, _b;\n    };\n    ShareButtonDirective.prototype.createShareButton = function (buttonsName) {\n        var button = Object.assign({}, this.shareService.prop[buttonsName]);\n        if (button) {\n            this.prop = button;\n            this.renderer.removeClass(this.el.nativeElement, \"sb-\" + this.buttonClass);\n            this.renderer.addClass(this.el.nativeElement, \"sb-\" + button.type);\n            this.el.nativeElement.style.setProperty('--button-color', this.prop.color);\n            this.buttonClass = button.type;\n        }\n        else {\n            throw new Error(\"[ShareButtons]: The share button '\" + buttonsName + \"' does not exist!\");\n        }\n    };\n    return ShareButtonDirective;\n}());\nvar ShareCountPipe = /*@__PURE__*/ (function () {\n    function ShareCountPipe() {\n    }\n    ShareCountPipe.prototype.transform = function (num, digits) {\n        return shareCountFormatter(num, digits);\n    };\n    return ShareCountPipe;\n}());\nfunction ShareButtonsFactory(config) {\n    return new ShareButtons(config);\n}\nvar ShareModule = /*@__PURE__*/ (function () {\n    function ShareModule() {\n    }\n    ShareModule.forRoot = function (config) {\n        return {\n            ngModule: ShareModule,\n            providers: [\n                { provide: CONFIG, useValue: config },\n                {\n                    provide: ShareButtons,\n                    useFactory: ShareButtonsFactory,\n                    deps: [CONFIG]\n                }\n            ]\n        };\n    };\n    return ShareModule;\n}());\nexport { ShareButtonsFactory, ShareModule, CONFIG, ShareButtons, ShareButtonDirective, ShareCountPipe, shareButtonsProp, metaTagsOperators, printOperators, copyOperators, urlInMessageOperators, FacebookCountOperators, PinterestCountOperators, TumblrCountOperators, RedditCountOperators };\n//# sourceMappingURL=ngx-share-core.js.map\n",null]}