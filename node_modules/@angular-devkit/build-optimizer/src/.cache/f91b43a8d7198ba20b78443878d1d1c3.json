{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\codemirror\\mode\\yaml\\yaml.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\codemirror\\mode\\yaml\\yaml.js","mtime":1527492763120},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod(require(\"../../lib/codemirror\"));\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"../../lib/codemirror\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n\"use strict\";\r\n\r\nCodeMirror.defineMode(\"yaml\", function() {\r\n\r\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\r\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\r\n\r\n  return {\r\n    token: function(stream, state) {\r\n      var ch = stream.peek();\r\n      var esc = state.escaped;\r\n      state.escaped = false;\r\n      /* comments */\r\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\r\n        stream.skipToEnd();\r\n        return \"comment\";\r\n      }\r\n\r\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\r\n        return \"string\";\r\n\r\n      if (state.literal && stream.indentation() > state.keyCol) {\r\n        stream.skipToEnd(); return \"string\";\r\n      } else if (state.literal) { state.literal = false; }\r\n      if (stream.sol()) {\r\n        state.keyCol = 0;\r\n        state.pair = false;\r\n        state.pairStart = false;\r\n        /* document start */\r\n        if(stream.match(/---/)) { return \"def\"; }\r\n        /* document end */\r\n        if (stream.match(/\\.\\.\\./)) { return \"def\"; }\r\n        /* array list item */\r\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\r\n      }\r\n      /* inline pairs/lists */\r\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\r\n        if (ch == '{')\r\n          state.inlinePairs++;\r\n        else if (ch == '}')\r\n          state.inlinePairs--;\r\n        else if (ch == '[')\r\n          state.inlineList++;\r\n        else\r\n          state.inlineList--;\r\n        return 'meta';\r\n      }\r\n\r\n      /* list seperator */\r\n      if (state.inlineList > 0 && !esc && ch == ',') {\r\n        stream.next();\r\n        return 'meta';\r\n      }\r\n      /* pairs seperator */\r\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\r\n        state.keyCol = 0;\r\n        state.pair = false;\r\n        state.pairStart = false;\r\n        stream.next();\r\n        return 'meta';\r\n      }\r\n\r\n      /* start of value of a pair */\r\n      if (state.pairStart) {\r\n        /* block literals */\r\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\r\n        /* references */\r\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\r\n        /* numbers */\r\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\r\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\r\n        /* keywords */\r\n        if (stream.match(keywordRegex)) { return 'keyword'; }\r\n      }\r\n\r\n      /* pairs (associative arrays) -> key */\r\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\r\n        state.pair = true;\r\n        state.keyCol = stream.indentation();\r\n        return \"atom\";\r\n      }\r\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\r\n\r\n      /* nothing found, continue */\r\n      state.pairStart = false;\r\n      state.escaped = (ch == '\\\\');\r\n      stream.next();\r\n      return null;\r\n    },\r\n    startState: function() {\r\n      return {\r\n        pair: false,\r\n        pairStart: false,\r\n        keyCol: 0,\r\n        inlinePairs: 0,\r\n        inlineList: 0,\r\n        literal: false,\r\n        escaped: false\r\n      };\r\n    },\r\n    lineComment: \"#\"\r\n  };\r\n});\r\n\r\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\r\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\r\n\r\n});\r\n",null]}