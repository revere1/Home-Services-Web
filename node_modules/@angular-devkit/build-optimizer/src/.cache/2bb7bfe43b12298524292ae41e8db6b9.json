{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\file-saver\\FileSaver.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\file-saver\\FileSaver.js","mtime":1527492769037},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["/* FileSaver.js\r\n * A saveAs() FileSaver implementation.\r\n * 1.3.2\r\n * 2016-06-16 18:25:19\r\n *\r\n * By Eli Grey, http://eligrey.com\r\n * License: MIT\r\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\r\n */\r\n\r\n/*global self */\r\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\r\n\r\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\r\n\r\nvar saveAs = saveAs || (function(view) {\r\n\t\"use strict\";\r\n\t// IE <10 is explicitly unsupported\r\n\tif (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\r\n\t\treturn;\r\n\t}\r\n\tvar\r\n\t\t  doc = view.document\r\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet\r\n\t\t, get_URL = function() {\r\n\t\t\treturn view.URL || view.webkitURL || view;\r\n\t\t}\r\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\r\n\t\t, can_use_save_link = \"download\" in save_link\r\n\t\t, click = function(node) {\r\n\t\t\tvar event = new MouseEvent(\"click\");\r\n\t\t\tnode.dispatchEvent(event);\r\n\t\t}\r\n\t\t, is_safari = /constructor/i.test(view.HTMLElement) || view.safari\r\n\t\t, is_chrome_ios =/CriOS\\/[\\d]+/.test(navigator.userAgent)\r\n\t\t, throw_outside = function(ex) {\r\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\r\n\t\t\t\tthrow ex;\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t\t, force_saveable_type = \"application/octet-stream\"\r\n\t\t// the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\r\n\t\t, arbitrary_revoke_timeout = 1000 * 40 // in ms\r\n\t\t, revoke = function(file) {\r\n\t\t\tvar revoker = function() {\r\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\r\n\t\t\t\t\tget_URL().revokeObjectURL(file);\r\n\t\t\t\t} else { // file is a File\r\n\t\t\t\t\tfile.remove();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);\r\n\t\t}\r\n\t\t, dispatch = function(filesaver, event_types, event) {\r\n\t\t\tevent_types = [].concat(event_types);\r\n\t\t\tvar i = event_types.length;\r\n\t\t\twhile (i--) {\r\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\r\n\t\t\t\tif (typeof listener === \"function\") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\r\n\t\t\t\t\t} catch (ex) {\r\n\t\t\t\t\t\tthrow_outside(ex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t, auto_bom = function(blob) {\r\n\t\t\t// prepend BOM for UTF-8 XML and text/* types (including HTML)\r\n\t\t\t// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\r\n\t\t\tif (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\r\n\t\t\t\treturn new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});\r\n\t\t\t}\r\n\t\t\treturn blob;\r\n\t\t}\r\n\t\t, FileSaver = function(blob, name, no_auto_bom) {\r\n\t\t\tif (!no_auto_bom) {\r\n\t\t\t\tblob = auto_bom(blob);\r\n\t\t\t}\r\n\t\t\t// First try a.download, then web filesystem, then object URLs\r\n\t\t\tvar\r\n\t\t\t\t  filesaver = this\r\n\t\t\t\t, type = blob.type\r\n\t\t\t\t, force = type === force_saveable_type\r\n\t\t\t\t, object_url\r\n\t\t\t\t, dispatch_all = function() {\r\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\r\n\t\t\t\t}\r\n\t\t\t\t// on any filesys errors revert to saving with object URLs\r\n\t\t\t\t, fs_error = function() {\r\n\t\t\t\t\tif ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\r\n\t\t\t\t\t\t// Safari doesn't allow downloading of blob urls\r\n\t\t\t\t\t\tvar reader = new FileReader();\r\n\t\t\t\t\t\treader.onloadend = function() {\r\n\t\t\t\t\t\t\tvar url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\r\n\t\t\t\t\t\t\tvar popup = view.open(url, '_blank');\r\n\t\t\t\t\t\t\tif(!popup) view.location.href = url;\r\n\t\t\t\t\t\t\turl=undefined; // release reference before dispatching\r\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\r\n\t\t\t\t\t\t\tdispatch_all();\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treader.readAsDataURL(blob);\r\n\t\t\t\t\t\tfilesaver.readyState = filesaver.INIT;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// don't create more object URLs than needed\r\n\t\t\t\t\tif (!object_url) {\r\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (force) {\r\n\t\t\t\t\t\tview.location.href = object_url;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar opened = view.open(object_url, \"_blank\");\r\n\t\t\t\t\t\tif (!opened) {\r\n\t\t\t\t\t\t\t// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\r\n\t\t\t\t\t\t\tview.location.href = object_url;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\r\n\t\t\t\t\tdispatch_all();\r\n\t\t\t\t\trevoke(object_url);\r\n\t\t\t\t}\r\n\t\t\t;\r\n\t\t\tfilesaver.readyState = filesaver.INIT;\r\n\r\n\t\t\tif (can_use_save_link) {\r\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);\r\n\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\tsave_link.href = object_url;\r\n\t\t\t\t\tsave_link.download = name;\r\n\t\t\t\t\tclick(save_link);\r\n\t\t\t\t\tdispatch_all();\r\n\t\t\t\t\trevoke(object_url);\r\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfs_error();\r\n\t\t}\r\n\t\t, FS_proto = FileSaver.prototype\r\n\t\t, saveAs = function(blob, name, no_auto_bom) {\r\n\t\t\treturn new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\r\n\t\t}\r\n\t;\r\n\t// IE 10+ (native saveAs)\r\n\tif (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\r\n\t\treturn function(blob, name, no_auto_bom) {\r\n\t\t\tname = name || blob.name || \"download\";\r\n\r\n\t\t\tif (!no_auto_bom) {\r\n\t\t\t\tblob = auto_bom(blob);\r\n\t\t\t}\r\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name);\r\n\t\t};\r\n\t}\r\n\r\n\tFS_proto.abort = function(){};\r\n\tFS_proto.readyState = FS_proto.INIT = 0;\r\n\tFS_proto.WRITING = 1;\r\n\tFS_proto.DONE = 2;\r\n\r\n\tFS_proto.error =\r\n\tFS_proto.onwritestart =\r\n\tFS_proto.onprogress =\r\n\tFS_proto.onwrite =\r\n\tFS_proto.onabort =\r\n\tFS_proto.onerror =\r\n\tFS_proto.onwriteend =\r\n\t\tnull;\r\n\r\n\treturn saveAs;\r\n}(\r\n\t   typeof self !== \"undefined\" && self\r\n\t|| typeof window !== \"undefined\" && window\r\n\t|| this.content\r\n));\r\n// `self` is undefined in Firefox for Android content script context\r\n// while `this` is nsIContentFrameMessageManager\r\n// with an attribute `content` that corresponds to the window\r\n\r\nif (typeof module !== \"undefined\" && module.exports) {\r\n  module.exports.saveAs = saveAs;\r\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd !== null)) {\r\n  define(\"FileSaver.js\", function() {\r\n    return saveAs;\r\n  });\r\n}\r\n",null]}