{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\computed-styles\\lib\\index.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\computed-styles\\lib\\index.js","mtime":1445956824000},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar isDefined = function isDefined(a) {\n  return typeof a !== 'undefined';\n};\nvar isObject = function isObject(a) {\n  return a !== null && typeof a === 'object';\n};\n\n// from https://github.com/npm-dom/is-dom/blob/master/index.js\nfunction isNode(val) {\n  if (!isObject(val)) return false;\n  if (isDefined(window) && isObject(window.Node)) return val instanceof window.Node;\n  return 'number' == typeof val.nodeType && 'string' == typeof val.nodeName;\n}\n\nvar useComputedStyles = isDefined(window) && isDefined(window.getComputedStyle);\n\n/**\n* Returns a collection of CSS property-value pairs\n* @param  {Element} node A DOM element to copy styles from\n* @param  {Object} [target] An optional object to copy styles to\n* @param {(Object|Boolean)} [default=true] A collection of CSS property-value pairs, false: copy none, true: copy all\n* @return {object} collection of CSS property-value pairs\n* @api public\n*/\nfunction computedStyles(node) {\n  var target = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var styleList = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n\n  if (!isNode(node)) {\n    throw new Error('parameter 1 is not of type \\'Element\\'');\n  }\n\n  if (styleList === false) return target;\n\n  if (useComputedStyles) {\n    var computed = node.ownerDocument.defaultView.getComputedStyle(node, null);\n    var keysArray = styleList === true ? computed : Object.keys(styleList);\n  } else {\n    var computed = isDefined(node.currentStyle) ? node.currentStyle : node.style;\n    var keysArray = styleList === true ? Object.keys(computed) : Object.keys(styleList);\n  }\n\n  for (var i = 0, l = keysArray.length; i < l; i++) {\n    var key = keysArray[i];\n\n    var def = styleList === true || styleList[key];\n    if (def === false || !isDefined(def)) continue; // copy never\n\n    var value = useComputedStyles ? computed.getPropertyValue(key) : computed[key];\n    if (typeof value !== 'string' || value === '') continue; // invalid value\n\n    if (def === true || value !== def) {\n      // styleList === true || styleList[key] === true || styleList[key] !== value\n      target[key] = value;\n    }\n  }\n\n  return target;\n}\n\nexports['default'] = computedStyles;\nmodule.exports = exports['default'];",null]}