{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\rxjs\\operator\\toArray.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\rxjs\\operator\\toArray.js","mtime":1527492784682},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["\"use strict\";\r\nvar toArray_1 = require('../operators/toArray');\r\n/**\r\n * Collects all source emissions and emits them as an array when the source completes.\r\n *\r\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\r\n *\r\n * <img src=\"./img/toArray.png\" width=\"100%\">\r\n *\r\n * `toArray` will wait until the source Observable completes\r\n * before emitting the array containing all emissions.\r\n * When the source Observable errors no array will be emitted.\r\n *\r\n * @example <caption>Create array from input</caption>\r\n * const input = Rx.Observable.interval(100).take(4);\r\n *\r\n * input.toArray()\r\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\r\n *\r\n * @see {@link buffer}\r\n *\r\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\r\n * @method toArray\r\n * @owner Observable\r\n */\r\nfunction toArray() {\r\n    return toArray_1.toArray()(this);\r\n}\r\nexports.toArray = toArray;\r\n//# sourceMappingURL=toArray.js.map",null]}