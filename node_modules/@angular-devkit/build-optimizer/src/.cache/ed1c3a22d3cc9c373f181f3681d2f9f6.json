{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\ngx-bar-rating\\component\\bar-rating.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\ngx-bar-rating\\component\\bar-rating.component.js","mtime":1529729760303},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Component, Input, Output, ChangeDetectionStrategy, EventEmitter, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n/** This allows support [(ngModel)] and ngControl. */\nvar RATING_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return BarRatingComponent; }),\n    multi: true\n};\n/** This allows control required validation. */\nvar RATING_VALUE_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return BarRatingComponent; }),\n    multi: true,\n};\nvar BarRatingComponent = /*@__PURE__*/ (function () {\n    function BarRatingComponent(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        this.contexts = [];\n        /** Maximal rating that can be given using this widget. */\n        this.max = 5;\n        /** A flag indicating if rating can be updated. */\n        this.readOnly = false;\n        /** Set the theme */\n        this.theme = 'default';\n        /** Show rating title */\n        this.showText = false;\n        /** Replace rate value with a title */\n        this.titles = [];\n        /** A flag indicating if rating is required for form validation. */\n        this.required = false;\n        /** An event fired when a user is hovering over a given rating.\n         * Event's payload equals to the rating being hovered over. */\n        this.hover = new EventEmitter();\n        /** An event fired when a user stops hovering over a given rating.\n         * Event's payload equals to the rating of the last item being hovered over. */\n        this.leave = new EventEmitter();\n        /** An event fired when a user selects a new rating.\n         * Event's payload equals to the newly selected rating. */\n        this.rateChange = new EventEmitter(true);\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    BarRatingComponent.prototype.ngOnChanges = function (changes) {\n        if (changes['rate']) {\n            this.update(this.rate);\n        }\n    };\n    BarRatingComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.contexts = Array.from({ length: this.max }, function (context, i) {\n            return ({\n                selected: false,\n                fraction: false,\n                click: function (e) { return _this.handleClick(e, i + 1); },\n                enter: function () { return _this.handleEnter(i + 1); }\n            });\n        });\n        this.updateState(this.rate);\n    };\n    BarRatingComponent.prototype.update = function (newRate, internalChange) {\n        if (internalChange === void 0) {\n            internalChange = true;\n        }\n        if (!this.readOnly && !this.disabled && this.rate !== newRate) {\n            this.rate = newRate;\n            this.rateChange.emit(this.rate);\n        }\n        if (internalChange) {\n            this.onChange(this.rate);\n            this.onTouched();\n        }\n        this.updateState(this.rate);\n    };\n    /** Reset rate value */\n    BarRatingComponent.prototype.reset = function () {\n        this.leave.emit(this.nextRate);\n        this.updateState(this.rate);\n    };\n    BarRatingComponent.prototype.updateState = function (nextValue) {\n        var _this = this;\n        /** Set rate value as text */\n        this.nextRate = nextValue - 1;\n        /** Set the rating */\n        this.contexts = Array.from({ length: this.max }, function (context, index) {\n            return ({\n                selected: index + 1 <= nextValue,\n                fraction: (index + 1 === Math.round(nextValue) && nextValue % 1) >= 0.5,\n                click: function (e) { return _this.handleClick(e, index); },\n                enter: function () { return _this.handleEnter(index); }\n            });\n        });\n    };\n    BarRatingComponent.prototype.handleClick = function (e, value) {\n        /** (NOT TESTED) Remove 300ms click delay on touch devices */\n        e.preventDefault();\n        e.stopPropagation();\n        this.update(value + 1);\n    };\n    BarRatingComponent.prototype.handleEnter = function (index) {\n        if (!this.disabled && !this.readOnly) {\n            /** Add selected class for rating hover */\n            this.contexts.map(function (context, i) {\n                context.active = i <= index;\n                context.fraction = false;\n                context.selected = false;\n            });\n            this.nextRate = index;\n            this.hover.emit(index);\n        }\n    };\n    /** This is the initial value set to the component */\n    BarRatingComponent.prototype.writeValue = function (value) {\n        this.update(value, false);\n        this.changeDetectorRef.markForCheck();\n    };\n    BarRatingComponent.prototype.validate = function (c) {\n        return (this.required && !c.value) ? { required: true } : null;\n    };\n    BarRatingComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    BarRatingComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    BarRatingComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return BarRatingComponent;\n}());\nexport { BarRatingComponent };\n//# sourceMappingURL=bar-rating.component.js.map\n",null]}