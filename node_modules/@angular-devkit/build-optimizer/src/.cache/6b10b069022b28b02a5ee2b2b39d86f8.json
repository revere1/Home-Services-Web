{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\lodash._basecallback\\index.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\lodash._basecallback\\index.js","mtime":1527492775081},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["/**\r\n * lodash 3.3.1 (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\r\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n * Available under MIT license <https://lodash.com/license>\r\n */\r\nvar baseIsEqual = require('lodash._baseisequal'),\r\n    bindCallback = require('lodash._bindcallback'),\r\n    isArray = require('lodash.isarray'),\r\n    pairs = require('lodash.pairs');\r\n\r\n/** Used to match property names within property paths. */\r\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]/,\r\n    reIsPlainProp = /^\\w*$/,\r\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;\r\n\r\n/** Used to match backslashes in property paths. */\r\nvar reEscapeChar = /\\\\(\\\\)?/g;\r\n\r\n/**\r\n * Converts `value` to a string if it's not one. An empty string is returned\r\n * for `null` or `undefined` values.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\r\nfunction baseToString(value) {\r\n  return value == null ? '' : (value + '');\r\n}\r\n\r\n/**\r\n * The base implementation of `_.callback` which supports specifying the\r\n * number of arguments to provide to `func`.\r\n *\r\n * @private\r\n * @param {*} [func=_.identity] The value to convert to a callback.\r\n * @param {*} [thisArg] The `this` binding of `func`.\r\n * @param {number} [argCount] The number of arguments to provide to `func`.\r\n * @returns {Function} Returns the callback.\r\n */\r\nfunction baseCallback(func, thisArg, argCount) {\r\n  var type = typeof func;\r\n  if (type == 'function') {\r\n    return thisArg === undefined\r\n      ? func\r\n      : bindCallback(func, thisArg, argCount);\r\n  }\r\n  if (func == null) {\r\n    return identity;\r\n  }\r\n  if (type == 'object') {\r\n    return baseMatches(func);\r\n  }\r\n  return thisArg === undefined\r\n    ? property(func)\r\n    : baseMatchesProperty(func, thisArg);\r\n}\r\n\r\n/**\r\n * The base implementation of `get` without support for string paths\r\n * and default values.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Array} path The path of the property to get.\r\n * @param {string} [pathKey] The key representation of path.\r\n * @returns {*} Returns the resolved value.\r\n */\r\nfunction baseGet(object, path, pathKey) {\r\n  if (object == null) {\r\n    return;\r\n  }\r\n  if (pathKey !== undefined && pathKey in toObject(object)) {\r\n    path = [pathKey];\r\n  }\r\n  var index = 0,\r\n      length = path.length;\r\n\r\n  while (object != null && index < length) {\r\n    object = object[path[index++]];\r\n  }\r\n  return (index && index == length) ? object : undefined;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isMatch` without support for callback\r\n * shorthands and `this` binding.\r\n *\r\n * @private\r\n * @param {Object} object The object to inspect.\r\n * @param {Array} matchData The propery names, values, and compare flags to match.\r\n * @param {Function} [customizer] The function to customize comparing objects.\r\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\r\n */\r\nfunction baseIsMatch(object, matchData, customizer) {\r\n  var index = matchData.length,\r\n      length = index,\r\n      noCustomizer = !customizer;\r\n\r\n  if (object == null) {\r\n    return !length;\r\n  }\r\n  object = toObject(object);\r\n  while (index--) {\r\n    var data = matchData[index];\r\n    if ((noCustomizer && data[2])\r\n          ? data[1] !== object[data[0]]\r\n          : !(data[0] in object)\r\n        ) {\r\n      return false;\r\n    }\r\n  }\r\n  while (++index < length) {\r\n    data = matchData[index];\r\n    var key = data[0],\r\n        objValue = object[key],\r\n        srcValue = data[1];\r\n\r\n    if (noCustomizer && data[2]) {\r\n      if (objValue === undefined && !(key in object)) {\r\n        return false;\r\n      }\r\n    } else {\r\n      var result = customizer ? customizer(objValue, srcValue, key) : undefined;\r\n      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.matches` which does not clone `source`.\r\n *\r\n * @private\r\n * @param {Object} source The object of property values to match.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction baseMatches(source) {\r\n  var matchData = getMatchData(source);\r\n  if (matchData.length == 1 && matchData[0][2]) {\r\n    var key = matchData[0][0],\r\n        value = matchData[0][1];\r\n\r\n    return function(object) {\r\n      if (object == null) {\r\n        return false;\r\n      }\r\n      return object[key] === value && (value !== undefined || (key in toObject(object)));\r\n    };\r\n  }\r\n  return function(object) {\r\n    return baseIsMatch(object, matchData);\r\n  };\r\n}\r\n\r\n/**\r\n * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\r\n *\r\n * @private\r\n * @param {string} path The path of the property to get.\r\n * @param {*} srcValue The value to compare.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction baseMatchesProperty(path, srcValue) {\r\n  var isArr = isArray(path),\r\n      isCommon = isKey(path) && isStrictComparable(srcValue),\r\n      pathKey = (path + '');\r\n\r\n  path = toPath(path);\r\n  return function(object) {\r\n    if (object == null) {\r\n      return false;\r\n    }\r\n    var key = pathKey;\r\n    object = toObject(object);\r\n    if ((isArr || !isCommon) && !(key in object)) {\r\n      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n      if (object == null) {\r\n        return false;\r\n      }\r\n      key = last(path);\r\n      object = toObject(object);\r\n    }\r\n    return object[key] === srcValue\r\n      ? (srcValue !== undefined || (key in object))\r\n      : baseIsEqual(srcValue, object[key], undefined, true);\r\n  };\r\n}\r\n\r\n/**\r\n * The base implementation of `_.property` without support for deep paths.\r\n *\r\n * @private\r\n * @param {string} key The key of the property to get.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction baseProperty(key) {\r\n  return function(object) {\r\n    return object == null ? undefined : object[key];\r\n  };\r\n}\r\n\r\n/**\r\n * A specialized version of `baseProperty` which supports deep paths.\r\n *\r\n * @private\r\n * @param {Array|string} path The path of the property to get.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction basePropertyDeep(path) {\r\n  var pathKey = (path + '');\r\n  path = toPath(path);\r\n  return function(object) {\r\n    return baseGet(object, path, pathKey);\r\n  };\r\n}\r\n\r\n/**\r\n * The base implementation of `_.slice` without an iteratee call guard.\r\n *\r\n * @private\r\n * @param {Array} array The array to slice.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the slice of `array`.\r\n */\r\nfunction baseSlice(array, start, end) {\r\n  var index = -1,\r\n      length = array.length;\r\n\r\n  start = start == null ? 0 : (+start || 0);\r\n  if (start < 0) {\r\n    start = -start > length ? 0 : (length + start);\r\n  }\r\n  end = (end === undefined || end > length) ? length : (+end || 0);\r\n  if (end < 0) {\r\n    end += length;\r\n  }\r\n  length = start > end ? 0 : ((end - start) >>> 0);\r\n  start >>>= 0;\r\n\r\n  var result = Array(length);\r\n  while (++index < length) {\r\n    result[index] = array[index + start];\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the propery names, values, and compare flags of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the match data of `object`.\r\n */\r\nfunction getMatchData(object) {\r\n  var result = pairs(object),\r\n      length = result.length;\r\n\r\n  while (length--) {\r\n    result[length][2] = isStrictComparable(result[length][1]);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a property name and not a property path.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {Object} [object] The object to query keys on.\r\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\r\n */\r\nfunction isKey(value, object) {\r\n  var type = typeof value;\r\n  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {\r\n    return true;\r\n  }\r\n  if (isArray(value)) {\r\n    return false;\r\n  }\r\n  var result = !reIsDeepProp.test(value);\r\n  return result || (object != null && value in toObject(object));\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` if suitable for strict\r\n *  equality comparisons, else `false`.\r\n */\r\nfunction isStrictComparable(value) {\r\n  return value === value && !isObject(value);\r\n}\r\n\r\n/**\r\n * Converts `value` to an object if it's not one.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {Object} Returns the object.\r\n */\r\nfunction toObject(value) {\r\n  return isObject(value) ? value : Object(value);\r\n}\r\n\r\n/**\r\n * Converts `value` to property path array if it's not one.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {Array} Returns the property path array.\r\n */\r\nfunction toPath(value) {\r\n  if (isArray(value)) {\r\n    return value;\r\n  }\r\n  var result = [];\r\n  baseToString(value).replace(rePropName, function(match, number, quote, string) {\r\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the last element of `array`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Array\r\n * @param {Array} array The array to query.\r\n * @returns {*} Returns the last element of `array`.\r\n * @example\r\n *\r\n * _.last([1, 2, 3]);\r\n * // => 3\r\n */\r\nfunction last(array) {\r\n  var length = array ? array.length : 0;\r\n  return length ? array[length - 1] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\r\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(1);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  // Avoid a V8 JIT bug in Chrome 19-20.\r\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * This method returns the first argument provided to it.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Utility\r\n * @param {*} value Any value.\r\n * @returns {*} Returns `value`.\r\n * @example\r\n *\r\n * var object = { 'user': 'fred' };\r\n *\r\n * _.identity(object) === object;\r\n * // => true\r\n */\r\nfunction identity(value) {\r\n  return value;\r\n}\r\n\r\n/**\r\n * Creates a function that returns the property value at `path` on a\r\n * given object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Utility\r\n * @param {Array|string} path The path of the property to get.\r\n * @returns {Function} Returns the new function.\r\n * @example\r\n *\r\n * var objects = [\r\n *   { 'a': { 'b': { 'c': 2 } } },\r\n *   { 'a': { 'b': { 'c': 1 } } }\r\n * ];\r\n *\r\n * _.map(objects, _.property('a.b.c'));\r\n * // => [2, 1]\r\n *\r\n * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\r\n * // => [1, 2]\r\n */\r\nfunction property(path) {\r\n  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\r\n}\r\n\r\nmodule.exports = baseCallback;\r\n",null]}