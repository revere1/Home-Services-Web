{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-charts\\release\\common\\count\\count.helper.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-charts\\release\\common\\count\\count.helper.js","mtime":1527492757494},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// Robert Penner's easeOutExpo\r\nfunction easeOutExpo(t, b, c, d) {\r\n    return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\r\n}\r\n/**\r\n * Counts from a number to the end incrementally.\r\n *\r\n * @export\r\n * @param {any} countFrom\r\n * @param {any} countTo\r\n * @param {any} countDecimals\r\n * @param {any} countDuration\r\n * @param {any} callback\r\n * @returns\r\n */\r\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\r\n    var startVal = Number(countFrom);\r\n    var endVal = Number(countTo);\r\n    var countDown = (startVal > endVal);\r\n    var decimals = Math.max(0, countDecimals);\r\n    var dec = Math.pow(10, decimals);\r\n    var duration = Number(countDuration) * 1000;\r\n    var startTime;\r\n    function runCount(timestamp) {\r\n        var frameVal;\r\n        var progress = timestamp - startTime;\r\n        if (countDown) {\r\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\r\n        }\r\n        else {\r\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\r\n        }\r\n        if (countDown) {\r\n            frameVal = (frameVal < endVal) ? endVal : frameVal;\r\n        }\r\n        else {\r\n            frameVal = (frameVal > endVal) ? endVal : frameVal;\r\n        }\r\n        frameVal = Math.round(frameVal * dec) / dec;\r\n        var tick = progress < duration;\r\n        callback({\r\n            value: frameVal,\r\n            progress: progress,\r\n            timestamp: timestamp,\r\n            finished: !tick\r\n        });\r\n        if (tick) {\r\n            return requestAnimationFrame(function (val) { return runCount(val); });\r\n        }\r\n    }\r\n    return requestAnimationFrame(function (timestamp) {\r\n        startTime = timestamp;\r\n        return runCount(timestamp);\r\n    });\r\n}\r\n/**\r\n * Determine decimals places\r\n *\r\n * @export\r\n * @param {any} countTo\r\n * @returns\r\n */\r\nexport function decimalChecker(countTo) {\r\n    var endVal = Number(countTo);\r\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\r\n        return 2;\r\n    }\r\n    return 0;\r\n}\r\n//# sourceMappingURL=count.helper.js.map",null]}