{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\lodash.keys\\index.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\lodash.keys\\index.js","mtime":1527492775105},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["/**\r\n * lodash 3.1.2 (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\r\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n * Available under MIT license <https://lodash.com/license>\r\n */\r\nvar getNative = require('lodash._getnative'),\r\n    isArguments = require('lodash.isarguments'),\r\n    isArray = require('lodash.isarray');\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^\\d+$/;\r\n\r\n/** Used for native method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/* Native method references for those with the same name as other `lodash` methods. */\r\nvar nativeKeys = getNative(Object, 'keys');\r\n\r\n/**\r\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\r\n * of an array-like value.\r\n */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/**\r\n * The base implementation of `_.property` without support for deep paths.\r\n *\r\n * @private\r\n * @param {string} key The key of the property to get.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction baseProperty(key) {\r\n  return function(object) {\r\n    return object == null ? undefined : object[key];\r\n  };\r\n}\r\n\r\n/**\r\n * Gets the \"length\" property value of `object`.\r\n *\r\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\r\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {*} Returns the \"length\" value.\r\n */\r\nvar getLength = baseProperty('length');\r\n\r\n/**\r\n * Checks if `value` is array-like.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(getLength(value));\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return value > -1 && value % 1 == 0 && value < length;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * A fallback implementation of `Object.keys` which creates an array of the\r\n * own enumerable property names of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction shimKeys(object) {\r\n  var props = keysIn(object),\r\n      propsLength = props.length,\r\n      length = propsLength && object.length;\r\n\r\n  var allowIndexes = !!length && isLength(length) &&\r\n    (isArray(object) || isArguments(object));\r\n\r\n  var index = -1,\r\n      result = [];\r\n\r\n  while (++index < propsLength) {\r\n    var key = props[index];\r\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\r\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(1);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  // Avoid a V8 JIT bug in Chrome 19-20.\r\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nvar keys = !nativeKeys ? shimKeys : function(object) {\r\n  var Ctor = object == null ? undefined : object.constructor;\r\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\r\n      (typeof object != 'function' && isArrayLike(object))) {\r\n    return shimKeys(object);\r\n  }\r\n  return isObject(object) ? nativeKeys(object) : [];\r\n};\r\n\r\n/**\r\n * Creates an array of the own and inherited enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keysIn(new Foo);\r\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\r\n */\r\nfunction keysIn(object) {\r\n  if (object == null) {\r\n    return [];\r\n  }\r\n  if (!isObject(object)) {\r\n    object = Object(object);\r\n  }\r\n  var length = object.length;\r\n  length = (length && isLength(length) &&\r\n    (isArray(object) || isArguments(object)) && length) || 0;\r\n\r\n  var Ctor = object.constructor,\r\n      index = -1,\r\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\r\n      result = Array(length),\r\n      skipIndexes = length > 0;\r\n\r\n  while (++index < length) {\r\n    result[index] = (index + '');\r\n  }\r\n  for (var key in object) {\r\n    if (!(skipIndexes && isIndex(key, length)) &&\r\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = keys;\r\n",null]}