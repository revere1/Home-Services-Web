{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-charts\\release\\utils\\color-utils.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-charts\\release\\utils\\color-utils.js","mtime":1527492757688},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import * as d3_color from 'd3-color';\r\n/**\r\n * Converts a hex to RGB\r\n *\r\n * @export\r\n * @param {string} hex\r\n * @returns {*}\r\n */\r\nexport function hexToRgb(value) {\r\n    // deprecated, use d3.color()\r\n    return d3_color.rgb(value);\r\n}\r\n/**\r\n * Accepts a color (string) and returns a inverted hex color (string)\r\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\r\n *\r\n * @export\r\n * @param {any} value\r\n * @returns {string}\r\n */\r\nexport function invertColor(value) {\r\n    var color = d3_color.rgb(value);\r\n    var r = color.r, g = color.g, b = color.b, opacity = color.opacity;\r\n    if (opacity === 0) {\r\n        return color.toString();\r\n    }\r\n    var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n    var depth = (yiq >= 128) ? -.8 : .8;\r\n    return shadeRGBColor(color, depth);\r\n}\r\n/**\r\n * Given a rgb, it will darken/lighten\r\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n *\r\n * @export\r\n * @param {any} { r, g, b }\r\n * @param {any} percent\r\n * @returns\r\n */\r\nexport function shadeRGBColor(_a, percent) {\r\n    var r = _a.r, g = _a.g, b = _a.b;\r\n    var t = percent < 0 ? 0 : 255;\r\n    var p = percent < 0 ? percent * -1 : percent;\r\n    r = (Math.round((t - r) * p) + r);\r\n    g = (Math.round((t - g) * p) + g);\r\n    b = (Math.round((t - b) * p) + b);\r\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\r\n}\r\n//# sourceMappingURL=color-utils.js.map",null]}