{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\rxjs\\operators\\share.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\rxjs\\operators\\share.js","mtime":1527492784768},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["\"use strict\";\r\nvar multicast_1 = require('./multicast');\r\nvar refCount_1 = require('./refCount');\r\nvar Subject_1 = require('../Subject');\r\nfunction shareSubjectFactory() {\r\n    return new Subject_1.Subject();\r\n}\r\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n * This is an alias for .multicast(() => new Subject()).refCount().\r\n *\r\n * <img src=\"./img/share.png\" width=\"100%\">\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\r\nfunction share() {\r\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\r\n}\r\nexports.share = share;\r\n;\r\n//# sourceMappingURL=share.js.map",null]}