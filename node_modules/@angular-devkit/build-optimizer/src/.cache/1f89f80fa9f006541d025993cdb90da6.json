{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\split\\split-handle.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\split\\split-handle.component.js","mtime":1527490597927},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Output, ChangeDetectionStrategy, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/observable/fromEvent';\nvar SplitHandleComponent = /*@__PURE__*/ (function () {\n    function SplitHandleComponent() {\n        this.drag = new EventEmitter();\n        this.dragStart = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        this.dblclick = new EventEmitter();\n    }\n    SplitHandleComponent.prototype.onMousedown = function (ev) {\n        var _this = this;\n        var mouseup$ = Observable.fromEvent(document, 'mouseup');\n        this.subscription = mouseup$\n            .subscribe(function (e) { return _this.onMouseup(e); });\n        var mousemove$ = Observable.fromEvent(document, 'mousemove')\n            .takeUntil(mouseup$)\n            .subscribe(function (e) { return _this.onMouseMove(e); });\n        this.subscription.add(mousemove$);\n        this.dragStart.emit(ev);\n    };\n    SplitHandleComponent.prototype.onMouseMove = function (ev) {\n        this.drag.emit(ev);\n    };\n    SplitHandleComponent.prototype.onMouseup = function (ev) {\n        if (this.subscription) {\n            this.dragEnd.emit(ev);\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    };\n    return SplitHandleComponent;\n}());\nexport { SplitHandleComponent };\n//# sourceMappingURL=split-handle.component.js.map\n",null]}