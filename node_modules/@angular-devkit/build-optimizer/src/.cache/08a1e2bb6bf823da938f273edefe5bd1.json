{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\calendar\\calendar-utils.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\calendar\\calendar-utils.js","mtime":1527492758311},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["/**\r\n * Creates a range for the given start/finish\r\n * @param  {Number} start\r\n * @param  {Number} finish\r\n * @return {Array}  result of range\r\n */\r\nexport function range(start, finish) {\r\n    var arr = [];\r\n    var i = start;\r\n    while (i < finish) {\r\n        arr.push(i++);\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Returns the month offset correctly\r\n * @param  {Object} active\r\n * @return {Object} days\r\n */\r\nexport function getMonth(active) {\r\n    var days = getDaysForMonth(active);\r\n    var offset = active.startOf('month').isoWeekday();\r\n    return getWeeksForDays(days, offset);\r\n}\r\n/**\r\n * Gets a array of days split by week\r\n * @param  {array} days\r\n * @param  {number} offset\r\n * @return {array} days by week\r\n */\r\nexport function getWeeksForDays(days, startDay) {\r\n    var weeks = [];\r\n    var offset = 7;\r\n    // fill front row\r\n    if (startDay < 7) {\r\n        offset = 7 - startDay;\r\n    }\r\n    var _loop_1 = function () {\r\n        var wk = days.slice(0, offset);\r\n        days.splice(0, offset);\r\n        // fill front row\r\n        if (offset < 7) {\r\n            var firstDay_1 = wk[0].date;\r\n            var fill = range(0, startDay)\r\n                .map(function (d, i) {\r\n                var date = firstDay_1.clone().subtract(startDay - i, 'd');\r\n                return {\r\n                    num: date.date(),\r\n                    dayOfWeek: date.day(),\r\n                    date: date,\r\n                    prevMonth: true\r\n                };\r\n            });\r\n            wk = fill.concat(wk);\r\n            offset = 7;\r\n        }\r\n        // fill last row\r\n        if (!days.length && wk.length !== 7) {\r\n            var lastDay_1 = wk[wk.length - 1].date;\r\n            var fill = range(wk.length, 7)\r\n                .map(function (d, i) {\r\n                var date = lastDay_1.clone().add(i + 1, 'd');\r\n                return {\r\n                    num: date.date(),\r\n                    dayOfWeek: date.day(),\r\n                    date: date,\r\n                    nextMonth: true\r\n                };\r\n            });\r\n            wk = wk.concat(fill);\r\n        }\r\n        wk.forEach(function (day) {\r\n            day.classes = {\r\n                'first-day-of-month': day.num === 1,\r\n                'last-day-of-week': day.dayOfWeek === 6,\r\n                today: day.today,\r\n                'next-month': day.nextMonth,\r\n                'prev-month': day.prevMonth\r\n            };\r\n        });\r\n        weeks.push(wk);\r\n    };\r\n    while (days.length) {\r\n        _loop_1();\r\n    }\r\n    return weeks;\r\n}\r\n/**\r\n * Get the days for the month\r\n * @param  {Object} active\r\n * @return {array} array of days\r\n */\r\nexport function getDaysForMonth(active) {\r\n    return range(1, active.daysInMonth() + 1).map(function (i) {\r\n        var date = active.date(i).clone();\r\n        var today = date.isSame(new Date(), 'day');\r\n        return {\r\n            num: date.date(),\r\n            dayOfWeek: date.day(),\r\n            date: date,\r\n            today: today\r\n        };\r\n    });\r\n}\r\n//# sourceMappingURL=calendar-utils.js.map",null]}