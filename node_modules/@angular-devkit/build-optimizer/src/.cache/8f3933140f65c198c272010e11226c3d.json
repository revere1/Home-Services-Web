{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\ngx-progressbar\\modules\\ngx-progressbar.es5.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\ngx-progressbar\\modules\\ngx-progressbar.es5.js","mtime":1527492778145},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ChangeDetectionStrategy, Component, Injectable, Input, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/timer';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/takeWhile';\nimport { BrowserXhr } from '@angular/http';\nimport 'rxjs/add/operator/finally';\nimport { CommonModule } from '@angular/common';\n/**\n * Helper\n */\nvar clamp = function (n, min, max) {\n    if (n < min) {\n        return min;\n    }\n    if (n > max) {\n        return max;\n    }\n    return n;\n};\nvar NgProgress = /*@__PURE__*/ (function () {\n    function NgProgress() {\n        var _this = this;\n        /**\n         * Initial state\n         */\n        this.initState = {\n            active: false,\n            value: 0\n        };\n        /**\n         * Progress state\n         */\n        this.state = new BehaviorSubject(this.initState);\n        /**\n         * Trickling stream\n         */\n        this.trickling = new Subject();\n        this.progress = 0;\n        this.maximum = 1;\n        this.minimum = 0.08;\n        this.speed = 200;\n        this.trickleSpeed = 300;\n        this.trickling.switchMap(function () {\n            return Observable\n                .timer(0, _this.trickleSpeed)\n                .takeWhile(function () { return _this.isStarted(); })\n                .do(function () { return _this.inc(); });\n        }).subscribe();\n    }\n    /**\n     * Start\n     * @return {?}\n     */\n    NgProgress.prototype.start = function () {\n        if (!this.isStarted()) {\n            this.set(this.minimum);\n        }\n        this.trickling.next();\n    };\n    /**\n     * Done\n     * @return {?}\n     */\n    NgProgress.prototype.done = function () {\n        /** if started, complete the progress */\n        if (this.isStarted()) {\n            this.set(.3 + .5 * Math.random());\n            this.set(this.maximum);\n        }\n    };\n    /**\n     * Increment the progress\n     * @param {?=} amount\n     * @return {?}\n     */\n    NgProgress.prototype.inc = function (amount) {\n        var /** @type {?} */ n = this.progress;\n        /** if it hasn't start, start */\n        if (!this.isStarted()) {\n            this.start();\n        }\n        else {\n            if (typeof amount !== 'number') {\n                if (n >= 0 && n < 0.2) {\n                    amount = 0.1;\n                }\n                else if (n >= 0.2 && n < 0.5) {\n                    amount = 0.04;\n                }\n                else if (n >= 0.5 && n < 0.8) {\n                    amount = 0.02;\n                }\n                else if (n >= 0.8 && n < 0.99) {\n                    amount = 0.005;\n                }\n                else {\n                    amount = 0;\n                }\n            }\n            n = clamp(n + amount, 0, 0.994);\n            this.set(n);\n        }\n    };\n    /**\n     * Set the progress\n     * @param {?} n\n     * @return {?}\n     */\n    NgProgress.prototype.set = function (n) {\n        var _this = this;\n        this.progress = clamp(n, this.minimum, this.maximum);\n        this.updateState(this.progress, true);\n        /** if progress completed */\n        if (n === this.maximum) {\n            var /** @type {?} */ hide_1 = function () {\n                /**\n                 *  reset the progress\n                 *  Keep it { 0, false } to fadeOut progress-bar after complete\n                 */\n                if (_this.progress >= _this.maximum) {\n                    _this.progress = 0;\n                    _this.updateState(_this.progress, false);\n                }\n            };\n            var /** @type {?} */ complete = function () {\n                /**\n                 * complete the progress\n                 * { 1, false } to complete progress-bar before hiding\n                 */\n                if (_this.progress >= _this.maximum) {\n                    _this.updateState(_this.progress, false);\n                    setTimeout(hide_1, _this.speed);\n                }\n            };\n            setTimeout(complete, this.speed);\n        }\n    };\n    /**\n     * Is progress started\n    \\@return {boolean}\n     * @return {?}\n     */\n    NgProgress.prototype.isStarted = function () {\n        return this.progress > 0 && this.progress < this.maximum;\n    };\n    /**\n     * Update the progress\n     * @param {?} progress\n     * @param {?} isActive\n     * @return {?}\n     */\n    NgProgress.prototype.updateState = function (progress, isActive) {\n        this.state.next({\n            active: isActive,\n            value: progress\n        });\n    };\n    return NgProgress;\n}());\nvar NgProgressBrowserXhr = /*@__PURE__*/ (function (_super) {\n    __extends(NgProgressBrowserXhr, _super);\n    /**\n     * @param {?} ngProgress\n     */\n    function NgProgressBrowserXhr(ngProgress) {\n        var _this = _super.call(this) || this;\n        _this.ngProgress = ngProgress;\n        _this.currentRequest = 0;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgProgressBrowserXhr.prototype.build = function () {\n        var _this = this;\n        var /** @type {?} */ xhr = _super.prototype.build.call(this);\n        xhr.onload = function (evt) { return _this.done(); };\n        xhr.onerror = function (evt) { return _this.done(); };\n        xhr.onabort = function (evt) { return _this.done(); };\n        xhr.onloadstart = function (event) {\n            _this.currentRequest++;\n            if (!_this.ngProgress.isStarted()) {\n                _this.ngProgress.start();\n            }\n        };\n        return xhr;\n    };\n    /**\n     * @return {?}\n     */\n    NgProgressBrowserXhr.prototype.done = function () {\n        this.currentRequest--;\n        if (this.currentRequest === 0) {\n            this.ngProgress.done();\n        }\n    };\n    return NgProgressBrowserXhr;\n}(BrowserXhr));\nvar NgProgressInterceptor = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} ngProgress\n     */\n    function NgProgressInterceptor(ngProgress) {\n        this.ngProgress = ngProgress;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NgProgressInterceptor.prototype.intercept = function (req, next) {\n        var _this = this;\n        this.ngProgress.start();\n        return next.handle(req).finally(function () {\n            _this.ngProgress.done();\n        });\n    };\n    return NgProgressInterceptor;\n}());\nvar ProgressBarComponent = /*@__PURE__*/ (function () {\n    function ProgressBarComponent() {\n    }\n    /**\n     * Styles for progressbar\n     * @return {?}\n     */\n    ProgressBarComponent.prototype.barStyles = function () {\n        var /** @type {?} */ styles = {\n            transition: \"all \" + this.speed + \"ms \" + this.ease,\n            backgroundColor: this.color\n        };\n        /**\n         * Get positioning value\n         */\n        var n = (!this.state.value) ? {\n            leftToRightIncreased: -100,\n            leftToRightReduced: 0,\n            rightToLeftIncreased: 100,\n            rightToLeftReduced: 0\n        }[this.direction] : this.toPercentage(this.state.value);\n        switch (this.positionUsing) {\n            case 'translate3d':\n                styles = Object.assign({}, styles, {\n                    transform: \"translate3d(\" + n + \"%,0,0)\",\n                    '-webkit-transform': \"translate3d(\" + n + \"%,0,0)\",\n                    '-moz-transform': \"translate3d(\" + n + \"%,0,0)\",\n                    '-o-transform': \"translate3d(\" + n + \"%,0,0)\",\n                    '-ms-transform': \"translate3d(\" + n + \"%,0,0)\"\n                });\n                break;\n            case 'translate':\n                styles = Object.assign({}, styles, {\n                    transform: \"translate(\" + n + \"%,0)\",\n                    '-webkit-transform': \"translate(\" + n + \"%,0)\",\n                    '-moz-transform': \"translate(\" + n + \"%,0)\",\n                    '-o-transform': \"translate(\" + n + \"%,0)\",\n                    '-ms-transform': \"translate(\" + n + \"%,0)\"\n                });\n                break;\n            default:\n                styles = Object.assign({}, styles, {\n                    marginLeft: n + \"%\"\n                });\n        }\n        return styles;\n    };\n    /**\n     * Styles for progressbar tail\n     * @return {?}\n     */\n    ProgressBarComponent.prototype.shadowStyles = function () {\n        return {\n            boxShadow: \"0 0 10px \" + this.color + \", 0 0 5px \" + this.color\n        };\n    };\n    /**\n     * @param {?} n\n     * @return {?}\n     */\n    ProgressBarComponent.prototype.toPercentage = function (n) {\n        return ({\n            leftToRightIncreased: -1 + n,\n            leftToRightReduced: -n,\n            rightToLeftIncreased: 1 - n,\n            rightToLeftReduced: n\n        }[this.direction]) * 100;\n    };\n    /**\n     * @return {?}\n     */\n    ProgressBarComponent.prototype.spinnerClasses = function () {\n        return {\n            leftToRightIncreased: 'clockwise',\n            leftToRightReduced: 'anti-clockwise',\n            rightToLeftIncreased: 'anti-clockwise',\n            rightToLeftReduced: 'clockwise'\n        }[this.direction];\n    };\n    return ProgressBarComponent;\n}());\nvar ProgressComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} ngProgress\n     */\n    function ProgressComponent(ngProgress) {\n        this.ngProgress = ngProgress;\n        /**\n         * Progress options\n         */\n        this.ease = 'linear';\n        this.positionUsing = 'margin';\n        this.showSpinner = true;\n        this.direction = 'leftToRightIncreased';\n        this.color = '#CC181E';\n        this.thick = false;\n        this.maximum = 1;\n        this.minimum = 0.08;\n        this.speed = 200;\n        this.trickleSpeed = 300;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ProgressComponent.prototype.ngOnChanges = function (changes) {\n        var /** @type {?} */ minChng = changes.minimum;\n        var /** @type {?} */ maxChng = changes.maximum;\n        var /** @type {?} */ spdChng = changes.speed;\n        var /** @type {?} */ tklSpdChng = changes.trickleSpeed;\n        var /** @type {?} */ tglChng = changes.toggle;\n        if (minChng) {\n            if (typeof minChng.currentValue !== 'undefined' && minChng.currentValue !== minChng.previousValue) {\n                if (minChng.currentValue < 0 || minChng.currentValue > 1) {\n                    throw 'Input [minimum] must be between 0 and 1';\n                }\n                else {\n                    this.ngProgress.minimum = minChng.currentValue;\n                }\n            }\n        }\n        if (maxChng) {\n            if (typeof maxChng.currentValue !== 'undefined' && maxChng.currentValue !== maxChng.previousValue) {\n                if (maxChng.currentValue < 0 || maxChng.currentValue > 1) {\n                    throw 'Input [maximum] must be between 0 and 1';\n                }\n                else {\n                    this.ngProgress.maximum = maxChng.currentValue;\n                }\n            }\n        }\n        if (spdChng) {\n            if (typeof spdChng.currentValue !== 'undefined' && spdChng.currentValue !== spdChng.previousValue) {\n                this.ngProgress.speed = spdChng.currentValue;\n            }\n        }\n        if (tklSpdChng) {\n            if (typeof tklSpdChng.currentValue !== 'undefined' && tklSpdChng.currentValue !== tklSpdChng.previousValue) {\n                this.ngProgress.trickleSpeed = tklSpdChng.currentValue;\n            }\n        }\n        if (tglChng) {\n            if (typeof tglChng.currentValue !== 'undefined' && tglChng.currentValue !== tglChng.previousValue) {\n                if (tglChng.currentValue) {\n                    this.ngProgress.start();\n                }\n                else {\n                    this.ngProgress.done();\n                }\n            }\n        }\n    };\n    return ProgressComponent;\n}());\nvar NgProgressModule = /*@__PURE__*/ (function () {\n    function NgProgressModule() {\n    }\n    return NgProgressModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgProgress, NgProgressBrowserXhr, NgProgressInterceptor, NgProgressModule, ProgressBarComponent as ɵb, ProgressComponent as ɵa };\n//# sourceMappingURL=ngx-progressbar.es5.js.map\n",null]}