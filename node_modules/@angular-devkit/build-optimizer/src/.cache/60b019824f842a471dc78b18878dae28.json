{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\notification\\notification.service.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\notification\\notification.service.js","mtime":1527490595230},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { __param } from \"tslib\";\nimport { Injectable, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { InjectionRegisteryService, InjectionService } from '../../services';\nimport { NotificationType } from './notification.type';\nimport { NotificationStyleType } from './notification-style.type';\nimport { NotificationPermissionType } from './notification-permission.type';\nimport { NotificationComponent } from './notification.component';\nimport { NotificationContainerComponent } from './notification-container.component';\nvar NotificationService = /*@__PURE__*/ (function (_super) {\n    __extends(NotificationService, _super);\n    function NotificationService(injectionService, document) {\n        var _this = _super.call(this, injectionService) || this;\n        _this.document = document;\n        _this.defaults = {\n            inputs: {\n                timeout: 2000,\n                rateLimit: true,\n                pauseOnHover: true,\n                type: NotificationType.html,\n                styleType: NotificationStyleType.none,\n                showClose: true,\n                sound: false\n            }\n        };\n        _this.type = NotificationComponent;\n        return _this;\n    }\n    NotificationService_1 = NotificationService;\n    Object.defineProperty(NotificationService.prototype, \"isNativeSupported\", {\n        get: function () {\n            return 'Notification' in window;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationService.prototype.create = function (bindings) {\n        // verify flood not happening\n        if (bindings.rateLimit && this.isFlooded(bindings)) {\n            return false;\n        }\n        // if limit reached, remove the first one\n        var compsByType = this.getByType();\n        if (compsByType && compsByType.length >= NotificationService_1.limit) {\n            this.destroy(compsByType[0]);\n        }\n        // native notifications need to be invoked\n        var component;\n        if (bindings.type === NotificationType.native) {\n            component = this.showNative(bindings);\n        }\n        else {\n            component = _super.prototype.create.call(this, bindings);\n            this.createSubscriptions(component);\n        }\n        // start timer for notification\n        this.startTimer(component);\n        return component;\n    };\n    NotificationService.prototype.startTimer = function (component) {\n        var _this = this;\n        if (component.instance.timeout !== false) {\n            clearTimeout(component.instance.timer);\n            component.instance.timer = setTimeout(function () {\n                _this.destroy(component);\n            }, component.instance.timeout);\n        }\n    };\n    NotificationService.prototype.pauseTimer = function (component) {\n        clearTimeout(component.instance.timer);\n    };\n    NotificationService.prototype.requestPermissions = function () {\n        var _this = this;\n        if (this.isNativeSupported) {\n            Notification.requestPermission(function (status) {\n                return _this.permission = status;\n            });\n        }\n    };\n    NotificationService.prototype.assignDefaults = function (bindings) {\n        bindings = _super.prototype.assignDefaults.call(this, bindings);\n        // add a timestamp for flood checks\n        bindings.inputs.timestamp = +new Date();\n        return bindings;\n    };\n    NotificationService.prototype.injectComponent = function (type, bindings) {\n        if (!this.container || !this.document.contains(this.container.location.nativeElement)) {\n            this.container = this.injectionService.appendComponent(NotificationContainerComponent);\n        }\n        return this.injectionService.appendComponent(type, bindings, this.container);\n    };\n    NotificationService.prototype.createSubscriptions = function (component) {\n        var _this = this;\n        var pauseSub;\n        var resumeSub;\n        var closeSub;\n        var kill = function () {\n            if (closeSub)\n                closeSub.unsubscribe();\n            if (resumeSub)\n                resumeSub.unsubscribe();\n            if (pauseSub)\n                pauseSub.unsubscribe();\n            _this.destroy(component);\n        };\n        var pause = function () {\n            _this.pauseTimer(component);\n        };\n        var resume = function () {\n            _this.startTimer(component);\n        };\n        pauseSub = component.instance.pause.subscribe(pause);\n        resumeSub = component.instance.resume.subscribe(resume);\n        closeSub = component.instance.close.subscribe(kill);\n    };\n    NotificationService.prototype.isFlooded = function (newNotification) {\n        var compsByType = this.getByType();\n        for (var _i = 0, compsByType_1 = compsByType; _i < compsByType_1.length; _i++) {\n            var notification = compsByType_1[_i];\n            var instance = notification.instance;\n            if (instance.title === newNotification.title &&\n                instance.body === newNotification.body &&\n                instance.timestamp + 1000 > newNotification.timestamp) {\n                return true;\n            }\n        }\n        return false;\n    };\n    NotificationService.prototype.showNative = function (options) {\n        if (!this.isNativeSupported)\n            return;\n        if (!this.permission)\n            this.requestPermissions();\n        if (this.permission === NotificationPermissionType.denied)\n            return;\n        var note = new Notification(options.title, options);\n        note.onerror = function () {\n            console.error('Notification failed!', options);\n        };\n        // manually do this\n        if (options && options.timeout !== false) {\n            setTimeout(note.close.bind(note), options.timeout);\n        }\n        return note;\n    };\n    NotificationService.limit = 10;\n    NotificationService = NotificationService_1 = __decorate([\n        __param(1, Inject(DOCUMENT))\n    ], NotificationService);\n    return NotificationService;\n    var NotificationService_1;\n}(InjectionRegisteryService));\nexport { NotificationService };\n//# sourceMappingURL=notification.service.js.map\n",null]}