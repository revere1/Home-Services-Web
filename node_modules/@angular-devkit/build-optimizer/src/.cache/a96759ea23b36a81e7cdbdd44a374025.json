{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\computed-styles\\lib\\index.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\computed-styles\\lib\\index.js","mtime":1527492763252},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\n\r\nvar isDefined = function isDefined(a) {\r\n  return typeof a !== 'undefined';\r\n};\r\nvar isObject = function isObject(a) {\r\n  return a !== null && typeof a === 'object';\r\n};\r\n\r\n// from https://github.com/npm-dom/is-dom/blob/master/index.js\r\nfunction isNode(val) {\r\n  if (!isObject(val)) return false;\r\n  if (isDefined(window) && isObject(window.Node)) return val instanceof window.Node;\r\n  return 'number' == typeof val.nodeType && 'string' == typeof val.nodeName;\r\n}\r\n\r\nvar useComputedStyles = isDefined(window) && isDefined(window.getComputedStyle);\r\n\r\n/**\r\n* Returns a collection of CSS property-value pairs\r\n* @param  {Element} node A DOM element to copy styles from\r\n* @param  {Object} [target] An optional object to copy styles to\r\n* @param {(Object|Boolean)} [default=true] A collection of CSS property-value pairs, false: copy none, true: copy all\r\n* @return {object} collection of CSS property-value pairs\r\n* @api public\r\n*/\r\nfunction computedStyles(node) {\r\n  var target = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n  var styleList = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\r\n\r\n  if (!isNode(node)) {\r\n    throw new Error('parameter 1 is not of type \\'Element\\'');\r\n  }\r\n\r\n  if (styleList === false) return target;\r\n\r\n  if (useComputedStyles) {\r\n    var computed = node.ownerDocument.defaultView.getComputedStyle(node, null);\r\n    var keysArray = styleList === true ? computed : Object.keys(styleList);\r\n  } else {\r\n    var computed = isDefined(node.currentStyle) ? node.currentStyle : node.style;\r\n    var keysArray = styleList === true ? Object.keys(computed) : Object.keys(styleList);\r\n  }\r\n\r\n  for (var i = 0, l = keysArray.length; i < l; i++) {\r\n    var key = keysArray[i];\r\n\r\n    var def = styleList === true || styleList[key];\r\n    if (def === false || !isDefined(def)) continue; // copy never\r\n\r\n    var value = useComputedStyles ? computed.getPropertyValue(key) : computed[key];\r\n    if (typeof value !== 'string' || value === '') continue; // invalid value\r\n\r\n    if (def === true || value !== def) {\r\n      // styleList === true || styleList[key] === true || styleList[key] !== value\r\n      target[key] = value;\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nexports['default'] = computedStyles;\r\nmodule.exports = exports['default'];",null]}