{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\lint\\lint.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\lint\\lint.js","mtime":1527492762964},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod(require(\"../../lib/codemirror\"));\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"../../lib/codemirror\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n  \"use strict\";\r\n  var GUTTER_ID = \"CodeMirror-lint-markers\";\r\n\r\n  function showTooltip(e, content) {\r\n    var tt = document.createElement(\"div\");\r\n    tt.className = \"CodeMirror-lint-tooltip\";\r\n    tt.appendChild(content.cloneNode(true));\r\n    document.body.appendChild(tt);\r\n\r\n    function position(e) {\r\n      if (!tt.parentNode) return CodeMirror.off(document, \"mousemove\", position);\r\n      tt.style.top = Math.max(0, e.clientY - tt.offsetHeight - 5) + \"px\";\r\n      tt.style.left = (e.clientX + 5) + \"px\";\r\n    }\r\n    CodeMirror.on(document, \"mousemove\", position);\r\n    position(e);\r\n    if (tt.style.opacity != null) tt.style.opacity = 1;\r\n    return tt;\r\n  }\r\n  function rm(elt) {\r\n    if (elt.parentNode) elt.parentNode.removeChild(elt);\r\n  }\r\n  function hideTooltip(tt) {\r\n    if (!tt.parentNode) return;\r\n    if (tt.style.opacity == null) rm(tt);\r\n    tt.style.opacity = 0;\r\n    setTimeout(function() { rm(tt); }, 600);\r\n  }\r\n\r\n  function showTooltipFor(e, content, node) {\r\n    var tooltip = showTooltip(e, content);\r\n    function hide() {\r\n      CodeMirror.off(node, \"mouseout\", hide);\r\n      if (tooltip) { hideTooltip(tooltip); tooltip = null; }\r\n    }\r\n    var poll = setInterval(function() {\r\n      if (tooltip) for (var n = node;; n = n.parentNode) {\r\n        if (n && n.nodeType == 11) n = n.host;\r\n        if (n == document.body) return;\r\n        if (!n) { hide(); break; }\r\n      }\r\n      if (!tooltip) return clearInterval(poll);\r\n    }, 400);\r\n    CodeMirror.on(node, \"mouseout\", hide);\r\n  }\r\n\r\n  function LintState(cm, options, hasGutter) {\r\n    this.marked = [];\r\n    this.options = options;\r\n    this.timeout = null;\r\n    this.hasGutter = hasGutter;\r\n    this.onMouseOver = function(e) { onMouseOver(cm, e); };\r\n    this.waitingFor = 0\r\n  }\r\n\r\n  function parseOptions(_cm, options) {\r\n    if (options instanceof Function) return {getAnnotations: options};\r\n    if (!options || options === true) options = {};\r\n    return options;\r\n  }\r\n\r\n  function clearMarks(cm) {\r\n    var state = cm.state.lint;\r\n    if (state.hasGutter) cm.clearGutter(GUTTER_ID);\r\n    for (var i = 0; i < state.marked.length; ++i)\r\n      state.marked[i].clear();\r\n    state.marked.length = 0;\r\n  }\r\n\r\n  function makeMarker(labels, severity, multiple, tooltips) {\r\n    var marker = document.createElement(\"div\"), inner = marker;\r\n    marker.className = \"CodeMirror-lint-marker-\" + severity;\r\n    if (multiple) {\r\n      inner = marker.appendChild(document.createElement(\"div\"));\r\n      inner.className = \"CodeMirror-lint-marker-multiple\";\r\n    }\r\n\r\n    if (tooltips != false) CodeMirror.on(inner, \"mouseover\", function(e) {\r\n      showTooltipFor(e, labels, inner);\r\n    });\r\n\r\n    return marker;\r\n  }\r\n\r\n  function getMaxSeverity(a, b) {\r\n    if (a == \"error\") return a;\r\n    else return b;\r\n  }\r\n\r\n  function groupByLine(annotations) {\r\n    var lines = [];\r\n    for (var i = 0; i < annotations.length; ++i) {\r\n      var ann = annotations[i], line = ann.from.line;\r\n      (lines[line] || (lines[line] = [])).push(ann);\r\n    }\r\n    return lines;\r\n  }\r\n\r\n  function annotationTooltip(ann) {\r\n    var severity = ann.severity;\r\n    if (!severity) severity = \"error\";\r\n    var tip = document.createElement(\"div\");\r\n    tip.className = \"CodeMirror-lint-message-\" + severity;\r\n    if (typeof ann.messageHTML != 'undefined') {\r\n        tip.innerHTML = ann.messageHTML;\r\n    } else {\r\n        tip.appendChild(document.createTextNode(ann.message));\r\n    }\r\n    return tip;\r\n  }\r\n\r\n  function lintAsync(cm, getAnnotations, passOptions) {\r\n    var state = cm.state.lint\r\n    var id = ++state.waitingFor\r\n    function abort() {\r\n      id = -1\r\n      cm.off(\"change\", abort)\r\n    }\r\n    cm.on(\"change\", abort)\r\n    getAnnotations(cm.getValue(), function(annotations, arg2) {\r\n      cm.off(\"change\", abort)\r\n      if (state.waitingFor != id) return\r\n      if (arg2 && annotations instanceof CodeMirror) annotations = arg2\r\n      cm.operation(function() {updateLinting(cm, annotations)})\r\n    }, passOptions, cm);\r\n  }\r\n\r\n  function startLinting(cm) {\r\n    var state = cm.state.lint, options = state.options;\r\n    /*\r\n     * Passing rules in `options` property prevents JSHint (and other linters) from complaining\r\n     * about unrecognized rules like `onUpdateLinting`, `delay`, `lintOnChange`, etc.\r\n     */\r\n    var passOptions = options.options || options;\r\n    var getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), \"lint\");\r\n    if (!getAnnotations) return;\r\n    if (options.async || getAnnotations.async) {\r\n      lintAsync(cm, getAnnotations, passOptions)\r\n    } else {\r\n      var annotations = getAnnotations(cm.getValue(), passOptions, cm);\r\n      if (!annotations) return;\r\n      if (annotations.then) annotations.then(function(issues) {\r\n        cm.operation(function() {updateLinting(cm, issues)})\r\n      });\r\n      else cm.operation(function() {updateLinting(cm, annotations)})\r\n    }\r\n  }\r\n\r\n  function updateLinting(cm, annotationsNotSorted) {\r\n    clearMarks(cm);\r\n    var state = cm.state.lint, options = state.options;\r\n\r\n    var annotations = groupByLine(annotationsNotSorted);\r\n\r\n    for (var line = 0; line < annotations.length; ++line) {\r\n      var anns = annotations[line];\r\n      if (!anns) continue;\r\n\r\n      var maxSeverity = null;\r\n      var tipLabel = state.hasGutter && document.createDocumentFragment();\r\n\r\n      for (var i = 0; i < anns.length; ++i) {\r\n        var ann = anns[i];\r\n        var severity = ann.severity;\r\n        if (!severity) severity = \"error\";\r\n        maxSeverity = getMaxSeverity(maxSeverity, severity);\r\n\r\n        if (options.formatAnnotation) ann = options.formatAnnotation(ann);\r\n        if (state.hasGutter) tipLabel.appendChild(annotationTooltip(ann));\r\n\r\n        if (ann.to) state.marked.push(cm.markText(ann.from, ann.to, {\r\n          className: \"CodeMirror-lint-mark-\" + severity,\r\n          __annotation: ann\r\n        }));\r\n      }\r\n\r\n      if (state.hasGutter)\r\n        cm.setGutterMarker(line, GUTTER_ID, makeMarker(tipLabel, maxSeverity, anns.length > 1,\r\n                                                       state.options.tooltips));\r\n    }\r\n    if (options.onUpdateLinting) options.onUpdateLinting(annotationsNotSorted, annotations, cm);\r\n  }\r\n\r\n  function onChange(cm) {\r\n    var state = cm.state.lint;\r\n    if (!state) return;\r\n    clearTimeout(state.timeout);\r\n    state.timeout = setTimeout(function(){startLinting(cm);}, state.options.delay || 500);\r\n  }\r\n\r\n  function popupTooltips(annotations, e) {\r\n    var target = e.target || e.srcElement;\r\n    var tooltip = document.createDocumentFragment();\r\n    for (var i = 0; i < annotations.length; i++) {\r\n      var ann = annotations[i];\r\n      tooltip.appendChild(annotationTooltip(ann));\r\n    }\r\n    showTooltipFor(e, tooltip, target);\r\n  }\r\n\r\n  function onMouseOver(cm, e) {\r\n    var target = e.target || e.srcElement;\r\n    if (!/\\bCodeMirror-lint-mark-/.test(target.className)) return;\r\n    var box = target.getBoundingClientRect(), x = (box.left + box.right) / 2, y = (box.top + box.bottom) / 2;\r\n    var spans = cm.findMarksAt(cm.coordsChar({left: x, top: y}, \"client\"));\r\n\r\n    var annotations = [];\r\n    for (var i = 0; i < spans.length; ++i) {\r\n      var ann = spans[i].__annotation;\r\n      if (ann) annotations.push(ann);\r\n    }\r\n    if (annotations.length) popupTooltips(annotations, e);\r\n  }\r\n\r\n  CodeMirror.defineOption(\"lint\", false, function(cm, val, old) {\r\n    if (old && old != CodeMirror.Init) {\r\n      clearMarks(cm);\r\n      if (cm.state.lint.options.lintOnChange !== false)\r\n        cm.off(\"change\", onChange);\r\n      CodeMirror.off(cm.getWrapperElement(), \"mouseover\", cm.state.lint.onMouseOver);\r\n      clearTimeout(cm.state.lint.timeout);\r\n      delete cm.state.lint;\r\n    }\r\n\r\n    if (val) {\r\n      var gutters = cm.getOption(\"gutters\"), hasLintGutter = false;\r\n      for (var i = 0; i < gutters.length; ++i) if (gutters[i] == GUTTER_ID) hasLintGutter = true;\r\n      var state = cm.state.lint = new LintState(cm, parseOptions(cm, val), hasLintGutter);\r\n      if (state.options.lintOnChange !== false)\r\n        cm.on(\"change\", onChange);\r\n      if (state.options.tooltips != false && state.options.tooltips != \"gutter\")\r\n        CodeMirror.on(cm.getWrapperElement(), \"mouseover\", state.onMouseOver);\r\n\r\n      startLinting(cm);\r\n    }\r\n  });\r\n\r\n  CodeMirror.defineExtension(\"performLint\", function() {\r\n    if (this.state.lint) startLinting(this);\r\n  });\r\n});\r\n",null]}