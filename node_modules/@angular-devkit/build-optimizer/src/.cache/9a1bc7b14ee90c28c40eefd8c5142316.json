{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\ng2-breadcrumbs\\lib\\breadcrumbs.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\ng2-breadcrumbs\\lib\\breadcrumbs.component.js","mtime":1508235713000},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nrequire(\"rxjs/add/operator/filter\");\nvar breadcrumbs_service_1 = require(\"./breadcrumbs.service\");\nvar BreadcrumbComponent = /*@__PURE__*/ (function () {\n    function BreadcrumbComponent(breadcrumbService, activatedRoute, router) {\n        var _this = this;\n        this.breadcrumbService = breadcrumbService;\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        breadcrumbService.get().subscribe(function (breadcrumbs) {\n            _this.breadcrumbs = breadcrumbs;\n        });\n    }\n    BreadcrumbComponent.prototype.hasParams = function (breadcrumb) {\n        return Object.keys(breadcrumb.params).length ? [breadcrumb.url, breadcrumb.params] : [breadcrumb.url];\n    };\n    BreadcrumbComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        var ROUTE_DATA_BREADCRUMB = \"breadcrumb\";\n        var ROUTE_PARAM_BREADCRUMB = \"breadcrumb\";\n        var PREFIX_BREADCRUMB = \"prefixBreadcrumb\";\n        // subscribe to the NavigationEnd event\n        this.router.events.filter(function (event) { return event instanceof router_1.NavigationEnd; }).subscribe(function (event) {\n            // reset currentBreadcrumbs\n            _this.currentBreadcrumbs = [];\n            // get the root of the current route\n            var currentRoute = _this.activatedRoute.root;\n            // set the url to an empty string\n            var url = \"\";\n            var _loop_1 = function () {\n                var childrenRoutes = currentRoute.children;\n                var breadCrumbLabel = \"\";\n                // iterate over each children\n                childrenRoutes.forEach(function (route) {\n                    // Set currentRoute to this route\n                    currentRoute = route;\n                    // Verify this is the primary route\n                    if (route.outlet !== router_1.PRIMARY_OUTLET) {\n                        return;\n                    }\n                    var hasData = (route.routeConfig && route.routeConfig.data);\n                    var hasDynamicBreadcrumb = route.snapshot.params.hasOwnProperty(ROUTE_PARAM_BREADCRUMB);\n                    if (hasData || hasDynamicBreadcrumb) {\n                        /*\n                         Verify the custom data property \"breadcrumb\"\n                         is specified on the route or in its parameters.\n\r\n                         Route parameters take precedence over route data\n                         attributes.\n                         */\n                        if (hasDynamicBreadcrumb) {\n                            breadCrumbLabel = route.snapshot.params[ROUTE_PARAM_BREADCRUMB].replace(/_/g, \" \");\n                        }\n                        else if (route.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {\n                            breadCrumbLabel = route.snapshot.data[ROUTE_DATA_BREADCRUMB];\n                        }\n                        // Get the route's URL segment\n                        var routeURL = route.snapshot.url.map(function (segment) { return segment.path; }).join(\"/\");\n                        url += \"/\" + routeURL;\n                        // Cannot have parameters on a root route\n                        if (routeURL.length === 0) {\n                            route.snapshot.params = {};\n                        }\n                        // Add breadcrumb\n                        var breadcrumb = {\n                            label: breadCrumbLabel,\n                            params: route.snapshot.params,\n                            url: url\n                        };\n                        // Add the breadcrumb as 'prefixed'. It will appear before all breadcrumbs\n                        if (route.snapshot.data.hasOwnProperty(PREFIX_BREADCRUMB)) {\n                            _this.breadcrumbService.storePrefixed(breadcrumb);\n                        }\n                        else {\n                            _this.currentBreadcrumbs.push(breadcrumb);\n                        }\n                    }\n                });\n                _this.breadcrumbService.store(_this.currentBreadcrumbs);\n            };\n            // iterate from activated route to children\n            while (currentRoute.children.length > 0) {\n                _loop_1();\n            }\n        });\n    };\n    BreadcrumbComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: \"breadcrumb\",\n                    template: \"\\n        <div [ngClass]=\\\"{ 'container-fluid': allowBootstrap, 'fluid-bread': true}\\\">\\n            <div class=\\\"container\\\">\\n                <ol [ngClass]=\\\"{ 'breadcrumb': allowBootstrap}\\\" class=\\\"{{addClass ? '' + addClass : ''}}\\\">\\n                    <li *ngFor=\\\"let breadcrumb of breadcrumbs; let last = last\\\"\\n                        [ngClass]=\\\"{ 'breadcrumb-item': allowBootstrap, 'list': true, 'active': last }\\\">\\n                        <a *ngIf=\\\"!last\\\" [routerLink]=\\\"hasParams(breadcrumb)\\\">\\n                            {{breadcrumb.label}}\\n                        </a>\\n                        <span *ngIf=\\\"last\\\">{{ breadcrumb.label }}</span>\\n                    </li>\\n                </ol>\\n            </div>\\n        </div>\",\n                    styles: [\"\\n        .fluid-bread {\\n            background-color: white;\\n        }\\n\\n        .breadcrumb {\\n            background-color: white;\\n            padding: 4px;\\n            margin-bottom: 0;\\n        }\"],\n                    encapsulation: core_1.ViewEncapsulation.None\n                },] },\n    ];\n    BreadcrumbComponent.propDecorators = {\n        'allowBootstrap': [{ type: core_1.Input },],\n        'addClass': [{ type: core_1.Input },],\n    };\n    return BreadcrumbComponent;\n}());\nexports.BreadcrumbComponent = BreadcrumbComponent;\n",null]}