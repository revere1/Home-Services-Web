{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\split\\split.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\split\\split.component.js","mtime":1527490597964},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, ElementRef, HostBinding } from '@angular/core';\nimport { SplitAreaDirective } from './split-area.directive';\nimport { SplitHandleComponent } from './split-handle.component';\nvar toValue = SplitAreaDirective.basisToValue;\nvar isBasisPecent = SplitAreaDirective.isPercent;\nfunction getMinMaxPct(minBasis, maxBasis, grow, shrink, baseBasisPct, basisToPx) {\n    // minimum and maximum basis determined by max/min inputs\n    var minBasisPct = toValue(minBasis) / (isBasisPecent(minBasis) ? 1 : basisToPx);\n    var maxBasisPct = toValue(maxBasis) / (isBasisPecent(maxBasis) ? 1 : basisToPx);\n    // minimum and maximum basis determined by flex inputs\n    minBasisPct = Math.max(minBasisPct || 0, shrink === '0' ? baseBasisPct : 0);\n    maxBasisPct = Math.min(maxBasisPct || 100, grow === '0' ? baseBasisPct : 100);\n    return [minBasisPct, maxBasisPct];\n}\nvar SplitComponent = /*@__PURE__*/ (function () {\n    function SplitComponent(elementRef) {\n        this.elementRef = elementRef;\n        /*tslint:disable*/\n        this.direction = 'row';\n    }\n    Object.defineProperty(SplitComponent.prototype, \"mainCss\", {\n        /*tslint:enable*/\n        get: function () { return true; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitComponent.prototype, \"rowCss\", {\n        get: function () { return this.direction === 'row'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SplitComponent.prototype, \"columnCss\", {\n        get: function () { return this.direction === 'column'; },\n        enumerable: true,\n        configurable: true\n    });\n    SplitComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.handles.forEach(function (d) { return d.drag.subscribe(function (ev) { return _this.onDrag(ev); }); });\n        this.handles.forEach(function (d) { return d.dblclick.subscribe(function (ev) { return _this.onDblClick(ev); }); });\n    };\n    SplitComponent.prototype.onDblClick = function (ev) {\n        var basisToPx = (this.direction === 'row' ?\n            this.elementRef.nativeElement.clientWidth :\n            this.elementRef.nativeElement.clientHeight) / 100;\n        var area = this.areas.first;\n        if (!area)\n            return;\n        var _a = area.getFlexParts(), grow = _a[0], shrink = _a[1], basis = _a[2];\n        var isPercent = isBasisPecent(basis);\n        var basisValue = toValue(basis);\n        // get basis in px and %\n        var basisPx = isPercent ? basisValue * basisToPx : basisValue;\n        var basisPct = basisPx / basisToPx;\n        // get baseBasis in percent\n        var baseBasis = area.getInputFlexParts()[2];\n        var baseBasisPct = toValue(baseBasis) / (isBasisPecent(baseBasis) ? basisToPx : 1);\n        var _b = getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx), minBasisPct = _b[0], maxBasisPct = _b[1];\n        // max and min deltas\n        var deltaMin = basisPct - minBasisPct;\n        var deltaMax = maxBasisPct - basisPct;\n        var delta = (deltaMin < deltaMax) ? deltaMax : -deltaMin;\n        var deltaPx = delta * basisToPx;\n        this.resize(deltaPx);\n    };\n    SplitComponent.prototype.onDrag = function (_a) {\n        var movementX = _a.movementX, movementY = _a.movementY;\n        var deltaPx = this.direction === 'row' ? movementX : movementY;\n        this.resize(deltaPx);\n    };\n    SplitComponent.prototype.resize = function (delta) {\n        var basisToPx = (this.direction === 'row' ?\n            this.elementRef.nativeElement.clientWidth :\n            this.elementRef.nativeElement.clientHeight) / 100;\n        var areas = this.areas.toArray();\n        // for now assuming splitter is after first area\n        var first = areas[0], rest = areas.slice(1);\n        [first].forEach(function (area) { return delta = resizeAreaBy(area, delta); });\n        // delta is distributed left to right\n        return rest.forEach(function (area) { return delta += resizeAreaBy(area, -delta); });\n        function resizeAreaBy(area, _delta) {\n            var flex = area.flexDirective;\n            if (area.fxFlexFill) {\n                // area is fxFlexFill, distribute delta right\n                return _delta;\n            }\n            var _a = area.getFlexParts(), grow = _a[0], shrink = _a[1], basis = _a[2];\n            var isPercent = isBasisPecent(basis);\n            var basisValue = toValue(basis);\n            // get baseBasis in percent\n            var baseBasis = area.getInputFlexParts()[2];\n            var baseBasisPct = toValue(baseBasis) / (isBasisPecent(baseBasis) ? basisToPx : 1);\n            // get basis in px and %\n            var basisPx = isPercent ? basisValue * basisToPx : basisValue;\n            var basisPct = basisPx / basisToPx;\n            // determine which dir and calc the diff\n            var newBasisPx = basisPx + _delta;\n            var newBasisPct = newBasisPx / basisToPx;\n            var _b = getMinMaxPct(area.minBasis, area.maxBasis, grow, shrink, baseBasisPct, basisToPx), minBasisPct = _b[0], maxBasisPct = _b[1];\n            // obey max and min\n            newBasisPct = Math.max(newBasisPct, minBasisPct);\n            newBasisPct = Math.min(newBasisPct, maxBasisPct);\n            // calculate new basis on px\n            newBasisPx = newBasisPct * basisToPx;\n            // update flexlayout\n            area.updateStyle(isPercent ? newBasisPct : newBasisPx);\n            // return actual change in px\n            return newBasisPx - basisPx;\n        }\n    };\n    return SplitComponent;\n}());\nexport { SplitComponent };\n//# sourceMappingURL=split.component.js.map\n",null]}