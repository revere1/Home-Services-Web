{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\pipes\\json-tree.pipe.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\pipes\\json-tree.pipe.js","mtime":1527490620325},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { Pipe } from '@angular/core';\nvar JSONTreePipe = /*@__PURE__*/ (function () {\n    function JSONTreePipe() {\n    }\n    JSONTreePipe.prototype.transform = function (input) {\n        return [jsonToTree(input)];\n    };\n    return JSONTreePipe;\n}());\nexport { JSONTreePipe };\nfunction jsonToTree(value, label) {\n    var type = getType(value);\n    var children;\n    var expandable = false;\n    if (typeof label === 'undefined') {\n        label = label || type;\n    }\n    switch (type) {\n        case 'object':\n            children = Object.keys(value).map(function (key) { return jsonToTree(value[key], key); });\n            expandable = children.length > 0;\n            return {\n                label: label,\n                expandable: expandable,\n                expanded: true,\n                model: { type: type, value: value, expandable: expandable },\n                children: children\n            };\n        case 'array':\n            children = value.map(jsonToTree);\n            expandable = children.length > 0;\n            return {\n                label: label,\n                expandable: expandable,\n                expanded: true,\n                model: { type: type, value: value, expandable: expandable },\n                children: children\n            };\n        default:\n            return {\n                label: label,\n                expandable: expandable,\n                model: { type: type, value: value, expandable: expandable }\n            };\n    }\n}\nfunction getType(item) {\n    if (item == null) {\n        return 'null';\n    }\n    return Array.isArray(item) ? 'array' : typeof item;\n}\n//# sourceMappingURL=json-tree.pipe.js.map\n",null]}