{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\input\\input.component.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\input\\input.component.js","mtime":1527492758386},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, trigger, HostBinding, state, style, transition, animate, ViewEncapsulation, forwardRef, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NgModel } from '@angular/forms';\nimport { InputTypes } from './input-types';\nvar nextId = 0;\nvar INPUT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return InputComponent; }),\n    multi: true\n};\nvar InputComponent = /*@__PURE__*/ (function () {\n    function InputComponent(cd) {\n        this.cd = cd;\n        this.id = \"input-\" + ++nextId;\n        this.label = '';\n        this.type = InputTypes.text;\n        this.placeholder = '';\n        this.disabled = false;\n        this.required = false;\n        this.requiredIndicator = '*';\n        this.passwordToggleEnabled = false;\n        this.passwordTextVisible = false;\n        this.autoSelect = false;\n        this.autofocus = false;\n        this.autocomplete = false;\n        this.autocorrect = false;\n        this.spellcheck = false;\n        this.change = new EventEmitter();\n        this.blur = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.keyup = new EventEmitter();\n        this.click = new EventEmitter();\n        this.focused = false;\n        this.onTouchedCallback = function () {\n            // placeholder\n        };\n        this.onChangeCallback = function () {\n            // placeholder\n        };\n    }\n    Object.defineProperty(InputComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (val) {\n            if (val !== this._value) {\n                this._value = val;\n                this.onChangeCallback(this._value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"focusedOrDirty\", {\n        get: function () {\n            if (this.focused) {\n                return true;\n            }\n            if (typeof this.value === 'string') {\n                return this.value && this.value.length;\n            }\n            return typeof this.value !== 'undefined' && this.value !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"getHostCssClasses\", {\n        get: function () {\n            return 'ngx-input';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"isInvalid\", {\n        get: function () {\n            return this.inputModel &&\n                this.inputModel.invalid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"isValid\", {\n        get: function () {\n            return this.inputModel &&\n                this.inputModel.valid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"isTouched\", {\n        get: function () {\n            return this.inputModel &&\n                this.inputModel.touched;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"getCssClasses\", {\n        get: function () {\n            if (!this.inputModel)\n                return {};\n            return {\n                'ng-invalid': this.isInvalid,\n                'ng-touched': this.isTouched,\n                'ng-valid': this.isValid\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"labelState\", {\n        get: function () {\n            if (this.placeholder)\n                return 'outside';\n            if (this.focusedOrDirty)\n                return 'outside';\n            return 'inside';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"underlineState\", {\n        get: function () {\n            if (this.focused)\n                return 'expanded';\n            return 'collapsed';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"requiredIndicatorView\", {\n        get: function () {\n            if (!this.requiredIndicator || !this.required)\n                return '';\n            return this.requiredIndicator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InputComponent.prototype, \"element\", {\n        get: function () {\n            if (this.type === InputTypes.textarea)\n                return this.textareaControl;\n            return this.inputControl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    InputComponent.prototype.ngOnInit = function () {\n        if (!this.value)\n            this.value = '';\n    };\n    InputComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.autofocus) {\n            setTimeout(function () {\n                _this.element.nativeElement.focus();\n            });\n        }\n        // sometimes the label doesn't update on load\n        setTimeout(function () { return _this.cd.markForCheck(); });\n    };\n    InputComponent.prototype.onChange = function (event) {\n        event.stopPropagation();\n        this.change.emit(this.value);\n    };\n    InputComponent.prototype.onKeyUp = function (event) {\n        event.stopPropagation();\n        this.keyup.emit(event);\n    };\n    InputComponent.prototype.onFocus = function (event) {\n        var _this = this;\n        event.stopPropagation();\n        if (this.autoSelect) {\n            setTimeout(function () {\n                _this.element.nativeElement.select();\n            });\n        }\n        this.focused = true;\n        this.focus.emit(event);\n        this.onTouchedCallback();\n    };\n    InputComponent.prototype.onBlur = function (event) {\n        event.stopPropagation();\n        this.focused = false;\n        this.blur.emit(event);\n    };\n    InputComponent.prototype.writeValue = function (val) {\n        if (val !== this._value) {\n            this._value = val;\n        }\n    };\n    InputComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    InputComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    InputComponent.prototype.togglePassword = function () {\n        var _this = this;\n        this.passwordTextVisible = !this.passwordTextVisible;\n        setTimeout(function () {\n            if (_this.passwordTextVisible) {\n                _this.passwordControl.nativeElement.focus();\n            }\n            else {\n                _this.element.nativeElement.focus();\n            }\n        });\n    };\n    return InputComponent;\n}());\nexport { InputComponent };\n//# sourceMappingURL=input.component.js.map\n",null]}