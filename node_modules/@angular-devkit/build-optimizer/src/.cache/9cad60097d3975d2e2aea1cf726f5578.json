{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-format\\src\\formatSpecifier.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-format\\src\\formatSpecifier.js","mtime":1527492764777},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import formatTypes from \"./formatTypes\";\r\n\r\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\r\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\r\n\r\nexport default function formatSpecifier(specifier) {\r\n  return new FormatSpecifier(specifier);\r\n}\r\n\r\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\r\n\r\nfunction FormatSpecifier(specifier) {\r\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\r\n\r\n  var match,\r\n      fill = match[1] || \" \",\r\n      align = match[2] || \">\",\r\n      sign = match[3] || \"-\",\r\n      symbol = match[4] || \"\",\r\n      zero = !!match[5],\r\n      width = match[6] && +match[6],\r\n      comma = !!match[7],\r\n      precision = match[8] && +match[8].slice(1),\r\n      type = match[9] || \"\";\r\n\r\n  // The \"n\" type is an alias for \",g\".\r\n  if (type === \"n\") comma = true, type = \"g\";\r\n\r\n  // Map invalid types to the default format.\r\n  else if (!formatTypes[type]) type = \"\";\r\n\r\n  // If zero fill is specified, padding goes after sign and before digits.\r\n  if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\r\n\r\n  this.fill = fill;\r\n  this.align = align;\r\n  this.sign = sign;\r\n  this.symbol = symbol;\r\n  this.zero = zero;\r\n  this.width = width;\r\n  this.comma = comma;\r\n  this.precision = precision;\r\n  this.type = type;\r\n}\r\n\r\nFormatSpecifier.prototype.toString = function() {\r\n  return this.fill\r\n      + this.align\r\n      + this.sign\r\n      + this.symbol\r\n      + (this.zero ? \"0\" : \"\")\r\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\r\n      + (this.comma ? \",\" : \"\")\r\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\r\n      + this.type;\r\n};\r\n",null]}