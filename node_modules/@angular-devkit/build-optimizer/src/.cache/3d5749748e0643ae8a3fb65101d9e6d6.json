{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\rxjs\\operator\\take.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\rxjs\\operator\\take.js","mtime":1527492784673},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["\"use strict\";\r\nvar take_1 = require('../operators/take');\r\n/**\r\n * Emits only the first `count` values emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Takes the first `count` values from the source, then\r\n * completes.</span>\r\n *\r\n * <img src=\"./img/take.png\" width=\"100%\">\r\n *\r\n * `take` returns an Observable that emits only the first `count` values emitted\r\n * by the source Observable. If the source emits fewer than `count` values then\r\n * all of its values are emitted. After that, it completes, regardless if the\r\n * source completes.\r\n *\r\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\r\n * var interval = Rx.Observable.interval(1000);\r\n * var five = interval.take(5);\r\n * five.subscribe(x => console.log(x));\r\n *\r\n * @see {@link takeLast}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\r\n *\r\n * @param {number} count The maximum number of `next` values to emit.\r\n * @return {Observable<T>} An Observable that emits only the first `count`\r\n * values emitted by the source Observable, or all of the values from the source\r\n * if the source emits fewer than `count` values.\r\n * @method take\r\n * @owner Observable\r\n */\r\nfunction take(count) {\r\n    return take_1.take(count)(this);\r\n}\r\nexports.take = take;\r\n//# sourceMappingURL=take.js.map",null]}