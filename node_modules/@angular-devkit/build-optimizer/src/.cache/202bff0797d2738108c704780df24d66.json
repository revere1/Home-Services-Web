{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-scale\\src\\log.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-scale\\src\\log.js","mtime":1527492764950},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import {ticks} from \"d3-array\";\r\nimport {format} from \"d3-format\";\r\nimport constant from \"./constant\";\r\nimport nice from \"./nice\";\r\nimport {default as continuous, copy} from \"./continuous\";\r\n\r\nfunction deinterpolate(a, b) {\r\n  return (b = Math.log(b / a))\r\n      ? function(x) { return Math.log(x / a) / b; }\r\n      : constant(b);\r\n}\r\n\r\nfunction reinterpolate(a, b) {\r\n  return a < 0\r\n      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\r\n      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\r\n}\r\n\r\nfunction pow10(x) {\r\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\r\n}\r\n\r\nfunction powp(base) {\r\n  return base === 10 ? pow10\r\n      : base === Math.E ? Math.exp\r\n      : function(x) { return Math.pow(base, x); };\r\n}\r\n\r\nfunction logp(base) {\r\n  return base === Math.E ? Math.log\r\n      : base === 10 && Math.log10\r\n      || base === 2 && Math.log2\r\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\r\n}\r\n\r\nfunction reflect(f) {\r\n  return function(x) {\r\n    return -f(-x);\r\n  };\r\n}\r\n\r\nexport default function log() {\r\n  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),\r\n      domain = scale.domain,\r\n      base = 10,\r\n      logs = logp(10),\r\n      pows = powp(10);\r\n\r\n  function rescale() {\r\n    logs = logp(base), pows = powp(base);\r\n    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\r\n    return scale;\r\n  }\r\n\r\n  scale.base = function(_) {\r\n    return arguments.length ? (base = +_, rescale()) : base;\r\n  };\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (domain(_), rescale()) : domain();\r\n  };\r\n\r\n  scale.ticks = function(count) {\r\n    var d = domain(),\r\n        u = d[0],\r\n        v = d[d.length - 1],\r\n        r;\r\n\r\n    if (r = v < u) i = u, u = v, v = i;\r\n\r\n    var i = logs(u),\r\n        j = logs(v),\r\n        p,\r\n        k,\r\n        t,\r\n        n = count == null ? 10 : +count,\r\n        z = [];\r\n\r\n    if (!(base % 1) && j - i < n) {\r\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\r\n      if (u > 0) for (; i < j; ++i) {\r\n        for (k = 1, p = pows(i); k < base; ++k) {\r\n          t = p * k;\r\n          if (t < u) continue;\r\n          if (t > v) break;\r\n          z.push(t);\r\n        }\r\n      } else for (; i < j; ++i) {\r\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\r\n          t = p * k;\r\n          if (t < u) continue;\r\n          if (t > v) break;\r\n          z.push(t);\r\n        }\r\n      }\r\n    } else {\r\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\r\n    }\r\n\r\n    return r ? z.reverse() : z;\r\n  };\r\n\r\n  scale.tickFormat = function(count, specifier) {\r\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\r\n    if (typeof specifier !== \"function\") specifier = format(specifier);\r\n    if (count === Infinity) return specifier;\r\n    if (count == null) count = 10;\r\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\r\n    return function(d) {\r\n      var i = d / pows(Math.round(logs(d)));\r\n      if (i * base < base - 0.5) i *= base;\r\n      return i <= k ? specifier(d) : \"\";\r\n    };\r\n  };\r\n\r\n  scale.nice = function() {\r\n    return domain(nice(domain(), {\r\n      floor: function(x) { return pows(Math.floor(logs(x))); },\r\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\r\n    }));\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return copy(scale, log().base(base));\r\n  };\r\n\r\n  return scale;\r\n}\r\n",null]}