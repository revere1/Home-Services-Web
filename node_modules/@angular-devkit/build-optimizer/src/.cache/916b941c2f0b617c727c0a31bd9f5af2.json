{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\rxjs\\operator\\takeLast.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\rxjs\\operator\\takeLast.js","mtime":1527492784674},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["\"use strict\";\r\nvar takeLast_1 = require('../operators/takeLast');\r\n/**\r\n * Emits only the last `count` values emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\r\n * only when the source completes.</span>\r\n *\r\n * <img src=\"./img/takeLast.png\" width=\"100%\">\r\n *\r\n * `takeLast` returns an Observable that emits at most the last `count` values\r\n * emitted by the source Observable. If the source emits fewer than `count`\r\n * values then all of its values are emitted. This operator must wait until the\r\n * `complete` notification emission from the source in order to emit the `next`\r\n * values on the output Observable, because otherwise it is impossible to know\r\n * whether or not more values will be emitted on the source. For this reason,\r\n * all values are emitted synchronously, followed by the complete notification.\r\n *\r\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\r\n * var many = Rx.Observable.range(1, 100);\r\n * var lastThree = many.takeLast(3);\r\n * lastThree.subscribe(x => console.log(x));\r\n *\r\n * @see {@link take}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\r\n *\r\n * @param {number} count The maximum number of values to emit from the end of\r\n * the sequence of values emitted by the source Observable.\r\n * @return {Observable<T>} An Observable that emits at most the last count\r\n * values emitted by the source Observable.\r\n * @method takeLast\r\n * @owner Observable\r\n */\r\nfunction takeLast(count) {\r\n    return takeLast_1.takeLast(count)(this);\r\n}\r\nexports.takeLast = takeLast;\r\n//# sourceMappingURL=takeLast.js.map",null]}