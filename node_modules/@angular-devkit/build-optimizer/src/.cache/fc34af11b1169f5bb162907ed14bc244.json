{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-scale\\src\\quantize.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-scale\\src\\quantize.js","mtime":1527492764952},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import {bisect} from \"d3-array\";\r\nimport {slice} from \"./array\";\r\nimport {linearish} from \"./linear\";\r\n\r\nexport default function quantize() {\r\n  var x0 = 0,\r\n      x1 = 1,\r\n      n = 1,\r\n      domain = [0.5],\r\n      range = [0, 1];\r\n\r\n  function scale(x) {\r\n    if (x <= x) return range[bisect(domain, x, 0, n)];\r\n  }\r\n\r\n  function rescale() {\r\n    var i = -1;\r\n    domain = new Array(n);\r\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\r\n    return scale;\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\r\n  };\r\n\r\n  scale.range = function(_) {\r\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\r\n  };\r\n\r\n  scale.invertExtent = function(y) {\r\n    var i = range.indexOf(y);\r\n    return i < 0 ? [NaN, NaN]\r\n        : i < 1 ? [x0, domain[0]]\r\n        : i >= n ? [domain[n - 1], x1]\r\n        : [domain[i - 1], domain[i]];\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return quantize()\r\n        .domain([x0, x1])\r\n        .range(range);\r\n  };\r\n\r\n  return linearish(scale);\r\n}\r\n",null]}