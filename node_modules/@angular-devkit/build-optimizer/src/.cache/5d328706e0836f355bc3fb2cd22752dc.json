{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-hierarchy\\src\\treemap\\index.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-hierarchy\\src\\treemap\\index.js","mtime":1527492764848},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import roundNode from \"./round\";\r\nimport squarify from \"./squarify\";\r\nimport {required} from \"../accessors\";\r\nimport constant, {constantZero} from \"../constant\";\r\n\r\nexport default function() {\r\n  var tile = squarify,\r\n      round = false,\r\n      dx = 1,\r\n      dy = 1,\r\n      paddingStack = [0],\r\n      paddingInner = constantZero,\r\n      paddingTop = constantZero,\r\n      paddingRight = constantZero,\r\n      paddingBottom = constantZero,\r\n      paddingLeft = constantZero;\r\n\r\n  function treemap(root) {\r\n    root.x0 =\r\n    root.y0 = 0;\r\n    root.x1 = dx;\r\n    root.y1 = dy;\r\n    root.eachBefore(positionNode);\r\n    paddingStack = [0];\r\n    if (round) root.eachBefore(roundNode);\r\n    return root;\r\n  }\r\n\r\n  function positionNode(node) {\r\n    var p = paddingStack[node.depth],\r\n        x0 = node.x0 + p,\r\n        y0 = node.y0 + p,\r\n        x1 = node.x1 - p,\r\n        y1 = node.y1 - p;\r\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n    node.x0 = x0;\r\n    node.y0 = y0;\r\n    node.x1 = x1;\r\n    node.y1 = y1;\r\n    if (node.children) {\r\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\r\n      x0 += paddingLeft(node) - p;\r\n      y0 += paddingTop(node) - p;\r\n      x1 -= paddingRight(node) - p;\r\n      y1 -= paddingBottom(node) - p;\r\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\r\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\r\n      tile(node, x0, y0, x1, y1);\r\n    }\r\n  }\r\n\r\n  treemap.round = function(x) {\r\n    return arguments.length ? (round = !!x, treemap) : round;\r\n  };\r\n\r\n  treemap.size = function(x) {\r\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\r\n  };\r\n\r\n  treemap.tile = function(x) {\r\n    return arguments.length ? (tile = required(x), treemap) : tile;\r\n  };\r\n\r\n  treemap.padding = function(x) {\r\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\r\n  };\r\n\r\n  treemap.paddingInner = function(x) {\r\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\r\n  };\r\n\r\n  treemap.paddingOuter = function(x) {\r\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\r\n  };\r\n\r\n  treemap.paddingTop = function(x) {\r\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\r\n  };\r\n\r\n  treemap.paddingRight = function(x) {\r\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\r\n  };\r\n\r\n  treemap.paddingBottom = function(x) {\r\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\r\n  };\r\n\r\n  treemap.paddingLeft = function(x) {\r\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\r\n  };\r\n\r\n  return treemap;\r\n}\r\n",null]}