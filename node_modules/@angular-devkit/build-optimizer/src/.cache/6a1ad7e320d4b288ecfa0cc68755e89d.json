{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-quadtree\\src\\cover.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-quadtree\\src\\cover.js","mtime":1527492764904},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["export default function(x, y) {\r\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\r\n\r\n  var x0 = this._x0,\r\n      y0 = this._y0,\r\n      x1 = this._x1,\r\n      y1 = this._y1;\r\n\r\n  // If the quadtree has no extent, initialize them.\r\n  // Integer extent are necessary so that if we later double the extent,\r\n  // the existing quadrant boundaries donâ€™t change due to floating point error!\r\n  if (isNaN(x0)) {\r\n    x1 = (x0 = Math.floor(x)) + 1;\r\n    y1 = (y0 = Math.floor(y)) + 1;\r\n  }\r\n\r\n  // Otherwise, double repeatedly to cover.\r\n  else if (x0 > x || x > x1 || y0 > y || y > y1) {\r\n    var z = x1 - x0,\r\n        node = this._root,\r\n        parent,\r\n        i;\r\n\r\n    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\r\n      case 0: {\r\n        do parent = new Array(4), parent[i] = node, node = parent;\r\n        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\r\n        break;\r\n      }\r\n      case 1: {\r\n        do parent = new Array(4), parent[i] = node, node = parent;\r\n        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\r\n        break;\r\n      }\r\n      case 2: {\r\n        do parent = new Array(4), parent[i] = node, node = parent;\r\n        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\r\n        break;\r\n      }\r\n      case 3: {\r\n        do parent = new Array(4), parent[i] = node, node = parent;\r\n        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (this._root && this._root.length) this._root = node;\r\n  }\r\n\r\n  // If the quadtree covers the point already, just return.\r\n  else return this;\r\n\r\n  this._x0 = x0;\r\n  this._y0 = y0;\r\n  this._x1 = x1;\r\n  this._y1 = y1;\r\n  return this;\r\n}\r\n",null]}