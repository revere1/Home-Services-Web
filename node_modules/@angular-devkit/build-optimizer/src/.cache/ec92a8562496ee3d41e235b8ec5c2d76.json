{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-selection\\src\\selection\\on.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-selection\\src\\selection\\on.js","mtime":1527492764970},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["var filterEvents = {};\r\n\r\nexport var event = null;\r\n\r\nif (typeof document !== \"undefined\") {\r\n  var element = document.documentElement;\r\n  if (!(\"onmouseenter\" in element)) {\r\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\r\n  }\r\n}\r\n\r\nfunction filterContextListener(listener, index, group) {\r\n  listener = contextListener(listener, index, group);\r\n  return function(event) {\r\n    var related = event.relatedTarget;\r\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\r\n      listener.call(this, event);\r\n    }\r\n  };\r\n}\r\n\r\nfunction contextListener(listener, index, group) {\r\n  return function(event1) {\r\n    var event0 = event; // Events can be reentrant (e.g., focus).\r\n    event = event1;\r\n    try {\r\n      listener.call(this, this.__data__, index, group);\r\n    } finally {\r\n      event = event0;\r\n    }\r\n  };\r\n}\r\n\r\nfunction parseTypenames(typenames) {\r\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\r\n    var name = \"\", i = t.indexOf(\".\");\r\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\r\n    return {type: t, name: name};\r\n  });\r\n}\r\n\r\nfunction onRemove(typename) {\r\n  return function() {\r\n    var on = this.__on;\r\n    if (!on) return;\r\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\r\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\r\n        this.removeEventListener(o.type, o.listener, o.capture);\r\n      } else {\r\n        on[++i] = o;\r\n      }\r\n    }\r\n    if (++i) on.length = i;\r\n    else delete this.__on;\r\n  };\r\n}\r\n\r\nfunction onAdd(typename, value, capture) {\r\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\r\n  return function(d, i, group) {\r\n    var on = this.__on, o, listener = wrap(value, i, group);\r\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\r\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\r\n        this.removeEventListener(o.type, o.listener, o.capture);\r\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\r\n        o.value = value;\r\n        return;\r\n      }\r\n    }\r\n    this.addEventListener(typename.type, listener, capture);\r\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\r\n    if (!on) this.__on = [o];\r\n    else on.push(o);\r\n  };\r\n}\r\n\r\nexport default function(typename, value, capture) {\r\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\r\n\r\n  if (arguments.length < 2) {\r\n    var on = this.node().__on;\r\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\r\n      for (i = 0, o = on[j]; i < n; ++i) {\r\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\r\n          return o.value;\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  on = value ? onAdd : onRemove;\r\n  if (capture == null) capture = false;\r\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\r\n  return this;\r\n}\r\n\r\nexport function customEvent(event1, listener, that, args) {\r\n  var event0 = event;\r\n  event1.sourceEvent = event;\r\n  event = event1;\r\n  try {\r\n    return listener.apply(that, args);\r\n  } finally {\r\n    event = event0;\r\n  }\r\n}\r\n",null]}