{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-force\\src\\link.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-force\\src\\link.js","mtime":1527492764751},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import constant from \"./constant\";\r\nimport jiggle from \"./jiggle\";\r\nimport {map} from \"d3-collection\";\r\n\r\nfunction index(d) {\r\n  return d.index;\r\n}\r\n\r\nfunction find(nodeById, nodeId) {\r\n  var node = nodeById.get(nodeId);\r\n  if (!node) throw new Error(\"missing: \" + nodeId);\r\n  return node;\r\n}\r\n\r\nexport default function(links) {\r\n  var id = index,\r\n      strength = defaultStrength,\r\n      strengths,\r\n      distance = constant(30),\r\n      distances,\r\n      nodes,\r\n      count,\r\n      bias,\r\n      iterations = 1;\r\n\r\n  if (links == null) links = [];\r\n\r\n  function defaultStrength(link) {\r\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\r\n  }\r\n\r\n  function force(alpha) {\r\n    for (var k = 0, n = links.length; k < iterations; ++k) {\r\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\r\n        link = links[i], source = link.source, target = link.target;\r\n        x = target.x + target.vx - source.x - source.vx || jiggle();\r\n        y = target.y + target.vy - source.y - source.vy || jiggle();\r\n        l = Math.sqrt(x * x + y * y);\r\n        l = (l - distances[i]) / l * alpha * strengths[i];\r\n        x *= l, y *= l;\r\n        target.vx -= x * (b = bias[i]);\r\n        target.vy -= y * b;\r\n        source.vx += x * (b = 1 - b);\r\n        source.vy += y * b;\r\n      }\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n\r\n    var i,\r\n        n = nodes.length,\r\n        m = links.length,\r\n        nodeById = map(nodes, id),\r\n        link;\r\n\r\n    for (i = 0, count = new Array(n); i < m; ++i) {\r\n      link = links[i], link.index = i;\r\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\r\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\r\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\r\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\r\n    }\r\n\r\n    for (i = 0, bias = new Array(m); i < m; ++i) {\r\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\r\n    }\r\n\r\n    strengths = new Array(m), initializeStrength();\r\n    distances = new Array(m), initializeDistance();\r\n  }\r\n\r\n  function initializeStrength() {\r\n    if (!nodes) return;\r\n\r\n    for (var i = 0, n = links.length; i < n; ++i) {\r\n      strengths[i] = +strength(links[i], i, links);\r\n    }\r\n  }\r\n\r\n  function initializeDistance() {\r\n    if (!nodes) return;\r\n\r\n    for (var i = 0, n = links.length; i < n; ++i) {\r\n      distances[i] = +distance(links[i], i, links);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _;\r\n    initialize();\r\n  };\r\n\r\n  force.links = function(_) {\r\n    return arguments.length ? (links = _, initialize(), force) : links;\r\n  };\r\n\r\n  force.id = function(_) {\r\n    return arguments.length ? (id = _, force) : id;\r\n  };\r\n\r\n  force.iterations = function(_) {\r\n    return arguments.length ? (iterations = +_, force) : iterations;\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\r\n  };\r\n\r\n  force.distance = function(_) {\r\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\r\n  };\r\n\r\n  return force;\r\n}\r\n",null]}