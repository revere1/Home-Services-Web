{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\search\\search.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\search\\search.js","mtime":1527492762973},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n// Define search commands. Depends on dialog.js or another\r\n// implementation of the openDialog method.\r\n\r\n// Replace works a little oddly -- it will do the replace on the next\r\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\r\n// replace by making sure the match is no longer selected when hitting\r\n// Ctrl-G.\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n  \"use strict\";\r\n\r\n  function searchOverlay(query, caseInsensitive) {\r\n    if (typeof query == \"string\")\r\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\r\n    else if (!query.global)\r\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\r\n\r\n    return {token: function(stream) {\r\n      query.lastIndex = stream.pos;\r\n      var match = query.exec(stream.string);\r\n      if (match && match.index == stream.pos) {\r\n        stream.pos += match[0].length || 1;\r\n        return \"searching\";\r\n      } else if (match) {\r\n        stream.pos = match.index;\r\n      } else {\r\n        stream.skipToEnd();\r\n      }\r\n    }};\r\n  }\r\n\r\n  function SearchState() {\r\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\r\n    this.overlay = null;\r\n  }\r\n\r\n  function getSearchState(cm) {\r\n    return cm.state.search || (cm.state.search = new SearchState());\r\n  }\r\n\r\n  function queryCaseInsensitive(query) {\r\n    return typeof query == \"string\" && query == query.toLowerCase();\r\n  }\r\n\r\n  function getSearchCursor(cm, query, pos) {\r\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\r\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\r\n  }\r\n\r\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\r\n    cm.openDialog(text, onEnter, {\r\n      value: deflt,\r\n      selectValueOnOpen: true,\r\n      closeOnEnter: false,\r\n      onClose: function() { clearSearch(cm); },\r\n      onKeyDown: onKeyDown\r\n    });\r\n  }\r\n\r\n  function dialog(cm, text, shortText, deflt, f) {\r\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\r\n    else f(prompt(shortText, deflt));\r\n  }\r\n\r\n  function confirmDialog(cm, text, shortText, fs) {\r\n    if (cm.openConfirm) cm.openConfirm(text, fs);\r\n    else if (confirm(shortText)) fs[0]();\r\n  }\r\n\r\n  function parseString(string) {\r\n    return string.replace(/\\\\(.)/g, function(_, ch) {\r\n      if (ch == \"n\") return \"\\n\"\r\n      if (ch == \"r\") return \"\\r\"\r\n      return ch\r\n    })\r\n  }\r\n\r\n  function parseQuery(query) {\r\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\r\n    if (isRE) {\r\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\r\n      catch(e) {} // Not a regular expression after all, do a string search\r\n    } else {\r\n      query = parseString(query)\r\n    }\r\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\r\n      query = /x^/;\r\n    return query;\r\n  }\r\n\r\n  var queryDialog =\r\n    '<span class=\"CodeMirror-search-label\">Search:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\r\n\r\n  function startSearch(cm, state, query) {\r\n    state.queryText = query;\r\n    state.query = parseQuery(query);\r\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\r\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\r\n    cm.addOverlay(state.overlay);\r\n    if (cm.showMatchesOnScrollbar) {\r\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\r\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\r\n    }\r\n  }\r\n\r\n  function doSearch(cm, rev, persistent, immediate) {\r\n    var state = getSearchState(cm);\r\n    if (state.query) return findNext(cm, rev);\r\n    var q = cm.getSelection() || state.lastQuery;\r\n    if (q instanceof RegExp && q.source == \"x^\") q = null\r\n    if (persistent && cm.openDialog) {\r\n      var hiding = null\r\n      var searchNext = function(query, event) {\r\n        CodeMirror.e_stop(event);\r\n        if (!query) return;\r\n        if (query != state.queryText) {\r\n          startSearch(cm, state, query);\r\n          state.posFrom = state.posTo = cm.getCursor();\r\n        }\r\n        if (hiding) hiding.style.opacity = 1\r\n        findNext(cm, event.shiftKey, function(_, to) {\r\n          var dialog\r\n          if (to.line < 3 && document.querySelector &&\r\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\r\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\r\n            (hiding = dialog).style.opacity = .4\r\n        })\r\n      };\r\n      persistentDialog(cm, queryDialog, q, searchNext, function(event, query) {\r\n        var keyName = CodeMirror.keyName(event)\r\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\r\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\r\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\r\n          CodeMirror.e_stop(event);\r\n          startSearch(cm, getSearchState(cm), query);\r\n          cm.execCommand(cmd);\r\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\r\n          CodeMirror.e_stop(event);\r\n          searchNext(query, event);\r\n        }\r\n      });\r\n      if (immediate && q) {\r\n        startSearch(cm, state, q);\r\n        findNext(cm, rev);\r\n      }\r\n    } else {\r\n      dialog(cm, queryDialog, \"Search for:\", q, function(query) {\r\n        if (query && !state.query) cm.operation(function() {\r\n          startSearch(cm, state, query);\r\n          state.posFrom = state.posTo = cm.getCursor();\r\n          findNext(cm, rev);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  function findNext(cm, rev, callback) {cm.operation(function() {\r\n    var state = getSearchState(cm);\r\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\r\n    if (!cursor.find(rev)) {\r\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\r\n      if (!cursor.find(rev)) return;\r\n    }\r\n    cm.setSelection(cursor.from(), cursor.to());\r\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\r\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\r\n    if (callback) callback(cursor.from(), cursor.to())\r\n  });}\r\n\r\n  function clearSearch(cm) {cm.operation(function() {\r\n    var state = getSearchState(cm);\r\n    state.lastQuery = state.query;\r\n    if (!state.query) return;\r\n    state.query = state.queryText = null;\r\n    cm.removeOverlay(state.overlay);\r\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\r\n  });}\r\n\r\n  var replaceQueryDialog =\r\n    ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use /re/ syntax for regexp search)</span>';\r\n  var replacementQueryDialog = '<span class=\"CodeMirror-search-label\">With:</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\r\n  var doReplaceConfirm = '<span class=\"CodeMirror-search-label\">Replace?</span> <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>';\r\n\r\n  function replaceAll(cm, query, text) {\r\n    cm.operation(function() {\r\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\r\n        if (typeof query != \"string\") {\r\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\r\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\r\n        } else cursor.replace(text);\r\n      }\r\n    });\r\n  }\r\n\r\n  function replace(cm, all) {\r\n    if (cm.getOption(\"readOnly\")) return;\r\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\r\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? 'Replace all:' : 'Replace:') + '</span>';\r\n    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\r\n      if (!query) return;\r\n      query = parseQuery(query);\r\n      dialog(cm, replacementQueryDialog, \"Replace with:\", \"\", function(text) {\r\n        text = parseString(text)\r\n        if (all) {\r\n          replaceAll(cm, query, text)\r\n        } else {\r\n          clearSearch(cm);\r\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\r\n          var advance = function() {\r\n            var start = cursor.from(), match;\r\n            if (!(match = cursor.findNext())) {\r\n              cursor = getSearchCursor(cm, query);\r\n              if (!(match = cursor.findNext()) ||\r\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\r\n            }\r\n            cm.setSelection(cursor.from(), cursor.to());\r\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\r\n            confirmDialog(cm, doReplaceConfirm, \"Replace?\",\r\n                          [function() {doReplace(match);}, advance,\r\n                           function() {replaceAll(cm, query, text)}]);\r\n          };\r\n          var doReplace = function(match) {\r\n            cursor.replace(typeof query == \"string\" ? text :\r\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\r\n            advance();\r\n          };\r\n          advance();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\r\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\r\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\r\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\r\n  CodeMirror.commands.findNext = doSearch;\r\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\r\n  CodeMirror.commands.clearSearch = clearSearch;\r\n  CodeMirror.commands.replace = replace;\r\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\r\n});\r\n",null]}