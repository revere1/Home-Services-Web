{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\loading\\loading.service.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\loading\\loading.service.js","mtime":1527492758397},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { InjectionService } from '../../services';\nimport { LoadingComponent } from './loading.component';\nvar LoadingService = /*@__PURE__*/ (function () {\n    function LoadingService(injectionService) {\n        this.injectionService = injectionService;\n        this.threshold = 250;\n        this.count = 0;\n        this._progress = 0;\n    }\n    Object.defineProperty(LoadingService.prototype, \"progress\", {\n        get: function () {\n            return this._progress;\n        },\n        set: function (val) {\n            if (this.instance) {\n                this.instance.progress = val;\n            }\n            this._progress = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoadingService.prototype, \"instance\", {\n        get: function () {\n            if (this.component)\n                return this.component.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LoadingService.prototype.start = function (autoIncrement) {\n        var _this = this;\n        if (autoIncrement === void 0) {\n            autoIncrement = true;\n        }\n        this.create();\n        this.count++;\n        if (autoIncrement) {\n            clearTimeout(this.timeout);\n            var fn_1 = function () {\n                _this.increment();\n                if (_this.progress < 100) {\n                    _this.timeout = setTimeout(fn_1.bind(_this), _this.threshold);\n                }\n                else {\n                    _this.complete();\n                }\n            };\n            this.timeout = setTimeout(fn_1.bind(this), this.threshold);\n        }\n    };\n    LoadingService.prototype.stop = function () {\n        this.count--;\n        clearTimeout(this.timeout);\n    };\n    LoadingService.prototype.reset = function (num) {\n        if (num === void 0) {\n            num = 0;\n        }\n        this.progress = num;\n    };\n    LoadingService.prototype.complete = function (all) {\n        var _this = this;\n        if (all === void 0) {\n            all = false;\n        }\n        this.count--;\n        if (this.count <= 0 || all) {\n            this.progress = 100;\n            this.count = 0;\n            setTimeout(function () {\n                _this.hide();\n                _this.progress = 0;\n            }, this.threshold * 2);\n        }\n    };\n    LoadingService.prototype.hide = function () {\n        this.stop();\n        this.instance.visible = false;\n    };\n    LoadingService.prototype.create = function () {\n        if (!this.component) {\n            this.component = this.injectionService.appendComponent(LoadingComponent);\n        }\n        this.instance.visible = true;\n        this.instance.progress = this.progress;\n        return this.component;\n    };\n    LoadingService.prototype.increment = function () {\n        if (this.progress >= 100)\n            return;\n        // inspired by angular-loading-bar\n        // https://github.com/chieffancypants/angular-loading-bar\n        var stat = this.progress / 100;\n        var rnd = 0;\n        if (stat >= 0 && stat < 0.25) {\n            // Start out between 3 - 6% increments\n            rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;\n        }\n        else if (stat >= 0.25 && stat < 0.65) {\n            // increment between 0 - 3%\n            rnd = (Math.random() * 3) / 100;\n        }\n        else if (stat >= 0.65 && stat < 0.9) {\n            // increment between 0 - 2%\n            rnd = (Math.random() * 2) / 100;\n        }\n        else if (stat >= 0.9 && stat < 0.99) {\n            // finally, increment it .5 %\n            // after 99%, don't increment:\n            rnd = 0.005;\n        }\n        this.progress = (stat + rnd) * 100;\n    };\n    return LoadingService;\n}());\nexport { LoadingService };\n//# sourceMappingURL=loading.service.js.map\n",null]}