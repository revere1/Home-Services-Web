{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\icon\\icon.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\icon\\icon.component.js","mtime":1527490585114},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer, ViewEncapsulation } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IconRegisteryService } from '../../services/icon-registery.service';\nvar IconComponent = /*@__PURE__*/ (function () {\n    function IconComponent(http, renderer, elementRef, iconRegisteryService) {\n        this.http = http;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.iconRegisteryService = iconRegisteryService;\n        this.defaultPath = 'assets/svgs';\n        this.fontSet = 'ngx';\n    }\n    Object.defineProperty(IconComponent.prototype, \"svgSrc\", {\n        set: function (val) {\n            this.loadSvg(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IconComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    IconComponent.prototype.ngOnInit = function () {\n        this.update();\n    };\n    IconComponent.prototype.update = function () {\n        if (this.fontIcon) {\n            this.cssClasses = this.iconRegisteryService.get(this.fontIcon, this.fontSet);\n        }\n    };\n    IconComponent.prototype.loadSvg = function (val) {\n        var _this = this;\n        var opts = { responseType: 'text' };\n        this.http.get(this.defaultPath + \"/\" + val + \".svg\", opts)\n            .subscribe(function (response) {\n            // get our element and clean it out\n            var element = _this.elementRef.nativeElement;\n            element.innerHTML = '';\n            // get response and build svg element\n            var parser = new DOMParser();\n            var svg = parser.parseFromString(response, 'image/svg+xml');\n            // insert the svg result\n            element.innerHTML = svg.documentElement.outerHTML;\n        }, function (err) { return console.error(err); });\n    };\n    return IconComponent;\n}());\nexport { IconComponent };\n//# sourceMappingURL=icon.component.js.map\n",null]}