{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\date-time\\date-time.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\date-time\\date-time.component.js","mtime":1527490569909},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, ViewEncapsulation, forwardRef, ViewChild, TemplateRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as moment from 'moment';\nimport { debounceable } from '../../utils';\nimport { DialogService } from '../dialog';\nimport { DateTimeType } from './date-time.type';\nvar nextId = 0;\nvar DATE_TIME_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return DateTimeComponent; }),\n    multi: true\n};\nvar DateTimeComponent = /*@__PURE__*/ (function () {\n    function DateTimeComponent(dialogService) {\n        this.dialogService = dialogService;\n        this.id = \"datetime-\" + ++nextId;\n        this.autofocus = false;\n        this.placeholder = '';\n        this.inputType = DateTimeType.date;\n        this.change = new EventEmitter();\n        this.onTouchedCallback = function () {\n            // placeholder\n        };\n        this.onChangeCallback = function () {\n            // placeholder\n        };\n    }\n    Object.defineProperty(DateTimeComponent.prototype, \"value\", {\n        get: function () { return this._value; },\n        set: function (val) {\n            var date = moment(val);\n            var sameDiff = this.inputType === DateTimeType.date ? 'day' : undefined;\n            var isSame = date.isSame(this._value, sameDiff);\n            // if we have a val and had no val before, ensure\n            // we set the property correctly even if its same\n            if (!isSame || !this._value) {\n                this._value = val;\n                this.onChangeCallback(val);\n                this.change.emit(val);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateTimeComponent.prototype.ngOnInit = function () {\n        if (!this.format) {\n            if (this.inputType === DateTimeType.date) {\n                this.format = 'MM/DD/Y';\n            }\n            else if (this.inputType === DateTimeType.datetime) {\n                this.format = 'MM/DD/Y  hh:mm a';\n            }\n            else if (this.inputType === DateTimeType.time) {\n                this.format = 'hh:mm a';\n            }\n        }\n    };\n    DateTimeComponent.prototype.ngOnDestroy = function () {\n        this.close();\n    };\n    DateTimeComponent.prototype.writeValue = function (val) {\n        var date = moment(new Date(val));\n        var sameDiff = this.inputType === DateTimeType.date ? 'day' : undefined;\n        var isSame = date.isSame(this._value, sameDiff);\n        if (!isSame) {\n            this._value = val;\n        }\n    };\n    DateTimeComponent.prototype.open = function () {\n        var value = moment(this._value);\n        var isValid = value.isValid();\n        this.dateSelected(isValid ? value : new Date());\n        this.dialog = this.dialogService.create({\n            cssClass: 'ngx-date-time-dialog',\n            template: this.calendarTpl,\n            closeButton: false\n        });\n    };\n    DateTimeComponent.prototype.apply = function () {\n        this.value = this.dialogModel.toDate();\n        this.close();\n    };\n    DateTimeComponent.prototype.dateSelected = function (date) {\n        this.dialogModel = moment(date).clone();\n        this.hour = +this.dialogModel.format('hh');\n        this.minute = +this.dialogModel.format('mm');\n        this.amPmVal = this.dialogModel.format('A');\n    };\n    DateTimeComponent.prototype.minuteChanged = function (newVal) {\n        this.dialogModel = this.dialogModel.clone().minute(newVal);\n    };\n    DateTimeComponent.prototype.hourChanged = function (newVal) {\n        this.dialogModel = this.dialogModel.clone().hour(newVal);\n    };\n    DateTimeComponent.prototype.selectCurrent = function () {\n        this.dateSelected(new Date());\n    };\n    DateTimeComponent.prototype.clear = function () {\n        this.value = undefined;\n        this.close();\n    };\n    DateTimeComponent.prototype.onAmPmChange = function (newVal) {\n        var clone = this.dialogModel.clone();\n        if (newVal === 'AM' && this.amPmVal === 'PM') {\n            this.dialogModel = clone.subtract(12, 'h');\n        }\n        else if (this.amPmVal === 'AM') {\n            this.dialogModel = clone.add(12, 'h');\n        }\n        this.amPmVal = this.dialogModel.format('A');\n    };\n    DateTimeComponent.prototype.getDayDisabled = function (date) {\n        if (!date)\n            return false;\n        var isBeforeMin = this.minDate && date.isSameOrBefore(this.minDate);\n        var isAfterMax = this.maxDate && date.isSameOrAfter(this.maxDate);\n        return isBeforeMin || isAfterMax;\n    };\n    DateTimeComponent.prototype.inputChanged = function (val) {\n        var date = moment(val);\n        var isValid = date.isValid();\n        var outOfRange = this.getDayDisabled(date);\n        if (isValid && !outOfRange) {\n            this.value = date.toDate();\n        }\n        var errorMsg = '';\n        if (!isValid)\n            errorMsg = 'Invalid Date';\n        if (outOfRange)\n            errorMsg = 'Date out of range';\n        this.errorMsg = errorMsg;\n    };\n    DateTimeComponent.prototype.close = function () {\n        if (!this.dialog)\n            return;\n        // tear down the dialog instance\n        this.dialogService.destroy(this.dialog);\n    };\n    DateTimeComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    DateTimeComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    __decorate([\n        debounceable(500),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], DateTimeComponent.prototype, \"inputChanged\", null);\n    return DateTimeComponent;\n}());\nexport { DateTimeComponent };\n//# sourceMappingURL=date-time.component.js.map\n",null]}