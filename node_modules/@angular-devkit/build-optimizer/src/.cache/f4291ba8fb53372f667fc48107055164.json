{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\select\\select-input.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\select\\select-input.component.js","mtime":1527490596558},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { KeyboardKeys } from '../../utils/keys';\nvar SelectInputComponent = /*@__PURE__*/ (function () {\n    function SelectInputComponent() {\n        this.toggle = new EventEmitter();\n        this.selection = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.keyup = new EventEmitter();\n        this.selectedOptions = [];\n    }\n    Object.defineProperty(SelectInputComponent.prototype, \"selected\", {\n        get: function () {\n            return this._selected;\n        },\n        set: function (val) {\n            this._selected = val;\n            this.selectedOptions = this.calcSelectedOptions(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectInputComponent.prototype, \"caretVisible\", {\n        get: function () {\n            if (this.disableDropdown)\n                return false;\n            if (this.tagging && (!this.options || !this.options.length))\n                return false;\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectInputComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.tagging && this.autofocus) {\n            setTimeout(function () {\n                _this.inputElement.nativeElement.focus();\n            }, 5);\n        }\n    };\n    SelectInputComponent.prototype.onKeyUp = function (event) {\n        event.stopPropagation();\n        var key = event.key;\n        var value = event.target.value;\n        if (key === KeyboardKeys.ENTER && value !== '') {\n            var hasSelection = this.selected.find(function (selection) {\n                return value === selection;\n            });\n            if (!hasSelection) {\n                var newSelections = this.selected.concat([value]);\n                this.selection.emit(newSelections);\n                event.target.value = '';\n            }\n        }\n        else if (key === KeyboardKeys.ESCAPE) {\n            this.toggle.emit();\n        }\n        this.keyup.emit({ event: event, value: value });\n    };\n    SelectInputComponent.prototype.onKeyDown = function (event) {\n        if (this.disableDropdown)\n            return;\n        event.stopPropagation();\n        if (!this.tagging) {\n            this.keyup.emit({ event: event });\n        }\n    };\n    SelectInputComponent.prototype.onClick = function (event) {\n        var _this = this;\n        if (this.disableDropdown)\n            return;\n        this.activate.emit(event);\n        if (this.tagging) {\n            setTimeout(function () {\n                _this.inputElement.nativeElement.focus();\n            }, 5);\n        }\n    };\n    SelectInputComponent.prototype.onOptionRemove = function (event, option) {\n        var _this = this;\n        event.stopPropagation();\n        var newSelections = this.selected.filter(function (selection) {\n            if (_this.identifier !== undefined) {\n                return option.value[_this.identifier] !== selection[_this.identifier];\n            }\n            return option.value !== selection;\n        });\n        this.selection.emit(newSelections);\n    };\n    SelectInputComponent.prototype.calcSelectedOptions = function (selected) {\n        var _this = this;\n        var results = [];\n        // result out if nothing here\n        if (!selected)\n            return results;\n        var _loop_1 = function (selection) {\n            var match = void 0;\n            if (this_1.options) {\n                match = this_1.options.find(function (option) {\n                    if (_this.identifier)\n                        return selection[_this.identifier] === option.value[_this.identifier];\n                    return selection === option.value;\n                });\n            }\n            if ((this_1.tagging || this_1.allowAdditions) && !match) {\n                match = { value: selection, name: selection };\n            }\n            if (match)\n                results.push(match);\n        };\n        var this_1 = this;\n        for (var _i = 0, selected_1 = selected; _i < selected_1.length; _i++) {\n            var selection = selected_1[_i];\n            _loop_1(selection);\n        }\n        return results;\n    };\n    return SelectInputComponent;\n}());\nexport { SelectInputComponent };\n//# sourceMappingURL=select-input.component.js.map\n",null]}