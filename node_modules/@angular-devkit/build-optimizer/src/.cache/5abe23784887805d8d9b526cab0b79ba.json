{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\drawer\\drawer.component.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\drawer\\drawer.component.js","mtime":1527492758351},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, HostBinding, HostListener, ViewEncapsulation } from '@angular/core';\nimport { trigger } from '@angular/animations';\nimport { DrawerService } from './drawer.service';\nimport { drawerTransition } from '../../animations';\nvar DrawerComponent = /*@__PURE__*/ (function () {\n    function DrawerComponent(drawerManager) {\n        this.drawerManager = drawerManager;\n        /**\n         * CSS Class\n         *\n         * @type {string}\n         * @memberOf DrawerComponent\n         */\n        this.cssClass = '';\n        /**\n         * Drawer close event\n         *\n         * @memberOf DrawerComponent\n         */\n        this.close = new EventEmitter();\n    }\n    Object.defineProperty(DrawerComponent.prototype, \"size\", {\n        /**\n         * Gets the size of the drawer\n         *\n         * @readonly\n         * @type {number}\n         * @memberOf DrawerComponent\n         */\n        get: function () {\n            return this._size;\n        },\n        /**\n         * Size of the drawer. A percentage.\n         *\n         * @memberOf DrawerComponent\n         */\n        set: function (val) {\n            this._size = val;\n            this.setDimensions(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"isLeft\", {\n        /**\n         * Is the drawer a left opening drawer\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DrawerComponent\n         */\n        get: function () {\n            return this.direction === 'left';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"cssClasses\", {\n        /**\n         * Gets the css classes for host\n         *\n         * @readonly\n         * @type {string}\n         * @memberOf DrawerComponent\n         */\n        get: function () {\n            var clz = 'ngx-drawer';\n            clz += \" \" + this.cssClass;\n            if (this.isLeft)\n                clz += ' left-drawer';\n            if (this.isBottom)\n                clz += ' bottom-drawer';\n            return clz;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DrawerComponent.prototype, \"isBottom\", {\n        /**\n         * Is the drawer a bottom of top drawer\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DrawerComponent\n         */\n        // @HostBinding('class.bottom-drawer')\n        get: function () {\n            return this.direction === 'bottom';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the dimensions\n     *\n     * @param {number} size\n     *\n     * @memberOf DrawerComponent\n     */\n    DrawerComponent.prototype.setDimensions = function (size) {\n        var _this = this;\n        var winWidth = window.innerWidth;\n        var winHeight = window.innerHeight;\n        var height;\n        var width;\n        var transform;\n        if (this.isLeft) {\n            if (size) {\n                var innerWidth_1 = size || winWidth;\n                var widthPercent = (innerWidth_1 / 100) * winWidth;\n                var newWidth = Math.ceil(widthPercent);\n                height = '100%';\n                width = newWidth + \"px\";\n                transform = \"translate(-\" + width + \", 0px)\";\n            }\n            else {\n                transform = 'translate(100%, 0)';\n            }\n        }\n        else if (this.isBottom) {\n            if (size) {\n                var innerHeight_1 = size || winHeight;\n                var heightPercent = (innerHeight_1 / 100) * winHeight;\n                var newHeight = Math.ceil(heightPercent);\n                width = '100%';\n                height = newHeight + \"px\";\n                transform = \"translate(0px, -\" + height + \")\";\n            }\n            else {\n                transform = 'translate(0, 100%)';\n            }\n        }\n        setTimeout(function () {\n            _this.heightSize = height;\n            _this.widthSize = width;\n            _this.transform = transform;\n        }, 10);\n    };\n    /**\n     * On destroy callback\n     *\n     * @memberOf DrawerComponent\n     */\n    DrawerComponent.prototype.ngOnDestroy = function () {\n        this.close.emit(true);\n    };\n    /**\n     * Exit listener\n     *\n     * @memberOf DrawerComponent\n     */\n    DrawerComponent.prototype.onEscapeKey = function () {\n        this.close.emit(true);\n    };\n    __decorate([\n        HostBinding('@drawerTransition'),\n        Input(),\n        __metadata(\"design:type\", String)\n    ], DrawerComponent.prototype, \"direction\", void 0);\n    __decorate([\n        HostBinding('style.zIndex'),\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], DrawerComponent.prototype, \"zIndex\", void 0);\n    return DrawerComponent;\n}());\nexport { DrawerComponent };\n//# sourceMappingURL=drawer.component.js.map\n",null]}