{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-brush\\src\\brush.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-brush\\src\\brush.js","mtime":1527492764587},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import {dispatch} from \"d3-dispatch\";\r\nimport {dragDisable, dragEnable} from \"d3-drag\";\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {customEvent, event, mouse, select} from \"d3-selection\";\r\nimport {interrupt} from \"d3-transition\";\r\nimport constant from \"./constant\";\r\nimport BrushEvent from \"./event\";\r\nimport noevent, {nopropagation} from \"./noevent\";\r\n\r\nvar MODE_DRAG = {name: \"drag\"},\r\n    MODE_SPACE = {name: \"space\"},\r\n    MODE_HANDLE = {name: \"handle\"},\r\n    MODE_CENTER = {name: \"center\"};\r\n\r\nvar X = {\r\n  name: \"x\",\r\n  handles: [\"e\", \"w\"].map(type),\r\n  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\r\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\r\n};\r\n\r\nvar Y = {\r\n  name: \"y\",\r\n  handles: [\"n\", \"s\"].map(type),\r\n  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\r\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\r\n};\r\n\r\nvar XY = {\r\n  name: \"xy\",\r\n  handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type),\r\n  input: function(xy) { return xy; },\r\n  output: function(xy) { return xy; }\r\n};\r\n\r\nvar cursors = {\r\n  overlay: \"crosshair\",\r\n  selection: \"move\",\r\n  n: \"ns-resize\",\r\n  e: \"ew-resize\",\r\n  s: \"ns-resize\",\r\n  w: \"ew-resize\",\r\n  nw: \"nwse-resize\",\r\n  ne: \"nesw-resize\",\r\n  se: \"nwse-resize\",\r\n  sw: \"nesw-resize\"\r\n};\r\n\r\nvar flipX = {\r\n  e: \"w\",\r\n  w: \"e\",\r\n  nw: \"ne\",\r\n  ne: \"nw\",\r\n  se: \"sw\",\r\n  sw: \"se\"\r\n};\r\n\r\nvar flipY = {\r\n  n: \"s\",\r\n  s: \"n\",\r\n  nw: \"sw\",\r\n  ne: \"se\",\r\n  se: \"ne\",\r\n  sw: \"nw\"\r\n};\r\n\r\nvar signsX = {\r\n  overlay: +1,\r\n  selection: +1,\r\n  n: null,\r\n  e: +1,\r\n  s: null,\r\n  w: -1,\r\n  nw: -1,\r\n  ne: +1,\r\n  se: +1,\r\n  sw: -1\r\n};\r\n\r\nvar signsY = {\r\n  overlay: +1,\r\n  selection: +1,\r\n  n: -1,\r\n  e: null,\r\n  s: +1,\r\n  w: null,\r\n  nw: -1,\r\n  ne: -1,\r\n  se: +1,\r\n  sw: +1\r\n};\r\n\r\nfunction type(t) {\r\n  return {type: t};\r\n}\r\n\r\n// Ignore right-click, since that should open the context menu.\r\nfunction defaultFilter() {\r\n  return !event.button;\r\n}\r\n\r\nfunction defaultExtent() {\r\n  var svg = this.ownerSVGElement || this;\r\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\r\n}\r\n\r\n// Like d3.local, but with the name “__brush” rather than auto-generated.\r\nfunction local(node) {\r\n  while (!node.__brush) if (!(node = node.parentNode)) return;\r\n  return node.__brush;\r\n}\r\n\r\nfunction empty(extent) {\r\n  return extent[0][0] === extent[1][0]\r\n      || extent[0][1] === extent[1][1];\r\n}\r\n\r\nexport function brushSelection(node) {\r\n  var state = node.__brush;\r\n  return state ? state.dim.output(state.selection) : null;\r\n}\r\n\r\nexport function brushX() {\r\n  return brush(X);\r\n}\r\n\r\nexport function brushY() {\r\n  return brush(Y);\r\n}\r\n\r\nexport default function() {\r\n  return brush(XY);\r\n}\r\n\r\nfunction brush(dim) {\r\n  var extent = defaultExtent,\r\n      filter = defaultFilter,\r\n      listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\r\n      handleSize = 6,\r\n      touchending;\r\n\r\n  function brush(group) {\r\n    var overlay = group\r\n        .property(\"__brush\", initialize)\r\n      .selectAll(\".overlay\")\r\n      .data([type(\"overlay\")]);\r\n\r\n    overlay.enter().append(\"rect\")\r\n        .attr(\"class\", \"overlay\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .attr(\"cursor\", cursors.overlay)\r\n      .merge(overlay)\r\n        .each(function() {\r\n          var extent = local(this).extent;\r\n          select(this)\r\n              .attr(\"x\", extent[0][0])\r\n              .attr(\"y\", extent[0][1])\r\n              .attr(\"width\", extent[1][0] - extent[0][0])\r\n              .attr(\"height\", extent[1][1] - extent[0][1]);\r\n        });\r\n\r\n    group.selectAll(\".selection\")\r\n      .data([type(\"selection\")])\r\n      .enter().append(\"rect\")\r\n        .attr(\"class\", \"selection\")\r\n        .attr(\"cursor\", cursors.selection)\r\n        .attr(\"fill\", \"#777\")\r\n        .attr(\"fill-opacity\", 0.3)\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"shape-rendering\", \"crispEdges\");\r\n\r\n    var handle = group.selectAll(\".handle\")\r\n      .data(dim.handles, function(d) { return d.type; });\r\n\r\n    handle.exit().remove();\r\n\r\n    handle.enter().append(\"rect\")\r\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\r\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\r\n\r\n    group\r\n        .each(redraw)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\r\n        .on(\"mousedown.brush touchstart.brush\", started);\r\n  }\r\n\r\n  brush.move = function(group, selection) {\r\n    if (group.selection) {\r\n      group\r\n          .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\r\n          .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\r\n          .tween(\"brush\", function() {\r\n            var that = this,\r\n                state = that.__brush,\r\n                emit = emitter(that, arguments),\r\n                selection0 = state.selection,\r\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\r\n                i = interpolate(selection0, selection1);\r\n\r\n            function tween(t) {\r\n              state.selection = t === 1 && empty(selection1) ? null : i(t);\r\n              redraw.call(that);\r\n              emit.brush();\r\n            }\r\n\r\n            return selection0 && selection1 ? tween : tween(1);\r\n          });\r\n    } else {\r\n      group\r\n          .each(function() {\r\n            var that = this,\r\n                args = arguments,\r\n                state = that.__brush,\r\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\r\n                emit = emitter(that, args).beforestart();\r\n\r\n            interrupt(that);\r\n            state.selection = selection1 == null || empty(selection1) ? null : selection1;\r\n            redraw.call(that);\r\n            emit.start().brush().end();\r\n          });\r\n    }\r\n  };\r\n\r\n  function redraw() {\r\n    var group = select(this),\r\n        selection = local(this).selection;\r\n\r\n    if (selection) {\r\n      group.selectAll(\".selection\")\r\n          .style(\"display\", null)\r\n          .attr(\"x\", selection[0][0])\r\n          .attr(\"y\", selection[0][1])\r\n          .attr(\"width\", selection[1][0] - selection[0][0])\r\n          .attr(\"height\", selection[1][1] - selection[0][1]);\r\n\r\n      group.selectAll(\".handle\")\r\n          .style(\"display\", null)\r\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\r\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\r\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\r\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\r\n    }\r\n\r\n    else {\r\n      group.selectAll(\".selection,.handle\")\r\n          .style(\"display\", \"none\")\r\n          .attr(\"x\", null)\r\n          .attr(\"y\", null)\r\n          .attr(\"width\", null)\r\n          .attr(\"height\", null);\r\n    }\r\n  }\r\n\r\n  function emitter(that, args) {\r\n    return that.__brush.emitter || new Emitter(that, args);\r\n  }\r\n\r\n  function Emitter(that, args) {\r\n    this.that = that;\r\n    this.args = args;\r\n    this.state = that.__brush;\r\n    this.active = 0;\r\n  }\r\n\r\n  Emitter.prototype = {\r\n    beforestart: function() {\r\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\r\n      return this;\r\n    },\r\n    start: function() {\r\n      if (this.starting) this.starting = false, this.emit(\"start\");\r\n      return this;\r\n    },\r\n    brush: function() {\r\n      this.emit(\"brush\");\r\n      return this;\r\n    },\r\n    end: function() {\r\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\r\n      return this;\r\n    },\r\n    emit: function(type) {\r\n      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\r\n    }\r\n  };\r\n\r\n  function started() {\r\n    if (event.touches) { if (event.changedTouches.length < event.touches.length) return noevent(); }\r\n    else if (touchending) return;\r\n    if (!filter.apply(this, arguments)) return;\r\n\r\n    var that = this,\r\n        type = event.target.__data__.type,\r\n        mode = (event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (event.altKey ? MODE_CENTER : MODE_HANDLE),\r\n        signX = dim === Y ? null : signsX[type],\r\n        signY = dim === X ? null : signsY[type],\r\n        state = local(that),\r\n        extent = state.extent,\r\n        selection = state.selection,\r\n        W = extent[0][0], w0, w1,\r\n        N = extent[0][1], n0, n1,\r\n        E = extent[1][0], e0, e1,\r\n        S = extent[1][1], s0, s1,\r\n        dx,\r\n        dy,\r\n        moving,\r\n        shifting = signX && signY && event.shiftKey,\r\n        lockX,\r\n        lockY,\r\n        point0 = mouse(that),\r\n        point = point0,\r\n        emit = emitter(that, arguments).beforestart();\r\n\r\n    if (type === \"overlay\") {\r\n      state.selection = selection = [\r\n        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\r\n        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\r\n      ];\r\n    } else {\r\n      w0 = selection[0][0];\r\n      n0 = selection[0][1];\r\n      e0 = selection[1][0];\r\n      s0 = selection[1][1];\r\n    }\r\n\r\n    w1 = w0;\r\n    n1 = n0;\r\n    e1 = e0;\r\n    s1 = s0;\r\n\r\n    var group = select(that)\r\n        .attr(\"pointer-events\", \"none\");\r\n\r\n    var overlay = group.selectAll(\".overlay\")\r\n        .attr(\"cursor\", cursors[type]);\r\n\r\n    if (event.touches) {\r\n      group\r\n          .on(\"touchmove.brush\", moved, true)\r\n          .on(\"touchend.brush touchcancel.brush\", ended, true);\r\n    } else {\r\n      var view = select(event.view)\r\n          .on(\"keydown.brush\", keydowned, true)\r\n          .on(\"keyup.brush\", keyupped, true)\r\n          .on(\"mousemove.brush\", moved, true)\r\n          .on(\"mouseup.brush\", ended, true);\r\n\r\n      dragDisable(event.view);\r\n    }\r\n\r\n    nopropagation();\r\n    interrupt(that);\r\n    redraw.call(that);\r\n    emit.start();\r\n\r\n    function moved() {\r\n      var point1 = mouse(that);\r\n      if (shifting && !lockX && !lockY) {\r\n        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\r\n        else lockX = true;\r\n      }\r\n      point = point1;\r\n      moving = true;\r\n      noevent();\r\n      move();\r\n    }\r\n\r\n    function move() {\r\n      var t;\r\n\r\n      dx = point[0] - point0[0];\r\n      dy = point[1] - point0[1];\r\n\r\n      switch (mode) {\r\n        case MODE_SPACE:\r\n        case MODE_DRAG: {\r\n          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\r\n          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\r\n          break;\r\n        }\r\n        case MODE_HANDLE: {\r\n          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\r\n          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\r\n          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\r\n          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\r\n          break;\r\n        }\r\n        case MODE_CENTER: {\r\n          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\r\n          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (e1 < w1) {\r\n        signX *= -1;\r\n        t = w0, w0 = e0, e0 = t;\r\n        t = w1, w1 = e1, e1 = t;\r\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\r\n      }\r\n\r\n      if (s1 < n1) {\r\n        signY *= -1;\r\n        t = n0, n0 = s0, s0 = t;\r\n        t = n1, n1 = s1, s1 = t;\r\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\r\n      }\r\n\r\n      if (state.selection) selection = state.selection; // May be set by brush.move!\r\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\r\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\r\n\r\n      if (selection[0][0] !== w1\r\n          || selection[0][1] !== n1\r\n          || selection[1][0] !== e1\r\n          || selection[1][1] !== s1) {\r\n        state.selection = [[w1, n1], [e1, s1]];\r\n        redraw.call(that);\r\n        emit.brush();\r\n      }\r\n    }\r\n\r\n    function ended() {\r\n      nopropagation();\r\n      if (event.touches) {\r\n        if (event.touches.length) return;\r\n        if (touchending) clearTimeout(touchending);\r\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\r\n        group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\r\n      } else {\r\n        dragEnable(event.view, moving);\r\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\r\n      }\r\n      group.attr(\"pointer-events\", \"all\");\r\n      overlay.attr(\"cursor\", cursors.overlay);\r\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\r\n      if (empty(selection)) state.selection = null, redraw.call(that);\r\n      emit.end();\r\n    }\r\n\r\n    function keydowned() {\r\n      switch (event.keyCode) {\r\n        case 16: { // SHIFT\r\n          shifting = signX && signY;\r\n          break;\r\n        }\r\n        case 18: { // ALT\r\n          if (mode === MODE_HANDLE) {\r\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n            mode = MODE_CENTER;\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        case 32: { // SPACE; takes priority over ALT\r\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\r\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\r\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\r\n            mode = MODE_SPACE;\r\n            overlay.attr(\"cursor\", cursors.selection);\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        default: return;\r\n      }\r\n      noevent();\r\n    }\r\n\r\n    function keyupped() {\r\n      switch (event.keyCode) {\r\n        case 16: { // SHIFT\r\n          if (shifting) {\r\n            lockX = lockY = shifting = false;\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        case 18: { // ALT\r\n          if (mode === MODE_CENTER) {\r\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n            mode = MODE_HANDLE;\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        case 32: { // SPACE\r\n          if (mode === MODE_SPACE) {\r\n            if (event.altKey) {\r\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\r\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\r\n              mode = MODE_CENTER;\r\n            } else {\r\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\r\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\r\n              mode = MODE_HANDLE;\r\n            }\r\n            overlay.attr(\"cursor\", cursors[type]);\r\n            move();\r\n          }\r\n          break;\r\n        }\r\n        default: return;\r\n      }\r\n      noevent();\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    var state = this.__brush || {selection: null};\r\n    state.extent = extent.apply(this, arguments);\r\n    state.dim = dim;\r\n    return state;\r\n  }\r\n\r\n  brush.extent = function(_) {\r\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\r\n  };\r\n\r\n  brush.filter = function(_) {\r\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\r\n  };\r\n\r\n  brush.handleSize = function(_) {\r\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\r\n  };\r\n\r\n  brush.on = function() {\r\n    var value = listeners.on.apply(listeners, arguments);\r\n    return value === listeners ? brush : value;\r\n  };\r\n\r\n  return brush;\r\n}\r\n",null]}