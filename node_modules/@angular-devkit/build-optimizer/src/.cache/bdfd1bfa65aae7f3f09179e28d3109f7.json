{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-force\\src\\radial.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-force\\src\\radial.js","mtime":1527492764752},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import constant from \"./constant\";\r\n\r\nexport default function(radius, x, y) {\r\n  var nodes,\r\n      strength = constant(0.1),\r\n      strengths,\r\n      radiuses;\r\n\r\n  if (typeof radius !== \"function\") radius = constant(+radius);\r\n  if (x == null) x = 0;\r\n  if (y == null) y = 0;\r\n\r\n  function force(alpha) {\r\n    for (var i = 0, n = nodes.length; i < n; ++i) {\r\n      var node = nodes[i],\r\n          dx = node.x - x || 1e-6,\r\n          dy = node.y - y || 1e-6,\r\n          r = Math.sqrt(dx * dx + dy * dy),\r\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\r\n      node.vx += dx * k;\r\n      node.vy += dy * k;\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length;\r\n    strengths = new Array(n);\r\n    radiuses = new Array(n);\r\n    for (i = 0; i < n; ++i) {\r\n      radiuses[i] = +radius(nodes[i], i, nodes);\r\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_) {\r\n    nodes = _, initialize();\r\n  };\r\n\r\n  force.strength = function(_) {\r\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\r\n  };\r\n\r\n  force.radius = function(_) {\r\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\r\n  };\r\n\r\n  force.x = function(_) {\r\n    return arguments.length ? (x = +_, force) : x;\r\n  };\r\n\r\n  force.y = function(_) {\r\n    return arguments.length ? (y = +_, force) : y;\r\n  };\r\n\r\n  return force;\r\n}\r\n",null]}