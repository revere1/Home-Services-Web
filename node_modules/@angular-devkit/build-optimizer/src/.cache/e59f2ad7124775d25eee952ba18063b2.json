{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\code-editor\\code-editor.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\code-editor\\code-editor.component.js","mtime":1527490567195},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, ViewChild, Renderer, EventEmitter, forwardRef, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as CodeMirror from 'codemirror';\n// code extensions\nimport 'codemirror/mode/yaml/yaml.js';\nimport 'codemirror/mode/python/python.js';\nimport 'codemirror/mode/powershell/powershell.js';\nimport 'codemirror/mode/javascript/javascript.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\nimport 'codemirror/mode/spreadsheet/spreadsheet.js';\n// add-ons\nimport 'codemirror/addon/lint/lint.js';\nimport 'codemirror/addon/search/search.js';\nimport 'codemirror/addon/search/searchcursor.js';\nimport 'codemirror/addon/search/jump-to-line.js';\nimport 'codemirror/addon/dialog/dialog.js';\nimport 'codemirror/addon/fold/foldcode.js';\nimport 'codemirror/addon/fold/foldgutter.js';\nimport 'codemirror/addon/fold/indent-fold.js';\nvar CODEMIRROR_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CodeEditorComponent; }),\n    multi: true\n};\nvar CodeEditorComponent = /*@__PURE__*/ (function () {\n    function CodeEditorComponent(renderer) {\n        this.renderer = renderer;\n        this.config = {};\n        this.theme = 'dracula';\n        this.readOnly = false;\n        this.autofocus = false;\n        this.allowDropFileTypes = [];\n        this.gutters = [];\n        this.change = new EventEmitter();\n        this.blur = new EventEmitter();\n        this.onTouchedCallback = function () {\n            // placeholder\n        };\n        this.onChangeCallback = function () {\n            // placeholder\n        };\n    }\n    Object.defineProperty(CodeEditorComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (val) {\n            if (val !== this._value) {\n                this._value = val;\n                this.onChangeCallback(val);\n                this.change.emit(this._value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CodeEditorComponent.prototype.ngOnInit = function () {\n        this.config = __assign({ theme: this.theme, readOnly: this.readOnly, mode: this.mode, autofocus: this.autofocus, lint: this.lint, allowDropFileTypes: this.allowDropFileTypes, lineNumbers: this.lineNumbers, gutters: this.gutters }, this.config);\n    };\n    CodeEditorComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (typeof this.value !== 'string') {\n            var elm = this.content.nativeElement;\n            var code = elm.innerHTML;\n            this.renderer.detachView([].slice.call(elm.childNodes));\n            this.host.nativeElement.value = this.cleanCode(code);\n        }\n        this.instance = CodeMirror.fromTextArea(this.host.nativeElement, this.config);\n        this.instance.on('change', function () {\n            _this.updateValue(_this.instance.getValue());\n        });\n        this.instance.on('blur', function () {\n            _this.blur.emit(_this.instance.getValue());\n        });\n    };\n    CodeEditorComponent.prototype.ngOnDestroy = function () {\n        this.instance.off('change');\n        this.instance.off('blur');\n    };\n    CodeEditorComponent.prototype.cleanCode = function (code) {\n        var lines = code.split('\\n');\n        // Remove empty lines\n        lines = lines.filter(function (line) {\n            return line.trim().length > 0;\n        });\n        // don't mess w/ empties\n        if (!lines.length)\n            return '';\n        // Make it so each line starts at 0 whitespace\n        var firstLineWhitespace = lines[0].match(/^\\s*/)[0];\n        var startingWhitespaceRegex = new RegExp('^' + firstLineWhitespace);\n        lines = lines.map(function (line) {\n            return line\n                .replace('=\"\"', '') // remove empty values\n                .replace(startingWhitespaceRegex, '')\n                .replace(/\\s+$/, '');\n        });\n        var codeToParse = lines.join('\\n')\n            .replace(/\\{ \\{/gi, '{{').replace(/\\} \\}/gi, '}}')\n            .replace(/&lt;/gi, '<').replace(/&gt;/gi, '>');\n        return codeToParse;\n    };\n    CodeEditorComponent.prototype.onVisible = function () {\n        // hidden on init will cause incorrect sizing\n        this.instance.refresh();\n    };\n    CodeEditorComponent.prototype.updateValue = function (value) {\n        this.value = value;\n        this.onTouchedCallback();\n        this.onChangeCallback(value);\n        this.change.emit(value);\n    };\n    CodeEditorComponent.prototype.writeValue = function (val) {\n        if (val !== this.value && this.instance) {\n            this._value = val;\n            this.instance.setValue(this._value);\n        }\n    };\n    CodeEditorComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    CodeEditorComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    return CodeEditorComponent;\n}());\nexport { CodeEditorComponent };\n//# sourceMappingURL=code-editor.component.js.map\n",null]}