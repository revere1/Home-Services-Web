{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-hierarchy\\src\\treemap\\resquarify.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-hierarchy\\src\\treemap\\resquarify.js","mtime":1527492764848},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import treemapDice from \"./dice\";\r\nimport treemapSlice from \"./slice\";\r\nimport {phi, squarifyRatio} from \"./squarify\";\r\n\r\nexport default (function custom(ratio) {\r\n\r\n  function resquarify(parent, x0, y0, x1, y1) {\r\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\r\n      var rows,\r\n          row,\r\n          nodes,\r\n          i,\r\n          j = -1,\r\n          n,\r\n          m = rows.length,\r\n          value = parent.value;\r\n\r\n      while (++j < m) {\r\n        row = rows[j], nodes = row.children;\r\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\r\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\r\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\r\n        value -= row.value;\r\n      }\r\n    } else {\r\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n      rows.ratio = ratio;\r\n    }\r\n  }\r\n\r\n  resquarify.ratio = function(x) {\r\n    return custom((x = +x) > 1 ? x : 1);\r\n  };\r\n\r\n  return resquarify;\r\n})(phi);\r\n",null]}