{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\search\\jump-to-line.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\codemirror\\addon\\search\\jump-to-line.js","mtime":1527492762972},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n\r\n// Defines jumpToLine command. Uses dialog.js if present.\r\n\r\n(function(mod) {\r\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\r\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\r\n  else if (typeof define == \"function\" && define.amd) // AMD\r\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\r\n  else // Plain browser env\r\n    mod(CodeMirror);\r\n})(function(CodeMirror) {\r\n  \"use strict\";\r\n\r\n  function dialog(cm, text, shortText, deflt, f) {\r\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\r\n    else f(prompt(shortText, deflt));\r\n  }\r\n\r\n  var jumpDialog =\r\n      'Jump to line: <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">(Use line:column or scroll% syntax)</span>';\r\n\r\n  function interpretLine(cm, string) {\r\n    var num = Number(string)\r\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\r\n    else return num - 1\r\n  }\r\n\r\n  CodeMirror.commands.jumpToLine = function(cm) {\r\n    var cur = cm.getCursor();\r\n    dialog(cm, jumpDialog, \"Jump to line:\", (cur.line + 1) + \":\" + cur.ch, function(posStr) {\r\n      if (!posStr) return;\r\n\r\n      var match;\r\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\r\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\r\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\r\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\r\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\r\n        cm.setCursor(line - 1, cur.ch);\r\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\r\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\r\n      }\r\n    });\r\n  };\r\n\r\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\r\n});\r\n",null]}