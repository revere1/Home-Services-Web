{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\d3-force\\src\\simulation.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\d3-force\\src\\simulation.js","mtime":1527492764752},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import {dispatch} from \"d3-dispatch\";\r\nimport {map} from \"d3-collection\";\r\nimport {timer} from \"d3-timer\";\r\n\r\nexport function x(d) {\r\n  return d.x;\r\n}\r\n\r\nexport function y(d) {\r\n  return d.y;\r\n}\r\n\r\nvar initialRadius = 10,\r\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\r\n\r\nexport default function(nodes) {\r\n  var simulation,\r\n      alpha = 1,\r\n      alphaMin = 0.001,\r\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\r\n      alphaTarget = 0,\r\n      velocityDecay = 0.6,\r\n      forces = map(),\r\n      stepper = timer(step),\r\n      event = dispatch(\"tick\", \"end\");\r\n\r\n  if (nodes == null) nodes = [];\r\n\r\n  function step() {\r\n    tick();\r\n    event.call(\"tick\", simulation);\r\n    if (alpha < alphaMin) {\r\n      stepper.stop();\r\n      event.call(\"end\", simulation);\r\n    }\r\n  }\r\n\r\n  function tick() {\r\n    var i, n = nodes.length, node;\r\n\r\n    alpha += (alphaTarget - alpha) * alphaDecay;\r\n\r\n    forces.each(function(force) {\r\n      force(alpha);\r\n    });\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      node = nodes[i];\r\n      if (node.fx == null) node.x += node.vx *= velocityDecay;\r\n      else node.x = node.fx, node.vx = 0;\r\n      if (node.fy == null) node.y += node.vy *= velocityDecay;\r\n      else node.y = node.fy, node.vy = 0;\r\n    }\r\n  }\r\n\r\n  function initializeNodes() {\r\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\r\n      node = nodes[i], node.index = i;\r\n      if (isNaN(node.x) || isNaN(node.y)) {\r\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\r\n        node.x = radius * Math.cos(angle);\r\n        node.y = radius * Math.sin(angle);\r\n      }\r\n      if (isNaN(node.vx) || isNaN(node.vy)) {\r\n        node.vx = node.vy = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  function initializeForce(force) {\r\n    if (force.initialize) force.initialize(nodes);\r\n    return force;\r\n  }\r\n\r\n  initializeNodes();\r\n\r\n  return simulation = {\r\n    tick: tick,\r\n\r\n    restart: function() {\r\n      return stepper.restart(step), simulation;\r\n    },\r\n\r\n    stop: function() {\r\n      return stepper.stop(), simulation;\r\n    },\r\n\r\n    nodes: function(_) {\r\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\r\n    },\r\n\r\n    alpha: function(_) {\r\n      return arguments.length ? (alpha = +_, simulation) : alpha;\r\n    },\r\n\r\n    alphaMin: function(_) {\r\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\r\n    },\r\n\r\n    alphaDecay: function(_) {\r\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\r\n    },\r\n\r\n    alphaTarget: function(_) {\r\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\r\n    },\r\n\r\n    velocityDecay: function(_) {\r\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\r\n    },\r\n\r\n    force: function(name, _) {\r\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\r\n    },\r\n\r\n    find: function(x, y, radius) {\r\n      var i = 0,\r\n          n = nodes.length,\r\n          dx,\r\n          dy,\r\n          d2,\r\n          node,\r\n          closest;\r\n\r\n      if (radius == null) radius = Infinity;\r\n      else radius *= radius;\r\n\r\n      for (i = 0; i < n; ++i) {\r\n        node = nodes[i];\r\n        dx = x - node.x;\r\n        dy = y - node.y;\r\n        d2 = dx * dx + dy * dy;\r\n        if (d2 < radius) closest = node, radius = d2;\r\n      }\r\n\r\n      return closest;\r\n    },\r\n\r\n    on: function(name, _) {\r\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\r\n    }\r\n  };\r\n}\r\n",null]}