{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\ngx-dropzone-wrapper\\dist\\ngx-dropzone-wrapper.es5.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\ngx-dropzone-wrapper\\dist\\ngx-dropzone-wrapper.es5.js","mtime":1520774387000},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { InjectionToken, PLATFORM_ID, Directive, Input, Output, EventEmitter, NgZone, Renderer2, ElementRef, Optional, Inject, KeyValueDiffers, Component, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport * as Dropzone from 'dropzone';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ DROPZONE_CONFIG = new InjectionToken('DROPZONE_CONFIG');\nvar /** @type {?} */ DropzoneEvents = [\n    'error',\n    'success',\n    'sending',\n    'canceled',\n    'complete',\n    'processing',\n    'drop',\n    'dragStart',\n    'dragEnd',\n    'dragEnter',\n    'dragOver',\n    'dragLeave',\n    'thumbnail',\n    'addedFile',\n    'removedFile',\n    'uploadProgress',\n    'maxFilesReached',\n    'maxFilesExceeded',\n    'successMultiple',\n    'sendingMultiple',\n    'canceledMultiple',\n    'completeMultiple',\n    'processingMultiple',\n    'reset',\n    'queueComplete',\n    'totalUploadProgress'\n];\nvar DropzoneConfig = /*@__PURE__*/ (function () {\n    function DropzoneConfig(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        this.assign(config);\n    }\n    /**\n     * @param {?=} config\n     * @param {?=} target\n     * @return {?}\n     */\n    DropzoneConfig.prototype.assign = /**\n     * @param {?=} config\n     * @param {?=} target\n     * @return {?}\n     */\n        function (config, target) {\n            if (config === void 0) {\n                config = {};\n            }\n            target = target || this;\n            for (var /** @type {?} */ key in config) {\n                if (config[key] != null && !(Array.isArray(config[key])) &&\n                    typeof config[key] === 'object' && !(config[key] instanceof HTMLElement)) {\n                    target[key] = {};\n                    this.assign(config[key], target[key]);\n                }\n                else {\n                    target[key] = config[key];\n                }\n            }\n        };\n    return DropzoneConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DropzoneDirective = /*@__PURE__*/ (function () {\n    function DropzoneDirective(platformId, zone, renderer, elementRef, differs, defaults) {\n        this.platformId = platformId;\n        this.zone = zone;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.differs = differs;\n        this.defaults = defaults;\n        this.disabled = false;\n        this.DZ_ERROR = new EventEmitter();\n        this.DZ_SUCCESS = new EventEmitter();\n        this.DZ_SENDING = new EventEmitter();\n        this.DZ_CANCELED = new EventEmitter();\n        this.DZ_COMPLETE = new EventEmitter();\n        this.DZ_PROCESSING = new EventEmitter();\n        this.DZ_DROP = new EventEmitter();\n        this.DZ_DRAGSTART = new EventEmitter();\n        this.DZ_DRAGEND = new EventEmitter();\n        this.DZ_DRAGENTER = new EventEmitter();\n        this.DZ_DRAGOVER = new EventEmitter();\n        this.DZ_DRAGLEAVE = new EventEmitter();\n        this.DZ_THUMBNAIL = new EventEmitter();\n        this.DZ_ADDEDFILE = new EventEmitter();\n        this.DZ_REMOVEDFILE = new EventEmitter();\n        this.DZ_UPLOADPROGRESS = new EventEmitter();\n        this.DZ_MAXFILESREACHED = new EventEmitter();\n        this.DZ_MAXFILESEXCEEDED = new EventEmitter();\n        this.DZ_SUCCESSMULTIPLE = new EventEmitter();\n        this.DZ_SENDINGMULTIPLE = new EventEmitter();\n        this.DZ_CANCELEDMULTIPLE = new EventEmitter();\n        this.DZ_COMPLETEMULTIPLE = new EventEmitter();\n        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();\n        this.DZ_RESET = new EventEmitter();\n        this.DZ_QUEUECOMPLETE = new EventEmitter();\n        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();\n        var /** @type {?} */ dz = Dropzone;\n        dz.autoDiscover = false;\n    }\n    /**\n     * @return {?}\n     */\n    DropzoneDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!isPlatformBrowser(this.platformId)) {\n                return;\n            }\n            var /** @type {?} */ params = new DropzoneConfig(this.defaults);\n            params.assign(this.config); // Custom configuration\n            this.renderer.addClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');\n            this.renderer.removeClass(this.elementRef.nativeElement, (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');\n            this.zone.runOutsideAngular(function () {\n                _this.instance = new Dropzone(_this.elementRef.nativeElement, params);\n            });\n            if (this.disabled) {\n                this.instance.disable();\n            }\n            // Add auto reset handling for events\n            this.instance.on('success', function (result) {\n                if (params.autoReset != null) {\n                    setTimeout(function () { return _this.reset(); }, params.autoReset);\n                }\n            });\n            this.instance.on('error', function (error) {\n                if (params.errorReset != null) {\n                    setTimeout(function () { return _this.reset(); }, params.errorReset);\n                }\n            });\n            this.instance.on('canceled', function (result) {\n                if (params.cancelReset != null) {\n                    setTimeout(function () { return _this.reset(); }, params.cancelReset);\n                }\n            });\n            // Add native Dropzone event handling\n            DropzoneEvents.forEach(function (eventName) {\n                _this.instance.on(eventName.toLowerCase(), function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    args = (args.length === 1) ? args[0] : args;\n                    if (_this[\"DZ_\" + eventName.toUpperCase()]) {\n                        _this.zone.run(function () {\n                            _this[\"DZ_\" + eventName.toUpperCase()].emit(args);\n                        });\n                    }\n                });\n            });\n            if (!this.configDiff) {\n                this.configDiff = this.differs.find(this.config || {}).create();\n                this.configDiff.diff(this.config || {});\n            }\n        };\n    /**\n     * @return {?}\n     */\n    DropzoneDirective.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled && this.configDiff) {\n                var /** @type {?} */ changes = this.configDiff.diff(this.config || {});\n                if (changes && this.instance) {\n                    this.ngOnDestroy();\n                    this.ngOnInit();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    DropzoneDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.instance) {\n                this.zone.runOutsideAngular(function () {\n                    _this.instance.destroy();\n                });\n                this.instance = null;\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DropzoneDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            if (this.instance && changes['disabled']) {\n                if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n                    if (changes['disabled'].currentValue === false) {\n                        this.zone.runOutsideAngular(function () {\n                            _this.instance.enable();\n                        });\n                    }\n                    else if (changes['disabled'].currentValue === true) {\n                        this.zone.runOutsideAngular(function () {\n                            _this.instance.disable();\n                        });\n                    }\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    DropzoneDirective.prototype.dropzone = /**\n     * @return {?}\n     */\n        function () {\n            return this.instance;\n        };\n    /**\n     * @param {?=} cancel\n     * @return {?}\n     */\n    DropzoneDirective.prototype.reset = /**\n     * @param {?=} cancel\n     * @return {?}\n     */\n        function (cancel) {\n            var _this = this;\n            if (this.instance) {\n                this.zone.runOutsideAngular(function () {\n                    _this.instance.removeAllFiles(cancel);\n                });\n            }\n        };\n    return DropzoneDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DropzoneComponent = /*@__PURE__*/ (function () {\n    function DropzoneComponent() {\n        this.disabled = false;\n        this.message = 'Click or drag files to upload';\n        this.placeholder = '';\n        this.useDropzoneClass = true;\n        this.DZ_ERROR = new EventEmitter();\n        this.DZ_SUCCESS = new EventEmitter();\n        this.DZ_SENDING = new EventEmitter();\n        this.DZ_CANCELED = new EventEmitter();\n        this.DZ_COMPLETE = new EventEmitter();\n        this.DZ_PROCESSING = new EventEmitter();\n        this.DZ_DROP = new EventEmitter();\n        this.DZ_DRAGSTART = new EventEmitter();\n        this.DZ_DRAGEND = new EventEmitter();\n        this.DZ_DRAGENTER = new EventEmitter();\n        this.DZ_DRAGOVER = new EventEmitter();\n        this.DZ_DRAGLEAVE = new EventEmitter();\n        this.DZ_THUMBNAIL = new EventEmitter();\n        this.DZ_ADDEDFILE = new EventEmitter();\n        this.DZ_REMOVEDFILE = new EventEmitter();\n        this.DZ_UPLOADPROGRESS = new EventEmitter();\n        this.DZ_MAXFILESREACHED = new EventEmitter();\n        this.DZ_MAXFILESEXCEEDED = new EventEmitter();\n        this.DZ_SUCCESSMULTIPLE = new EventEmitter();\n        this.DZ_SENDINGMULTIPLE = new EventEmitter();\n        this.DZ_CANCELEDMULTIPLE = new EventEmitter();\n        this.DZ_COMPLETEMULTIPLE = new EventEmitter();\n        this.DZ_PROCESSINGMULTIPLE = new EventEmitter();\n        this.DZ_RESET = new EventEmitter();\n        this.DZ_QUEUECOMPLETE = new EventEmitter();\n        this.DZ_TOTALUPLOADPROGRESS = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    DropzoneComponent.prototype.getPlaceholder = /**\n     * @return {?}\n     */\n        function () {\n            return 'url(' + encodeURI(this.placeholder) + ')';\n        };\n    return DropzoneComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DropzoneModule = /*@__PURE__*/ (function () {\n    function DropzoneModule() {\n    }\n    return DropzoneModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { DropzoneComponent, DropzoneDirective, DROPZONE_CONFIG, DropzoneConfig, DropzoneModule };\n//# sourceMappingURL=ngx-dropzone-wrapper.es5.js.map\n",null]}