{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\svgsaver\\lib\\svgsaver.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\svgsaver\\lib\\svgsaver.js","mtime":1527492786346},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\n\r\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\nvar _computedStyles = require('computed-styles');\r\n\r\nvar _computedStyles2 = _interopRequireDefault(_computedStyles);\r\n\r\nvar _fileSaver = require('file-saver');\r\n\r\nvar _fileSaver2 = _interopRequireDefault(_fileSaver);\r\n\r\nvar svgStyles = { // Whitelist of CSS styles and default values\r\n  'alignment-baseline': 'auto',\r\n  'baseline-shift': 'baseline',\r\n  'clip': 'auto',\r\n  'clip-path': 'none',\r\n  'clip-rule': 'nonzero',\r\n  'color': 'rgb(51, 51, 51)',\r\n  'color-interpolation': 'srgb',\r\n  'color-interpolation-filters': 'linearrgb',\r\n  'color-profile': 'auto',\r\n  'color-rendering': 'auto',\r\n  'cursor': 'auto',\r\n  'direction': 'ltr',\r\n  'display': 'inline',\r\n  'dominant-baseline': 'auto',\r\n  'enable-background': '',\r\n  'fill': 'rgb(0, 0, 0)',\r\n  'fill-opacity': '1',\r\n  'fill-rule': 'nonzero',\r\n  'filter': 'none',\r\n  'flood-color': 'rgb(0, 0, 0)',\r\n  'flood-opacity': '1',\r\n  'font': '',\r\n  'font-family': 'normal',\r\n  'font-size': 'medium',\r\n  'font-size-adjust': 'auto',\r\n  'font-stretch': 'normal',\r\n  'font-style': 'normal',\r\n  'font-variant': 'normal',\r\n  'font-weight': '400',\r\n  'glyph-orientation-horizontal': '0deg',\r\n  'glyph-orientation-vertical': 'auto',\r\n  'image-rendering': 'auto',\r\n  'kerning': 'auto',\r\n  'letter-spacing': '0',\r\n  'lighting-color': 'rgb(255, 255, 255)',\r\n  'marker': '',\r\n  'marker-end': 'none',\r\n  'marker-mid': 'none',\r\n  'marker-start': 'none',\r\n  'mask': 'none',\r\n  'opacity': '1',\r\n  'overflow': 'visible',\r\n  'paint-order': 'fill',\r\n  'pointer-events': 'auto',\r\n  'shape-rendering': 'auto',\r\n  'stop-color': 'rgb(0, 0, 0)',\r\n  'stop-opacity': '1',\r\n  'stroke': 'none',\r\n  'stroke-dasharray': 'none',\r\n  'stroke-dashoffset': '0',\r\n  'stroke-linecap': 'butt',\r\n  'stroke-linejoin': 'miter',\r\n  'stroke-miterlimit': '4',\r\n  'stroke-opacity': '1',\r\n  'stroke-width': '1',\r\n  'text-anchor': 'start',\r\n  'text-decoration': 'none',\r\n  'text-rendering': 'auto',\r\n  'unicode-bidi': 'normal',\r\n  'visibility': 'visible',\r\n  'word-spacing': '0px',\r\n  'writing-mode': 'lr-tb'\r\n};\r\n\r\nvar svgAttrs = [// white list of attributes\r\n'id', 'xml: base', 'xml: lang', 'xml: space', // Core\r\n'height', 'result', 'width', 'x', 'y', // Primitive\r\n'xlink: href', // Xlink attribute\r\n'href', 'style', 'class', 'd', 'pathLength', // Path\r\n'x', 'y', 'dx', 'dy', 'glyphRef', 'format', 'x1', 'y1', 'x2', 'y2', 'rotate', 'textLength', 'cx', 'cy', 'r', 'rx', 'ry', 'fx', 'fy', 'width', 'height', 'refX', 'refY', 'orient', 'markerUnits', 'markerWidth', 'markerHeight', 'maskUnits', 'transform', 'viewBox', 'version', // Container\r\n'preserveAspectRatio', 'xmlns', 'points', // Polygons\r\n'offset', 'xlink:href'];\r\n\r\n// http://www.w3.org/TR/SVG/propidx.html\r\n// via https://github.com/svg/svgo/blob/master/plugins/_collections.js\r\nvar inheritableAttrs = ['clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cursor', 'direction', 'fill', 'fill-opacity', 'fill-rule', 'font', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'image-rendering', 'kerning', 'letter-spacing', 'marker', 'marker-end', 'marker-mid', 'marker-start', 'pointer-events', 'shape-rendering', 'stroke', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-rendering', 'transform', 'visibility', 'white-space', 'word-spacing', 'writing-mode'];\r\n\r\n/* Some simple utilities */\r\n\r\nvar isFunction = function isFunction(a) {\r\n  return typeof a === 'function';\r\n};\r\nvar isDefined = function isDefined(a) {\r\n  return typeof a !== 'undefined';\r\n};\r\nvar isUndefined = function isUndefined(a) {\r\n  return typeof a === 'undefined';\r\n};\r\nvar isObject = function isObject(a) {\r\n  return a !== null && typeof a === 'object';\r\n};\r\n\r\n// from https://github.com/npm-dom/is-dom/blob/master/index.js\r\nfunction isNode(val) {\r\n  if (!isObject(val)) {\r\n    return false;\r\n  }\r\n  if (isDefined(window) && isObject(window.Node)) {\r\n    return val instanceof window.Node;\r\n  }\r\n  return typeof val.nodeType === 'number' && typeof val.nodeName === 'string';\r\n}\r\n\r\n/* Some utilities for cloning SVGs with inline styles */\r\n// Removes attributes that are not valid for SVGs\r\nfunction cleanAttrs(el, attrs, styles) {\r\n  // attrs === false - remove all, attrs === true - allow all\r\n  if (attrs === true) {\r\n    return;\r\n  }\r\n\r\n  Array.prototype.slice.call(el.attributes).forEach(function (attr) {\r\n    // remove if it is not style nor on attrs  whitelist\r\n    // keeping attributes that are also styles because attributes override\r\n    if (attr.specified) {\r\n      if (attrs === '' || attrs === false || isUndefined(styles[attr.name]) && attrs.indexOf(attr.name) < 0) {\r\n        el.removeAttribute(attr.name);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction cleanStyle(tgt, parentStyles) {\r\n  parentStyles = parentStyles || tgt.parentNode.style;\r\n  inheritableAttrs.forEach(function (key) {\r\n    if (tgt.style[key] === parentStyles[key]) {\r\n      tgt.style.removeProperty(key);\r\n    }\r\n  });\r\n}\r\n\r\nfunction domWalk(src, tgt, down, up) {\r\n  down(src, tgt);\r\n  var children = src.childNodes;\r\n  for (var i = 0; i < children.length; i++) {\r\n    domWalk(children[i], tgt.childNodes[i], down, up);\r\n  }\r\n  up(src, tgt);\r\n}\r\n\r\n// Clones an SVGElement, copies approprate atttributes and styles.\r\nfunction cloneSvg(src, attrs, styles) {\r\n  var clonedSvg = src.cloneNode(true);\r\n\r\n  domWalk(src, clonedSvg, function (src, tgt) {\r\n    if (tgt.style) {\r\n      (0, _computedStyles2['default'])(src, tgt.style, styles);\r\n    }\r\n  }, function (src, tgt) {\r\n    if (tgt.style && tgt.parentNode) {\r\n      cleanStyle(tgt);\r\n    }\r\n    if (tgt.attributes) {\r\n      cleanAttrs(tgt, attrs, styles);\r\n    }\r\n  });\r\n\r\n  return clonedSvg;\r\n}\r\n\r\n/* global Image, MouseEvent */\r\n\r\n/* Some simple utilities for saving SVGs, including an alternative to saveAs */\r\n\r\n// detection\r\nvar DownloadAttributeSupport = typeof document !== 'undefined' && 'download' in document.createElement('a') && typeof MouseEvent === 'function';\r\n\r\nfunction saveUri(uri, name) {\r\n  if (DownloadAttributeSupport) {\r\n    var dl = document.createElement('a');\r\n    dl.setAttribute('href', uri);\r\n    dl.setAttribute('download', name);\r\n    // firefox doesn't support `.click()`...\r\n    // from https://github.com/sindresorhus/multi-download/blob/gh-pages/index.js\r\n    dl.dispatchEvent(new MouseEvent('click'));\r\n    return true;\r\n  } else if (typeof window !== 'undefined') {\r\n    window.open(uri, '_blank', '');\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction createCanvas(uri, name, cb) {\r\n  var canvas = document.createElement('canvas');\r\n  var context = canvas.getContext('2d');\r\n\r\n  var image = new Image();\r\n  image.onload = function () {\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    context.drawImage(image, 0, 0);\r\n\r\n    cb(canvas);\r\n  };\r\n  image.src = uri;\r\n  return true;\r\n}\r\n\r\nfunction savePng(uri, name) {\r\n  return createCanvas(uri, name, function (canvas) {\r\n    if (isDefined(canvas.toBlob)) {\r\n      canvas.toBlob(function (blob) {\r\n        _fileSaver2['default'].saveAs(blob, name);\r\n      });\r\n    } else {\r\n      saveUri(canvas.toDataURL('image/png'), name);\r\n    }\r\n  });\r\n}\r\n\r\n/* global Blob */\r\n\r\nvar isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\r\n\r\n// inheritable styles may be overridden by parent, always copy for now\r\ninheritableAttrs.forEach(function (k) {\r\n  if (k in svgStyles) {\r\n    svgStyles[k] = true;\r\n  }\r\n});\r\n\r\nvar SvgSaver = (function () {\r\n  _createClass(SvgSaver, null, [{\r\n    key: 'getSvg',\r\n    value: function getSvg(el) {\r\n      if (isUndefined(el) || el === '') {\r\n        el = document.body.querySelector('svg');\r\n      } else if (typeof el === 'string') {\r\n        el = document.body.querySelector(el);\r\n      }\r\n      if (el && el.tagName !== 'svg') {\r\n        el = el.querySelector('svg');\r\n      }\r\n      if (!isNode(el)) {\r\n        throw new Error('svgsaver: Can\\'t find an svg element');\r\n      }\r\n      return el;\r\n    }\r\n  }, {\r\n    key: 'getFilename',\r\n    value: function getFilename(el, filename, ext) {\r\n      if (!filename || filename === '') {\r\n        filename = (el.getAttribute('title') || 'untitled') + '.' + ext;\r\n      }\r\n      return encodeURI(filename);\r\n    }\r\n\r\n    /**\r\n    * SvgSaver constructor.\r\n    * @constructs SvgSaver\r\n    * @api public\r\n    *\r\n    * @example\r\n    * var svgsaver = new SvgSaver();                      // creates a new instance\r\n    * var svg = document.querySelector('#mysvg');         // find the SVG element\r\n    * svgsaver.asSvg(svg);                                // save as SVG\r\n    */\r\n  }]);\r\n\r\n  function SvgSaver() {\r\n    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n    var attrs = _ref.attrs;\r\n    var styles = _ref.styles;\r\n\r\n    _classCallCheck(this, SvgSaver);\r\n\r\n    this.attrs = attrs === undefined ? svgAttrs : attrs;\r\n    this.styles = styles === undefined ? svgStyles : styles;\r\n  }\r\n\r\n  /**\r\n  * Return the cloned SVG after cleaning\r\n  *\r\n  * @param {SVGElement} el The element to copy.\r\n  * @returns {SVGElement} SVG text after cleaning\r\n  * @api public\r\n  */\r\n\r\n  _createClass(SvgSaver, [{\r\n    key: 'cloneSVG',\r\n    value: function cloneSVG(el) {\r\n      el = SvgSaver.getSvg(el);\r\n      var svg = cloneSvg(el, this.attrs, this.styles);\r\n\r\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n      svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\r\n      svg.setAttribute('version', 1.1);\r\n\r\n      // height and width needed to download in FireFox\r\n      svg.setAttribute('width', svg.getAttribute('width') || '500');\r\n      svg.setAttribute('height', svg.getAttribute('height') || '900');\r\n\r\n      return svg;\r\n    }\r\n\r\n    /**\r\n    * Return the SVG HTML text after cleaning\r\n    *\r\n    * @param {SVGElement} el The element to copy.\r\n    * @returns {String} SVG text after cleaning\r\n    * @api public\r\n    */\r\n  }, {\r\n    key: 'getHTML',\r\n    value: function getHTML(el) {\r\n      var svg = this.cloneSVG(el);\r\n\r\n      var html = svg.outerHTML;\r\n      if (html) {\r\n        return html;\r\n      }\r\n\r\n      // see http://stackoverflow.com/questions/19610089/unwanted-namespaces-on-svg-markup-when-using-xmlserializer-in-javascript-with-ie\r\n      svg.removeAttribute('xmlns');\r\n      svg.removeAttribute('xmlns:xlink');\r\n\r\n      svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', 'http://www.w3.org/2000/svg');\r\n      svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\r\n\r\n      return new window.XMLSerializer().serializeToString(svg);\r\n    }\r\n\r\n    /**\r\n    * Return the SVG, after cleaning, as a text/xml Blob\r\n    *\r\n    * @param {SVGElement} el The element to copy.\r\n    * @returns {Blog} SVG as a text/xml Blob\r\n    * @api public\r\n    */\r\n  }, {\r\n    key: 'getBlob',\r\n    value: function getBlob(el) {\r\n      var html = this.getHTML(el);\r\n      return new Blob([html], { type: 'text/xml' });\r\n    }\r\n\r\n    /**\r\n    * Return the SVG, after cleaning, as a image/svg+xml;base64 URI encoded string\r\n    *\r\n    * @param {SVGElement} el The element to copy.\r\n    * @returns {String} SVG as image/svg+xml;base64 URI encoded string\r\n    * @api public\r\n    */\r\n  }, {\r\n    key: 'getUri',\r\n    value: function getUri(el) {\r\n      var html = encodeURIComponent(this.getHTML(el));\r\n      if (isDefined(window.btoa)) {\r\n        // see http://stackoverflow.com/questions/23223718/failed-to-execute-btoa-on-window-the-string-to-be-encoded-contains-characte\r\n        return 'data:image/svg+xml;base64,' + window.btoa(unescape(html));\r\n      }\r\n      return 'data:image/svg+xml,' + html;\r\n    }\r\n\r\n    /**\r\n    * Saves the SVG as a SVG file using method compatible with the browser\r\n    *\r\n    * @param {SVGElement} el The element to copy.\r\n    * @param {string} [filename] The filename to save, defaults to the SVG title or 'untitled.svg'\r\n    * @returns {SvgSaver} The SvgSaver instance\r\n    * @api public\r\n    */\r\n  }, {\r\n    key: 'asSvg',\r\n    value: function asSvg(el, filename) {\r\n      el = SvgSaver.getSvg(el);\r\n      filename = SvgSaver.getFilename(el, filename, 'svg');\r\n      if (isFunction(Blob)) {\r\n        return _fileSaver2['default'].saveAs(this.getBlob(el), filename);\r\n      }\r\n      return saveUri(this.getUri(el), filename);\r\n    }\r\n\r\n    /**\r\n    * Gets the SVG as a PNG data URI.\r\n    *\r\n    * @param {SVGElement} el The element to copy.\r\n    * @param {Function} cb Call back called with the PNG data uri.\r\n    * @api public\r\n    */\r\n  }, {\r\n    key: 'getPngUri',\r\n    value: function getPngUri(el, cb) {\r\n      if (isIE11) {\r\n        console.error('svgsaver: getPngUri not supported on IE11');\r\n      }\r\n      el = SvgSaver.getSvg(el);\r\n      var filename = SvgSaver.getFilename(el, null, 'png');\r\n      return createCanvas(this.getUri(el), filename, function (canvas) {\r\n        cb(canvas.toDataURL('image/png'));\r\n      });\r\n    }\r\n\r\n    /**\r\n    * Saves the SVG as a PNG file using method compatible with the browser\r\n    *\r\n    * @param {SVGElement} el The element to copy.\r\n    * @param {string} [filename] The filename to save, defaults to the SVG title or 'untitled.png'\r\n    * @returns {SvgSaver} The SvgSaver instance\r\n    * @api public\r\n    */\r\n  }, {\r\n    key: 'asPng',\r\n    value: function asPng(el, filename) {\r\n      if (isIE11) {\r\n        console.error('svgsaver: asPng not supported on IE11');\r\n      }\r\n      el = SvgSaver.getSvg(el);\r\n      filename = SvgSaver.getFilename(el, filename, 'png');\r\n      return savePng(this.getUri(el), filename);\r\n    }\r\n  }]);\r\n\r\n  return SvgSaver;\r\n})();\r\n\r\nexports['default'] = SvgSaver;\r\nmodule.exports = exports['default'];\r\n",null]}