{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\calendar\\calendar-utils.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\calendar\\calendar-utils.js","mtime":1527490563124},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["/**\n * Creates a range for the given start/finish\n * @param  {Number} start\n * @param  {Number} finish\n * @return {Array}  result of range\n */\nexport function range(start, finish) {\n    var arr = [];\n    var i = start;\n    while (i < finish) {\n        arr.push(i++);\n    }\n    return arr;\n}\n/**\n * Returns the month offset correctly\n * @param  {Object} active\n * @return {Object} days\n */\nexport function getMonth(active) {\n    var days = getDaysForMonth(active);\n    var offset = active.startOf('month').isoWeekday();\n    return getWeeksForDays(days, offset);\n}\n/**\n * Gets a array of days split by week\n * @param  {array} days\n * @param  {number} offset\n * @return {array} days by week\n */\nexport function getWeeksForDays(days, startDay) {\n    var weeks = [];\n    var offset = 7;\n    // fill front row\n    if (startDay < 7) {\n        offset = 7 - startDay;\n    }\n    var _loop_1 = function () {\n        var wk = days.slice(0, offset);\n        days.splice(0, offset);\n        // fill front row\n        if (offset < 7) {\n            var firstDay_1 = wk[0].date;\n            var fill = range(0, startDay)\n                .map(function (d, i) {\n                var date = firstDay_1.clone().subtract(startDay - i, 'd');\n                return {\n                    num: date.date(),\n                    dayOfWeek: date.day(),\n                    date: date,\n                    prevMonth: true\n                };\n            });\n            wk = fill.concat(wk);\n            offset = 7;\n        }\n        // fill last row\n        if (!days.length && wk.length !== 7) {\n            var lastDay_1 = wk[wk.length - 1].date;\n            var fill = range(wk.length, 7)\n                .map(function (d, i) {\n                var date = lastDay_1.clone().add(i + 1, 'd');\n                return {\n                    num: date.date(),\n                    dayOfWeek: date.day(),\n                    date: date,\n                    nextMonth: true\n                };\n            });\n            wk = wk.concat(fill);\n        }\n        wk.forEach(function (day) {\n            day.classes = {\n                'first-day-of-month': day.num === 1,\n                'last-day-of-week': day.dayOfWeek === 6,\n                today: day.today,\n                'next-month': day.nextMonth,\n                'prev-month': day.prevMonth\n            };\n        });\n        weeks.push(wk);\n    };\n    while (days.length) {\n        _loop_1();\n    }\n    return weeks;\n}\n/**\n * Get the days for the month\n * @param  {Object} active\n * @return {array} array of days\n */\nexport function getDaysForMonth(active) {\n    return range(1, active.daysInMonth() + 1).map(function (i) {\n        var date = active.date(i).clone();\n        var today = date.isSame(new Date(), 'day');\n        return {\n            num: date.date(),\n            dayOfWeek: date.day(),\n            date: date,\n            today: today\n        };\n    });\n}\n//# sourceMappingURL=calendar-utils.js.map",null]}