{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\svgsaver\\lib\\svgsaver.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\svgsaver\\lib\\svgsaver.js","mtime":1494265032000},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _computedStyles = require('computed-styles');\n\nvar _computedStyles2 = _interopRequireDefault(_computedStyles);\n\nvar _fileSaver = require('file-saver');\n\nvar _fileSaver2 = _interopRequireDefault(_fileSaver);\n\nvar svgStyles = { // Whitelist of CSS styles and default values\n  'alignment-baseline': 'auto',\n  'baseline-shift': 'baseline',\n  'clip': 'auto',\n  'clip-path': 'none',\n  'clip-rule': 'nonzero',\n  'color': 'rgb(51, 51, 51)',\n  'color-interpolation': 'srgb',\n  'color-interpolation-filters': 'linearrgb',\n  'color-profile': 'auto',\n  'color-rendering': 'auto',\n  'cursor': 'auto',\n  'direction': 'ltr',\n  'display': 'inline',\n  'dominant-baseline': 'auto',\n  'enable-background': '',\n  'fill': 'rgb(0, 0, 0)',\n  'fill-opacity': '1',\n  'fill-rule': 'nonzero',\n  'filter': 'none',\n  'flood-color': 'rgb(0, 0, 0)',\n  'flood-opacity': '1',\n  'font': '',\n  'font-family': 'normal',\n  'font-size': 'medium',\n  'font-size-adjust': 'auto',\n  'font-stretch': 'normal',\n  'font-style': 'normal',\n  'font-variant': 'normal',\n  'font-weight': '400',\n  'glyph-orientation-horizontal': '0deg',\n  'glyph-orientation-vertical': 'auto',\n  'image-rendering': 'auto',\n  'kerning': 'auto',\n  'letter-spacing': '0',\n  'lighting-color': 'rgb(255, 255, 255)',\n  'marker': '',\n  'marker-end': 'none',\n  'marker-mid': 'none',\n  'marker-start': 'none',\n  'mask': 'none',\n  'opacity': '1',\n  'overflow': 'visible',\n  'paint-order': 'fill',\n  'pointer-events': 'auto',\n  'shape-rendering': 'auto',\n  'stop-color': 'rgb(0, 0, 0)',\n  'stop-opacity': '1',\n  'stroke': 'none',\n  'stroke-dasharray': 'none',\n  'stroke-dashoffset': '0',\n  'stroke-linecap': 'butt',\n  'stroke-linejoin': 'miter',\n  'stroke-miterlimit': '4',\n  'stroke-opacity': '1',\n  'stroke-width': '1',\n  'text-anchor': 'start',\n  'text-decoration': 'none',\n  'text-rendering': 'auto',\n  'unicode-bidi': 'normal',\n  'visibility': 'visible',\n  'word-spacing': '0px',\n  'writing-mode': 'lr-tb'\n};\n\nvar svgAttrs = [// white list of attributes\n'id', 'xml: base', 'xml: lang', 'xml: space', // Core\n'height', 'result', 'width', 'x', 'y', // Primitive\n'xlink: href', // Xlink attribute\n'href', 'style', 'class', 'd', 'pathLength', // Path\n'x', 'y', 'dx', 'dy', 'glyphRef', 'format', 'x1', 'y1', 'x2', 'y2', 'rotate', 'textLength', 'cx', 'cy', 'r', 'rx', 'ry', 'fx', 'fy', 'width', 'height', 'refX', 'refY', 'orient', 'markerUnits', 'markerWidth', 'markerHeight', 'maskUnits', 'transform', 'viewBox', 'version', // Container\n'preserveAspectRatio', 'xmlns', 'points', // Polygons\n'offset', 'xlink:href'];\n\n// http://www.w3.org/TR/SVG/propidx.html\n// via https://github.com/svg/svgo/blob/master/plugins/_collections.js\nvar inheritableAttrs = ['clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cursor', 'direction', 'fill', 'fill-opacity', 'fill-rule', 'font', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'image-rendering', 'kerning', 'letter-spacing', 'marker', 'marker-end', 'marker-mid', 'marker-start', 'pointer-events', 'shape-rendering', 'stroke', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-rendering', 'transform', 'visibility', 'white-space', 'word-spacing', 'writing-mode'];\n\n/* Some simple utilities */\n\nvar isFunction = function isFunction(a) {\n  return typeof a === 'function';\n};\nvar isDefined = function isDefined(a) {\n  return typeof a !== 'undefined';\n};\nvar isUndefined = function isUndefined(a) {\n  return typeof a === 'undefined';\n};\nvar isObject = function isObject(a) {\n  return a !== null && typeof a === 'object';\n};\n\n// from https://github.com/npm-dom/is-dom/blob/master/index.js\nfunction isNode(val) {\n  if (!isObject(val)) {\n    return false;\n  }\n  if (isDefined(window) && isObject(window.Node)) {\n    return val instanceof window.Node;\n  }\n  return typeof val.nodeType === 'number' && typeof val.nodeName === 'string';\n}\n\n/* Some utilities for cloning SVGs with inline styles */\n// Removes attributes that are not valid for SVGs\nfunction cleanAttrs(el, attrs, styles) {\n  // attrs === false - remove all, attrs === true - allow all\n  if (attrs === true) {\n    return;\n  }\n\n  Array.prototype.slice.call(el.attributes).forEach(function (attr) {\n    // remove if it is not style nor on attrs  whitelist\n    // keeping attributes that are also styles because attributes override\n    if (attr.specified) {\n      if (attrs === '' || attrs === false || isUndefined(styles[attr.name]) && attrs.indexOf(attr.name) < 0) {\n        el.removeAttribute(attr.name);\n      }\n    }\n  });\n}\n\nfunction cleanStyle(tgt, parentStyles) {\n  parentStyles = parentStyles || tgt.parentNode.style;\n  inheritableAttrs.forEach(function (key) {\n    if (tgt.style[key] === parentStyles[key]) {\n      tgt.style.removeProperty(key);\n    }\n  });\n}\n\nfunction domWalk(src, tgt, down, up) {\n  down(src, tgt);\n  var children = src.childNodes;\n  for (var i = 0; i < children.length; i++) {\n    domWalk(children[i], tgt.childNodes[i], down, up);\n  }\n  up(src, tgt);\n}\n\n// Clones an SVGElement, copies approprate atttributes and styles.\nfunction cloneSvg(src, attrs, styles) {\n  var clonedSvg = src.cloneNode(true);\n\n  domWalk(src, clonedSvg, function (src, tgt) {\n    if (tgt.style) {\n      (0, _computedStyles2['default'])(src, tgt.style, styles);\n    }\n  }, function (src, tgt) {\n    if (tgt.style && tgt.parentNode) {\n      cleanStyle(tgt);\n    }\n    if (tgt.attributes) {\n      cleanAttrs(tgt, attrs, styles);\n    }\n  });\n\n  return clonedSvg;\n}\n\n/* global Image, MouseEvent */\n\n/* Some simple utilities for saving SVGs, including an alternative to saveAs */\n\n// detection\nvar DownloadAttributeSupport = typeof document !== 'undefined' && 'download' in document.createElement('a') && typeof MouseEvent === 'function';\n\nfunction saveUri(uri, name) {\n  if (DownloadAttributeSupport) {\n    var dl = document.createElement('a');\n    dl.setAttribute('href', uri);\n    dl.setAttribute('download', name);\n    // firefox doesn't support `.click()`...\n    // from https://github.com/sindresorhus/multi-download/blob/gh-pages/index.js\n    dl.dispatchEvent(new MouseEvent('click'));\n    return true;\n  } else if (typeof window !== 'undefined') {\n    window.open(uri, '_blank', '');\n    return true;\n  }\n\n  return false;\n}\n\nfunction createCanvas(uri, name, cb) {\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  var image = new Image();\n  image.onload = function () {\n    canvas.width = image.width;\n    canvas.height = image.height;\n    context.drawImage(image, 0, 0);\n\n    cb(canvas);\n  };\n  image.src = uri;\n  return true;\n}\n\nfunction savePng(uri, name) {\n  return createCanvas(uri, name, function (canvas) {\n    if (isDefined(canvas.toBlob)) {\n      canvas.toBlob(function (blob) {\n        _fileSaver2['default'].saveAs(blob, name);\n      });\n    } else {\n      saveUri(canvas.toDataURL('image/png'), name);\n    }\n  });\n}\n\n/* global Blob */\n\nvar isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\n\n// inheritable styles may be overridden by parent, always copy for now\ninheritableAttrs.forEach(function (k) {\n  if (k in svgStyles) {\n    svgStyles[k] = true;\n  }\n});\n\nvar SvgSaver = (function () {\n  _createClass(SvgSaver, null, [{\n    key: 'getSvg',\n    value: function getSvg(el) {\n      if (isUndefined(el) || el === '') {\n        el = document.body.querySelector('svg');\n      } else if (typeof el === 'string') {\n        el = document.body.querySelector(el);\n      }\n      if (el && el.tagName !== 'svg') {\n        el = el.querySelector('svg');\n      }\n      if (!isNode(el)) {\n        throw new Error('svgsaver: Can\\'t find an svg element');\n      }\n      return el;\n    }\n  }, {\n    key: 'getFilename',\n    value: function getFilename(el, filename, ext) {\n      if (!filename || filename === '') {\n        filename = (el.getAttribute('title') || 'untitled') + '.' + ext;\n      }\n      return encodeURI(filename);\n    }\n\n    /**\n    * SvgSaver constructor.\n    * @constructs SvgSaver\n    * @api public\n    *\n    * @example\n    * var svgsaver = new SvgSaver();                      // creates a new instance\n    * var svg = document.querySelector('#mysvg');         // find the SVG element\n    * svgsaver.asSvg(svg);                                // save as SVG\n    */\n  }]);\n\n  function SvgSaver() {\n    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var attrs = _ref.attrs;\n    var styles = _ref.styles;\n\n    _classCallCheck(this, SvgSaver);\n\n    this.attrs = attrs === undefined ? svgAttrs : attrs;\n    this.styles = styles === undefined ? svgStyles : styles;\n  }\n\n  /**\n  * Return the cloned SVG after cleaning\n  *\n  * @param {SVGElement} el The element to copy.\n  * @returns {SVGElement} SVG text after cleaning\n  * @api public\n  */\n\n  _createClass(SvgSaver, [{\n    key: 'cloneSVG',\n    value: function cloneSVG(el) {\n      el = SvgSaver.getSvg(el);\n      var svg = cloneSvg(el, this.attrs, this.styles);\n\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n      svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n      svg.setAttribute('version', 1.1);\n\n      // height and width needed to download in FireFox\n      svg.setAttribute('width', svg.getAttribute('width') || '500');\n      svg.setAttribute('height', svg.getAttribute('height') || '900');\n\n      return svg;\n    }\n\n    /**\n    * Return the SVG HTML text after cleaning\n    *\n    * @param {SVGElement} el The element to copy.\n    * @returns {String} SVG text after cleaning\n    * @api public\n    */\n  }, {\n    key: 'getHTML',\n    value: function getHTML(el) {\n      var svg = this.cloneSVG(el);\n\n      var html = svg.outerHTML;\n      if (html) {\n        return html;\n      }\n\n      // see http://stackoverflow.com/questions/19610089/unwanted-namespaces-on-svg-markup-when-using-xmlserializer-in-javascript-with-ie\n      svg.removeAttribute('xmlns');\n      svg.removeAttribute('xmlns:xlink');\n\n      svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', 'http://www.w3.org/2000/svg');\n      svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\n\n      return new window.XMLSerializer().serializeToString(svg);\n    }\n\n    /**\n    * Return the SVG, after cleaning, as a text/xml Blob\n    *\n    * @param {SVGElement} el The element to copy.\n    * @returns {Blog} SVG as a text/xml Blob\n    * @api public\n    */\n  }, {\n    key: 'getBlob',\n    value: function getBlob(el) {\n      var html = this.getHTML(el);\n      return new Blob([html], { type: 'text/xml' });\n    }\n\n    /**\n    * Return the SVG, after cleaning, as a image/svg+xml;base64 URI encoded string\n    *\n    * @param {SVGElement} el The element to copy.\n    * @returns {String} SVG as image/svg+xml;base64 URI encoded string\n    * @api public\n    */\n  }, {\n    key: 'getUri',\n    value: function getUri(el) {\n      var html = encodeURIComponent(this.getHTML(el));\n      if (isDefined(window.btoa)) {\n        // see http://stackoverflow.com/questions/23223718/failed-to-execute-btoa-on-window-the-string-to-be-encoded-contains-characte\n        return 'data:image/svg+xml;base64,' + window.btoa(unescape(html));\n      }\n      return 'data:image/svg+xml,' + html;\n    }\n\n    /**\n    * Saves the SVG as a SVG file using method compatible with the browser\n    *\n    * @param {SVGElement} el The element to copy.\n    * @param {string} [filename] The filename to save, defaults to the SVG title or 'untitled.svg'\n    * @returns {SvgSaver} The SvgSaver instance\n    * @api public\n    */\n  }, {\n    key: 'asSvg',\n    value: function asSvg(el, filename) {\n      el = SvgSaver.getSvg(el);\n      filename = SvgSaver.getFilename(el, filename, 'svg');\n      if (isFunction(Blob)) {\n        return _fileSaver2['default'].saveAs(this.getBlob(el), filename);\n      }\n      return saveUri(this.getUri(el), filename);\n    }\n\n    /**\n    * Gets the SVG as a PNG data URI.\n    *\n    * @param {SVGElement} el The element to copy.\n    * @param {Function} cb Call back called with the PNG data uri.\n    * @api public\n    */\n  }, {\n    key: 'getPngUri',\n    value: function getPngUri(el, cb) {\n      if (isIE11) {\n        console.error('svgsaver: getPngUri not supported on IE11');\n      }\n      el = SvgSaver.getSvg(el);\n      var filename = SvgSaver.getFilename(el, null, 'png');\n      return createCanvas(this.getUri(el), filename, function (canvas) {\n        cb(canvas.toDataURL('image/png'));\n      });\n    }\n\n    /**\n    * Saves the SVG as a PNG file using method compatible with the browser\n    *\n    * @param {SVGElement} el The element to copy.\n    * @param {string} [filename] The filename to save, defaults to the SVG title or 'untitled.png'\n    * @returns {SvgSaver} The SvgSaver instance\n    * @api public\n    */\n  }, {\n    key: 'asPng',\n    value: function asPng(el, filename) {\n      if (isIE11) {\n        console.error('svgsaver: asPng not supported on IE11');\n      }\n      el = SvgSaver.getSvg(el);\n      filename = SvgSaver.getFilename(el, filename, 'png');\n      return savePng(this.getUri(el), filename);\n    }\n  }]);\n\n  return SvgSaver;\n})();\n\nexports['default'] = SvgSaver;\nmodule.exports = exports['default'];\n",null]}