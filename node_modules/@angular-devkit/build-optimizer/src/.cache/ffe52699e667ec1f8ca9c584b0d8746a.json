{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@ngx-share\\buttons\\esm5\\ngx-share-buttons.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@ngx-share\\buttons\\esm5\\ngx-share-buttons.js","mtime":1527490340491},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, NgModule } from '@angular/core';\nimport { ShareButtons, CONFIG } from '@ngx-share/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { map } from 'rxjs/operators/map';\nimport { faEllipsisH, faMinus } from '@fortawesome/free-solid-svg-icons';\nimport { CommonModule } from '@angular/common';\nimport { ShareButtonModule } from '@ngx-share/button';\nvar ShareButtonsComponent = /*@__PURE__*/ (function () {\n    function ShareButtonsComponent(share) {\n        this.share = share;\n        this.stateWorker$ = new BehaviorSubject({\n            includedButtons: [],\n            excludedButtons: [],\n            userButtons: [],\n            selectedButtons: [],\n            expanded: true,\n            shownCount: Object.keys(this.share.config.prop).length\n        });\n        this.theme = this.share.theme;\n        this.showIcon = true;\n        this.showText = false;\n        this.showCount = false;\n        this.size = 0;\n        this.count = new EventEmitter();\n        this.opened = new EventEmitter();\n        this.closed = new EventEmitter();\n    }\n    Object.defineProperty(ShareButtonsComponent.prototype, \"includedButtons\", {\n        set: function (includedButtons) {\n            this.updateState({ includedButtons: includedButtons });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtonsComponent.prototype, \"excludedButtons\", {\n        set: function (excludedButtons) {\n            this.updateState({ excludedButtons: excludedButtons });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShareButtonsComponent.prototype, \"shownButtons\", {\n        set: function (shownCount) {\n            this.updateState({ shownCount: shownCount });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ShareButtonsComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.state$ = this.stateWorker$.pipe(map(function (state) {\n            var includedButtons = state.includedButtons.length ? state.includedButtons : state.userButtons;\n            var userButtons = includedButtons.filter(function (btn) { return state.excludedButtons.indexOf(btn) < 0; });\n            var selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);\n            return {\n                userButtons: userButtons,\n                selectedButtons: selectedButtons,\n                expanded: state.expanded,\n                shownCount: state.shownCount\n            };\n        }));\n        this.configSub$ = this.share.config$.subscribe(function (config) {\n            var includedButtons = config.options.include.length ? config.options.include : Object.keys(config.prop);\n            var userButtons = includedButtons.filter(function (btn) { return config.options.exclude.indexOf(btn) < 0; });\n            _this.updateState({\n                userButtons: userButtons,\n                expanded: false\n            });\n        });\n    };\n    ShareButtonsComponent.prototype.updateState = function (state) {\n        this.stateWorker$.next(Object.assign({}, this.stateWorker$.getValue(), state));\n    };\n    ShareButtonsComponent.prototype.ngOnDestroy = function () {\n        if (this.configSub$) {\n            this.configSub$.unsubscribe();\n        }\n    };\n    return ShareButtonsComponent;\n}());\nvar ExpandButtonComponent = /*@__PURE__*/ (function () {\n    function ExpandButtonComponent(el) {\n        this.icon = {\n            true: faMinus,\n            false: faEllipsisH\n        };\n        this.toggle = new EventEmitter();\n        el.nativeElement.style.setProperty('--button-color', '#FF6651');\n    }\n    return ExpandButtonComponent;\n}());\nfunction ShareButtonsFactory(config) {\n    return new ShareButtons(config);\n}\nvar ShareButtonsModule = /*@__PURE__*/ (function () {\n    function ShareButtonsModule() {\n    }\n    ShareButtonsModule.forRoot = function (config) {\n        return {\n            ngModule: ShareButtonsModule,\n            providers: [\n                { provide: CONFIG, useValue: config },\n                {\n                    provide: ShareButtons,\n                    useFactory: ShareButtonsFactory,\n                    deps: [CONFIG]\n                }\n            ]\n        };\n    };\n    return ShareButtonsModule;\n}());\nexport { ShareButtonsFactory, ShareButtonsModule, ShareButtonsComponent, ExpandButtonComponent as Éµa };\n//# sourceMappingURL=ngx-share-buttons.js.map\n",null]}