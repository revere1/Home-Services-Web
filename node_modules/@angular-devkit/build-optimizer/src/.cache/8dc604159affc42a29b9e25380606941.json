{"remainingRequest":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\select\\select-dropdown.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\components\\select\\select-dropdown.component.js","mtime":1527490596478},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527490505816},{"path":"D:\\xampp\\htdocs\\smartkarma\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, HostBinding, ViewChild, ElementRef } from '@angular/core';\nimport { KeyboardKeys } from '../../utils/keys';\nimport { containsFilter } from './select-helper';\nvar SelectDropdownComponent = /*@__PURE__*/ (function () {\n    function SelectDropdownComponent(elementRef) {\n        this.keyup = new EventEmitter();\n        this.selection = new EventEmitter();\n        this.close = new EventEmitter();\n        this.element = elementRef.nativeElement;\n    }\n    Object.defineProperty(SelectDropdownComponent.prototype, \"focusIndex\", {\n        get: function () {\n            return this._focusIndex;\n        },\n        set: function (val) {\n            this._focusIndex = val;\n            this.focusElement(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectDropdownComponent.prototype, \"filterQuery\", {\n        get: function () {\n            return this._filterQuery;\n        },\n        set: function (val) {\n            this._filterQuery = val;\n            this.groups = this.calculateGroups(this.groupBy, this.options, val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectDropdownComponent.prototype, \"groupBy\", {\n        get: function () {\n            return this._groupBy;\n        },\n        set: function (val) {\n            this._groupBy = val;\n            this.groups = this.calculateGroups(val, this.options);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectDropdownComponent.prototype, \"options\", {\n        get: function () {\n            return this._options;\n        },\n        set: function (val) {\n            this.groups = this.calculateGroups(this.groupBy, val);\n            this._options = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectDropdownComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.filterable && !this.tagging) {\n            setTimeout(function () {\n                _this.filterInput.nativeElement.focus();\n            }, 5);\n        }\n    };\n    SelectDropdownComponent.prototype.isSelected = function (option) {\n        var _this = this;\n        if (!this.selected || !this.selected.length)\n            return false;\n        var idx = this.selected.findIndex(function (o) {\n            if (_this.identifier)\n                return o[_this.identifier] === option.value[_this.identifier];\n            return o === option.value;\n        });\n        return idx > -1;\n    };\n    SelectDropdownComponent.prototype.calculateGroups = function (groupBy, options, filter) {\n        if (!options)\n            return [];\n        // no group by defined, skip and just return\n        // emptry group object...\n        if (!groupBy) {\n            if (filter) {\n                // filter options\n                options = options.filter(function (o) {\n                    return containsFilter(o, filter);\n                });\n            }\n            // need to map indexes\n            options = options.map(function (option, index) {\n                return { option: option, index: index };\n            });\n            return [{ options: options }];\n        }\n        var map = new Map();\n        var i = 0;\n        for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n            var option = options_1[_i];\n            // only show items in filter criteria\n            if (filter && !containsFilter(option, filter)) {\n                continue;\n            }\n            var group = option.value[groupBy];\n            var opt = map.get(group);\n            // need to map the true indexes\n            var kv = { option: option, index: i++ };\n            if (!opt) {\n                map.set(group, [kv]);\n            }\n            else {\n                opt.push(kv);\n            }\n        }\n        var result = [];\n        map.forEach(function (value, key) {\n            result.push({ name: key, options: value });\n        });\n        return result;\n    };\n    SelectDropdownComponent.prototype.onInputKeyUp = function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var key = event.key;\n        var value = event.target.value;\n        if (key === KeyboardKeys.ESCAPE) {\n            this.close.emit(true);\n        }\n        else if (event.key === KeyboardKeys.ARROW_DOWN) {\n            ++this.focusIndex;\n        }\n        if (this.filterQuery !== value) {\n            this.filterQuery = value;\n        }\n        this.keyup.emit({ event: event, value: value });\n    };\n    SelectDropdownComponent.prototype.onOptionKeyDown = function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var key = event.key;\n        if (key === KeyboardKeys.ARROW_DOWN) {\n            if (this.focusIndex < (this.options.length - 1))\n                ++this.focusIndex;\n        }\n        else if (key === KeyboardKeys.ARROW_UP) {\n            if (this.focusIndex > 0)\n                --this.focusIndex;\n        }\n        else if (key === KeyboardKeys.ENTER) {\n            this.selection.emit(this.options[this.focusIndex]);\n        }\n    };\n    SelectDropdownComponent.prototype.focusElement = function (index) {\n        var elements = this.element.getElementsByClassName('ngx-select-dropdown-option');\n        var element = elements[index];\n        if (element) {\n            setTimeout(function () { return element.focus(); }, 5);\n        }\n    };\n    SelectDropdownComponent.prototype.onAddClicked = function (event, value) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.selection.emit({ value: value, name: value });\n        event.target.value = '';\n        this.close.emit();\n    };\n    __decorate([\n        HostBinding('class.groupings'),\n        Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], SelectDropdownComponent.prototype, \"groupBy\", null);\n    return SelectDropdownComponent;\n}());\nexport { SelectDropdownComponent };\n//# sourceMappingURL=select-dropdown.component.js.map\n",null]}