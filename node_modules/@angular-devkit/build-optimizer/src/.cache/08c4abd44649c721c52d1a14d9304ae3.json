{"remainingRequest":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\services\\icon-registery.service.js","dependencies":[{"path":"D:\\Ramesh\\revere\\node_modules\\@swimlane\\ngx-ui\\release\\services\\icon-registery.service.js","mtime":1527492758748},{"path":"D:\\Ramesh\\revere\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527492760843},{"path":"D:\\Ramesh\\revere\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527492734929}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nfunction convertClass(input) {\n    if (input === void 0) {\n        input = 'svg';\n    }\n    var classes = input.trim().split(' ').map(function (d) {\n        var _a = d.split(':'), set = _a[0], icon = _a[1];\n        return set.length ? set + \" \" + set + \"-\" + icon : icon;\n    }).join(' ');\n    return \"ngx-icon \" + classes;\n}\nvar IconRegisteryService = /*@__PURE__*/ (function () {\n    function IconRegisteryService() {\n        this._defaultFontSetClass = 'ngx';\n        this._iconMap = new Map();\n    }\n    IconRegisteryService.prototype.setDefaultFontSetClass = function (iconSet) {\n        if (!arguments.length)\n            return this._defaultFontSetClass;\n        this._defaultFontSetClass = iconSet;\n    };\n    IconRegisteryService.prototype.get = function (keys, set) {\n        return this.lookup(keys, set)\n            .map(function (k) { return convertClass(k); });\n    };\n    IconRegisteryService.prototype.lookup = function (keys, set) {\n        var _this = this;\n        return (Array.isArray(keys) ? keys : [keys])\n            .reduce(function (p, k) {\n            k = _this._expandKeys(k, set).map(function (kk) {\n                var x = _this._iconMap.get(kk);\n                return (x && x.length === 1) ? x[0] : kk;\n            }).join(' ');\n            return p.concat(_this._iconMap.get(k) || [k]);\n        }, []);\n    };\n    IconRegisteryService.prototype.add = function (key, icon) {\n        key = this._expandKeys(key).join(' ');\n        icon = this.lookup(icon);\n        this._iconMap.set(key, icon);\n    };\n    IconRegisteryService.prototype._expandKeys = function (key, set) {\n        if (set === void 0) {\n            set = this._defaultFontSetClass;\n        }\n        return key.split(' ').map(function (k) {\n            if (k.includes(':'))\n                return k;\n            return set + \":\" + k;\n        });\n    };\n    return IconRegisteryService;\n}());\nexport { IconRegisteryService };\n//# sourceMappingURL=icon-registery.service.js.map\n",null]}